// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cheqd/did/v2/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryDidDocRequest is the request type for the Query/DidDoc method
type QueryDidDocRequest struct {
	// DID unique identifier of the DID Document to fetch.
	// UUID-style DIDs as well as Indy-style DID are supported.
	//
	// Format: did:cheqd:<namespace>:<unique-identifier>
	//
	// Examples:
	// - did:cheqd:mainnet:c82f2b02-bdab-4dd7-b833-3e143745d612
	// - did:cheqd:testnet:wGHEXrZvJxR8vw5P3UWH1j
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryDidDocRequest) Reset()         { *m = QueryDidDocRequest{} }
func (m *QueryDidDocRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDidDocRequest) ProtoMessage()    {}
func (*QueryDidDocRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d818263856d0dc9, []int{0}
}
func (m *QueryDidDocRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDidDocRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDidDocRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDidDocRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDidDocRequest.Merge(m, src)
}
func (m *QueryDidDocRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDidDocRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDidDocRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDidDocRequest proto.InternalMessageInfo

func (m *QueryDidDocRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// QueryDidDocResponse is the response type for the Query/DidDoc method
type QueryDidDocResponse struct {
	// Successful resolution of the DID Document returns the following:
	// - didDocument is the latest version of the DID Document
	// - didDocumentMetadata is metadata associated with the latest version of the DID Document
	DidDocumentWithMetadata *DidDocWithMetadata `protobuf:"bytes,1,opt,name=did_document_with_metadata,json=didDocumentWithMetadata,proto3" json:"did_document_with_metadata,omitempty"`
}

func (m *QueryDidDocResponse) Reset()         { *m = QueryDidDocResponse{} }
func (m *QueryDidDocResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDidDocResponse) ProtoMessage()    {}
func (*QueryDidDocResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d818263856d0dc9, []int{1}
}
func (m *QueryDidDocResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDidDocResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDidDocResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDidDocResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDidDocResponse.Merge(m, src)
}
func (m *QueryDidDocResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDidDocResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDidDocResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDidDocResponse proto.InternalMessageInfo

func (m *QueryDidDocResponse) GetDidDocumentWithMetadata() *DidDocWithMetadata {
	if m != nil {
		return m.DidDocumentWithMetadata
	}
	return nil
}

// QueryDidDocVersionRequest is the request type for the Query/DidDocVersion method
type QueryDidDocVersionRequest struct {
	// DID unique identifier of the DID Document to fetch.
	// UUID-style DIDs as well as Indy-style DID are supported.
	//
	// Format: did:cheqd:<namespace>:<unique-identifier>
	//
	// Examples:
	// - did:cheqd:mainnet:c82f2b02-bdab-4dd7-b833-3e143745d612
	// - did:cheqd:testnet:wGHEXrZvJxR8vw5P3UWH1j
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique version identifier of the DID Document to fetch.
	// Returns the specified version of the DID Document.
	//
	// Format: <uuid>
	//
	// Example: 93f2573c-eca9-4098-96cb-a1ec676a29ed
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *QueryDidDocVersionRequest) Reset()         { *m = QueryDidDocVersionRequest{} }
func (m *QueryDidDocVersionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDidDocVersionRequest) ProtoMessage()    {}
func (*QueryDidDocVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d818263856d0dc9, []int{2}
}
func (m *QueryDidDocVersionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDidDocVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDidDocVersionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDidDocVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDidDocVersionRequest.Merge(m, src)
}
func (m *QueryDidDocVersionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDidDocVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDidDocVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDidDocVersionRequest proto.InternalMessageInfo

func (m *QueryDidDocVersionRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *QueryDidDocVersionRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

// QueryDidDocVersionResponse is the response type for the Query/DidDocVersion method
type QueryDidDocVersionResponse struct {
	// Successful resolution of the DID Document returns the following:
	// - didDocument is the requested version of the DID Document
	// - didDocumentMetadata is metadata associated with the requested version of the DID Document
	DidDocumentWithMetadata *DidDocWithMetadata `protobuf:"bytes,1,opt,name=did_document_with_metadata,json=didDocumentWithMetadata,proto3" json:"did_document_with_metadata,omitempty"`
}

func (m *QueryDidDocVersionResponse) Reset()         { *m = QueryDidDocVersionResponse{} }
func (m *QueryDidDocVersionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDidDocVersionResponse) ProtoMessage()    {}
func (*QueryDidDocVersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d818263856d0dc9, []int{3}
}
func (m *QueryDidDocVersionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDidDocVersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDidDocVersionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDidDocVersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDidDocVersionResponse.Merge(m, src)
}
func (m *QueryDidDocVersionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDidDocVersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDidDocVersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDidDocVersionResponse proto.InternalMessageInfo

func (m *QueryDidDocVersionResponse) GetDidDocumentWithMetadata() *DidDocWithMetadata {
	if m != nil {
		return m.DidDocumentWithMetadata
	}
	return nil
}

// QueryAllDidDocVersionsMetadataRequest is the request type for the Query/AllDidDocVersionsMetadata method
type QueryAllDidDocVersionsMetadataRequest struct {
	// DID unique identifier of the DID Document to fetch version metadata.
	// UUID-style DIDs as well as Indy-style DID are supported.
	//
	// Format: did:cheqd:<namespace>:<unique-identifier>
	//
	// Examples:
	// - did:cheqd:mainnet:c82f2b02-bdab-4dd7-b833-3e143745d612
	// - did:cheqd:testnet:wGHEXrZvJxR8vw5P3UWH1j
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDidDocVersionsMetadataRequest) Reset()         { *m = QueryAllDidDocVersionsMetadataRequest{} }
func (m *QueryAllDidDocVersionsMetadataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllDidDocVersionsMetadataRequest) ProtoMessage()    {}
func (*QueryAllDidDocVersionsMetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d818263856d0dc9, []int{4}
}
func (m *QueryAllDidDocVersionsMetadataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDidDocVersionsMetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDidDocVersionsMetadataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDidDocVersionsMetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDidDocVersionsMetadataRequest.Merge(m, src)
}
func (m *QueryAllDidDocVersionsMetadataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDidDocVersionsMetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDidDocVersionsMetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDidDocVersionsMetadataRequest proto.InternalMessageInfo

func (m *QueryAllDidDocVersionsMetadataRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *QueryAllDidDocVersionsMetadataRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllDidDocVersionsMetadataResponse is the response type for the Query/AllDidDocVersionsMetadata method
type QueryAllDidDocVersionsMetadataResponse struct {
	// versions is the list of all versions of the requested DID Document
	Versions []*Metadata `protobuf:"bytes,1,rep,name=versions,proto3" json:"versions,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDidDocVersionsMetadataResponse) Reset() {
	*m = QueryAllDidDocVersionsMetadataResponse{}
}
func (m *QueryAllDidDocVersionsMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllDidDocVersionsMetadataResponse) ProtoMessage()    {}
func (*QueryAllDidDocVersionsMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d818263856d0dc9, []int{5}
}
func (m *QueryAllDidDocVersionsMetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDidDocVersionsMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDidDocVersionsMetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDidDocVersionsMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDidDocVersionsMetadataResponse.Merge(m, src)
}
func (m *QueryAllDidDocVersionsMetadataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDidDocVersionsMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDidDocVersionsMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDidDocVersionsMetadataResponse proto.InternalMessageInfo

func (m *QueryAllDidDocVersionsMetadataResponse) GetVersions() []*Metadata {
	if m != nil {
		return m.Versions
	}
	return nil
}

func (m *QueryAllDidDocVersionsMetadataResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryDidDocRequest)(nil), "cheqd.did.v2.QueryDidDocRequest")
	proto.RegisterType((*QueryDidDocResponse)(nil), "cheqd.did.v2.QueryDidDocResponse")
	proto.RegisterType((*QueryDidDocVersionRequest)(nil), "cheqd.did.v2.QueryDidDocVersionRequest")
	proto.RegisterType((*QueryDidDocVersionResponse)(nil), "cheqd.did.v2.QueryDidDocVersionResponse")
	proto.RegisterType((*QueryAllDidDocVersionsMetadataRequest)(nil), "cheqd.did.v2.QueryAllDidDocVersionsMetadataRequest")
	proto.RegisterType((*QueryAllDidDocVersionsMetadataResponse)(nil), "cheqd.did.v2.QueryAllDidDocVersionsMetadataResponse")
}

func init() { proto.RegisterFile("cheqd/did/v2/query.proto", fileDescriptor_8d818263856d0dc9) }

var fileDescriptor_8d818263856d0dc9 = []byte{
	// 525 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xcf, 0x6a, 0x13, 0x41,
	0x18, 0xcf, 0xa6, 0x58, 0x75, 0xa2, 0x1e, 0x46, 0xd1, 0x64, 0xd5, 0x25, 0xae, 0x35, 0x09, 0xa2,
	0x33, 0x74, 0xeb, 0x0b, 0x54, 0xaa, 0x9e, 0x04, 0xcd, 0x41, 0x41, 0x90, 0x30, 0xd9, 0x6f, 0xd8,
	0x0c, 0x24, 0x3b, 0x9b, 0xcc, 0x24, 0x5a, 0x42, 0x11, 0x7c, 0x82, 0x82, 0xcf, 0xe0, 0xc9, 0xa3,
	0x2f, 0xe1, 0xb1, 0xe0, 0xc5, 0xa3, 0x24, 0x3e, 0x88, 0x74, 0x66, 0x1a, 0x77, 0x6d, 0x62, 0xf0,
	0xd2, 0xcb, 0xb2, 0x3b, 0xdf, 0xef, 0xfb, 0xfd, 0x7e, 0xdf, 0x9f, 0x59, 0x54, 0x8d, 0x7b, 0x7c,
	0x08, 0x14, 0x04, 0xd0, 0x49, 0x44, 0x87, 0x63, 0x3e, 0xda, 0x27, 0xd9, 0x48, 0x6a, 0x89, 0x2f,
	0x99, 0x08, 0x01, 0x01, 0x64, 0x12, 0xf9, 0xb5, 0x02, 0x0e, 0x04, 0x80, 0x8c, 0x2d, 0xd0, 0xbf,
	0x1f, 0x4b, 0x35, 0x90, 0x8a, 0x76, 0x99, 0xe2, 0x96, 0x81, 0x4e, 0xb6, 0xbb, 0x5c, 0xb3, 0x6d,
	0x9a, 0xb1, 0x44, 0xa4, 0x4c, 0x0b, 0x99, 0x3a, 0xec, 0xad, 0x44, 0xca, 0xa4, 0xcf, 0x29, 0xcb,
	0x04, 0x65, 0x69, 0x2a, 0xb5, 0x09, 0x2a, 0x1b, 0x0d, 0xb7, 0x10, 0x7e, 0x79, 0x9c, 0xbf, 0x27,
	0x60, 0x4f, 0xc6, 0x6d, 0x3e, 0x1c, 0x73, 0xa5, 0xf1, 0x15, 0x54, 0x16, 0x50, 0xf5, 0xea, 0x5e,
	0xeb, 0x62, 0xbb, 0x2c, 0x20, 0xd4, 0xe8, 0x6a, 0x01, 0xa5, 0x32, 0x99, 0x2a, 0x8e, 0xdf, 0x22,
	0x1f, 0x04, 0x74, 0x40, 0xc6, 0xe3, 0x01, 0x4f, 0x75, 0xe7, 0x9d, 0xd0, 0xbd, 0xce, 0x80, 0x6b,
	0x06, 0x4c, 0x33, 0x93, 0x5e, 0x89, 0xea, 0x24, 0x5f, 0x14, 0xb1, 0x0c, 0xaf, 0x85, 0xee, 0x3d,
	0x77, 0xb8, 0xf6, 0x0d, 0x30, 0x67, 0x86, 0x22, 0x1f, 0x08, 0x9f, 0xa0, 0x5a, 0x4e, 0xf5, 0x15,
	0x1f, 0x29, 0x21, 0xd3, 0x15, 0x16, 0x71, 0x15, 0x9d, 0x9f, 0x58, 0x44, 0xb5, 0x6c, 0x0e, 0x4f,
	0x3e, 0xc3, 0x29, 0xf2, 0x97, 0xd1, 0x9c, 0x4d, 0x0d, 0x1f, 0xd0, 0x3d, 0x23, 0xbe, 0xdb, 0xef,
	0x17, 0xf4, 0xd5, 0x22, 0x75, 0x45, 0x3d, 0x4f, 0x11, 0xfa, 0x33, 0x4a, 0x53, 0x52, 0x25, 0x6a,
	0x10, 0x3b, 0x77, 0x72, 0x3c, 0x77, 0x62, 0x37, 0xc7, 0xcd, 0x9d, 0xbc, 0x60, 0x09, 0x77, 0x5c,
	0xed, 0x5c, 0x66, 0xf8, 0xd9, 0x43, 0x8d, 0x75, 0x0e, 0x5c, 0x2b, 0x22, 0x74, 0xc1, 0xf5, 0x4c,
	0x55, 0xbd, 0xfa, 0x46, 0xab, 0x12, 0x5d, 0x2f, 0x16, 0xbe, 0xc8, 0x58, 0xe0, 0xf0, 0xb3, 0x25,
	0x36, 0x9b, 0x6b, 0x6d, 0x5a, 0xc1, 0xbc, 0xcf, 0xe8, 0xeb, 0x06, 0x3a, 0x67, 0x7c, 0x62, 0x81,
	0x36, 0xad, 0x51, 0xfc, 0x57, 0xdf, 0x4f, 0x2f, 0xaa, 0x7f, 0xe7, 0x1f, 0x08, 0x2b, 0x12, 0xfa,
	0x1f, 0xbf, 0xff, 0xfa, 0x54, 0xbe, 0x86, 0x31, 0x2d, 0xdc, 0xa7, 0xa9, 0x80, 0x03, 0x7c, 0xe8,
	0xa1, 0xcb, 0x85, 0xa6, 0xe0, 0xe6, 0x4a, 0xc2, 0xe2, 0xfe, 0xf9, 0xad, 0xf5, 0x40, 0x67, 0xe0,
	0x81, 0x31, 0xd0, 0xc0, 0x5b, 0xa7, 0x0d, 0x50, 0xd7, 0x47, 0x3a, 0x75, 0x2f, 0x07, 0xf8, 0x8b,
	0x87, 0x6a, 0x2b, 0x47, 0x85, 0x77, 0x96, 0xa8, 0xae, 0x5b, 0x2d, 0xff, 0xd1, 0xff, 0x25, 0x39,
	0xdb, 0x77, 0x8d, 0xed, 0xdb, 0xf8, 0xe6, 0x12, 0xdb, 0x27, 0xf7, 0xe3, 0xf1, 0xee, 0xb7, 0x59,
	0xe0, 0x1d, 0xcd, 0x02, 0xef, 0xe7, 0x2c, 0xf0, 0x0e, 0xe7, 0x41, 0xe9, 0x68, 0x1e, 0x94, 0x7e,
	0xcc, 0x83, 0xd2, 0x9b, 0x66, 0x22, 0x74, 0x6f, 0xdc, 0x25, 0xb1, 0x1c, 0x38, 0x02, 0xf3, 0x7c,
	0x98, 0x4a, 0xe0, 0xf4, 0xbd, 0x61, 0xd3, 0xfb, 0x19, 0x57, 0xdd, 0x4d, 0xf3, 0x23, 0xda, 0xf9,
	0x1d, 0x00, 0x00, 0xff, 0xff, 0x45, 0x89, 0xd1, 0x5d, 0x17, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Fetch latest version of a DID Document for a given DID
	DidDoc(ctx context.Context, in *QueryDidDocRequest, opts ...grpc.CallOption) (*QueryDidDocResponse, error)
	// Fetch specific version of a DID Document for a given DID
	DidDocVersion(ctx context.Context, in *QueryDidDocVersionRequest, opts ...grpc.CallOption) (*QueryDidDocVersionResponse, error)
	// Fetch list of all versions of DID Documents for a given DID
	AllDidDocVersionsMetadata(ctx context.Context, in *QueryAllDidDocVersionsMetadataRequest, opts ...grpc.CallOption) (*QueryAllDidDocVersionsMetadataResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) DidDoc(ctx context.Context, in *QueryDidDocRequest, opts ...grpc.CallOption) (*QueryDidDocResponse, error) {
	out := new(QueryDidDocResponse)
	err := c.cc.Invoke(ctx, "/cheqd.did.v2.Query/DidDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DidDocVersion(ctx context.Context, in *QueryDidDocVersionRequest, opts ...grpc.CallOption) (*QueryDidDocVersionResponse, error) {
	out := new(QueryDidDocVersionResponse)
	err := c.cc.Invoke(ctx, "/cheqd.did.v2.Query/DidDocVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllDidDocVersionsMetadata(ctx context.Context, in *QueryAllDidDocVersionsMetadataRequest, opts ...grpc.CallOption) (*QueryAllDidDocVersionsMetadataResponse, error) {
	out := new(QueryAllDidDocVersionsMetadataResponse)
	err := c.cc.Invoke(ctx, "/cheqd.did.v2.Query/AllDidDocVersionsMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Fetch latest version of a DID Document for a given DID
	DidDoc(context.Context, *QueryDidDocRequest) (*QueryDidDocResponse, error)
	// Fetch specific version of a DID Document for a given DID
	DidDocVersion(context.Context, *QueryDidDocVersionRequest) (*QueryDidDocVersionResponse, error)
	// Fetch list of all versions of DID Documents for a given DID
	AllDidDocVersionsMetadata(context.Context, *QueryAllDidDocVersionsMetadataRequest) (*QueryAllDidDocVersionsMetadataResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) DidDoc(ctx context.Context, req *QueryDidDocRequest) (*QueryDidDocResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DidDoc not implemented")
}
func (*UnimplementedQueryServer) DidDocVersion(ctx context.Context, req *QueryDidDocVersionRequest) (*QueryDidDocVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DidDocVersion not implemented")
}
func (*UnimplementedQueryServer) AllDidDocVersionsMetadata(ctx context.Context, req *QueryAllDidDocVersionsMetadataRequest) (*QueryAllDidDocVersionsMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllDidDocVersionsMetadata not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_DidDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDidDocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DidDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheqd.did.v2.Query/DidDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DidDoc(ctx, req.(*QueryDidDocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DidDocVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDidDocVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DidDocVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheqd.did.v2.Query/DidDocVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DidDocVersion(ctx, req.(*QueryDidDocVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllDidDocVersionsMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDidDocVersionsMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllDidDocVersionsMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheqd.did.v2.Query/AllDidDocVersionsMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllDidDocVersionsMetadata(ctx, req.(*QueryAllDidDocVersionsMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cheqd.did.v2.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DidDoc",
			Handler:    _Query_DidDoc_Handler,
		},
		{
			MethodName: "DidDocVersion",
			Handler:    _Query_DidDocVersion_Handler,
		},
		{
			MethodName: "AllDidDocVersionsMetadata",
			Handler:    _Query_AllDidDocVersionsMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cheqd/did/v2/query.proto",
}

func (m *QueryDidDocRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDidDocRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDidDocRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDidDocResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDidDocResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDidDocResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DidDocumentWithMetadata != nil {
		{
			size, err := m.DidDocumentWithMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDidDocVersionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDidDocVersionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDidDocVersionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDidDocVersionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDidDocVersionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDidDocVersionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DidDocumentWithMetadata != nil {
		{
			size, err := m.DidDocumentWithMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllDidDocVersionsMetadataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDidDocVersionsMetadataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDidDocVersionsMetadataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllDidDocVersionsMetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDidDocVersionsMetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDidDocVersionsMetadataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Versions) > 0 {
		for iNdEx := len(m.Versions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Versions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryDidDocRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDidDocResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DidDocumentWithMetadata != nil {
		l = m.DidDocumentWithMetadata.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDidDocVersionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDidDocVersionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DidDocumentWithMetadata != nil {
		l = m.DidDocumentWithMetadata.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllDidDocVersionsMetadataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllDidDocVersionsMetadataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Versions) > 0 {
		for _, e := range m.Versions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryDidDocRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDidDocRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDidDocRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDidDocResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDidDocResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDidDocResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidDocumentWithMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DidDocumentWithMetadata == nil {
				m.DidDocumentWithMetadata = &DidDocWithMetadata{}
			}
			if err := m.DidDocumentWithMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDidDocVersionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDidDocVersionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDidDocVersionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDidDocVersionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDidDocVersionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDidDocVersionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidDocumentWithMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DidDocumentWithMetadata == nil {
				m.DidDocumentWithMetadata = &DidDocWithMetadata{}
			}
			if err := m.DidDocumentWithMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDidDocVersionsMetadataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDidDocVersionsMetadataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDidDocVersionsMetadataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDidDocVersionsMetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDidDocVersionsMetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDidDocVersionsMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Versions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Versions = append(m.Versions, &Metadata{})
			if err := m.Versions[len(m.Versions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
