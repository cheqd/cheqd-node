// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cheqd/did/v2/fee.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// FeeParams defines the parameters for the `did` module fixed fee.
type FeeParams struct {
	// Tx types define the fixed fee each for the `did` module.
	TxTypes    map[string]types.Coin                  `protobuf:"bytes,1,rep,name=tx_types,json=txTypes,proto3" json:"tx_types" yaml:"tx_types" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BurnFactor github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=burn_factor,json=burnFactor,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"burn_factor"`
}

func (m *FeeParams) Reset()         { *m = FeeParams{} }
func (m *FeeParams) String() string { return proto.CompactTextString(m) }
func (*FeeParams) ProtoMessage()    {}
func (*FeeParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0cfbae270deaac7, []int{0}
}
func (m *FeeParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeParams.Merge(m, src)
}
func (m *FeeParams) XXX_Size() int {
	return m.Size()
}
func (m *FeeParams) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeParams.DiscardUnknown(m)
}

var xxx_messageInfo_FeeParams proto.InternalMessageInfo

func (m *FeeParams) GetTxTypes() map[string]types.Coin {
	if m != nil {
		return m.TxTypes
	}
	return nil
}

func init() {
	proto.RegisterType((*FeeParams)(nil), "cheqd.did.v2.FeeParams")
	proto.RegisterMapType((map[string]types.Coin)(nil), "cheqd.did.v2.FeeParams.TxTypesEntry")
}

func init() { proto.RegisterFile("cheqd/did/v2/fee.proto", fileDescriptor_b0cfbae270deaac7) }

var fileDescriptor_b0cfbae270deaac7 = []byte{
	// 367 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x51, 0xcd, 0x4e, 0x32, 0x31,
	0x14, 0x9d, 0x42, 0xbe, 0x1f, 0x0a, 0x89, 0x66, 0x62, 0x14, 0x58, 0x14, 0x42, 0x8c, 0xb2, 0xa1,
	0x0d, 0xe3, 0xc6, 0x10, 0x57, 0x08, 0xac, 0xcd, 0x04, 0x13, 0x63, 0x62, 0xc8, 0xfc, 0x14, 0x98,
	0xc0, 0x4c, 0x71, 0xa6, 0x4c, 0x98, 0xb7, 0x70, 0xef, 0x0b, 0xf8, 0x00, 0x3e, 0x04, 0x4b, 0xe2,
	0xca, 0xb8, 0x20, 0x66, 0x78, 0x03, 0x9f, 0xc0, 0xb4, 0x1d, 0x0d, 0x9b, 0xf6, 0xb6, 0xe7, 0xdc,
	0x73, 0x4f, 0xce, 0x85, 0xc7, 0xce, 0x94, 0x3e, 0xba, 0xc4, 0xf5, 0x5c, 0x12, 0x1b, 0x64, 0x4c,
	0x29, 0x5e, 0x84, 0x8c, 0x33, 0xbd, 0x24, 0xff, 0xb1, 0xeb, 0xb9, 0x38, 0x36, 0xaa, 0x47, 0x13,
	0x36, 0x61, 0x12, 0x20, 0xa2, 0x52, 0x9c, 0x2a, 0x72, 0x58, 0xe4, 0xb3, 0x88, 0xd8, 0x56, 0x44,
	0x49, 0xdc, 0xb6, 0x29, 0xb7, 0xda, 0xc4, 0x61, 0x5e, 0x90, 0xe1, 0x15, 0x85, 0x8f, 0x54, 0xa3,
	0x7a, 0x28, 0xa8, 0xf1, 0x9c, 0x83, 0x85, 0x01, 0xa5, 0x37, 0x56, 0x68, 0xf9, 0x91, 0x7e, 0x07,
	0xff, 0xf3, 0xd5, 0x88, 0x27, 0x0b, 0x1a, 0x95, 0x41, 0x3d, 0xdf, 0x2c, 0x1a, 0xa7, 0x78, 0x7f,
	0x3e, 0xfe, 0xa5, 0xe2, 0xe1, 0x6a, 0x28, 0x68, 0xfd, 0x80, 0x87, 0x49, 0xf7, 0x64, 0xbd, 0xad,
	0x69, 0x5f, 0xdb, 0xda, 0x41, 0x62, 0xf9, 0xf3, 0x4e, 0xe3, 0x47, 0xa3, 0x61, 0xfe, 0xe3, 0x8a,
	0xa6, 0x3f, 0xc0, 0xa2, 0xbd, 0x0c, 0x83, 0xd1, 0xd8, 0x72, 0x38, 0x0b, 0xcb, 0xb9, 0x3a, 0x68,
	0x16, 0xba, 0x57, 0xa2, 0xed, 0x63, 0x5b, 0x3b, 0x9b, 0x78, 0x7c, 0xba, 0xb4, 0xb1, 0xc3, 0xfc,
	0xcc, 0x5d, 0x76, 0xb5, 0x22, 0x77, 0x46, 0xa4, 0x14, 0xee, 0x51, 0xe7, 0xed, 0xb5, 0x05, 0x33,
	0xf3, 0x3d, 0xea, 0x98, 0x50, 0x08, 0x0e, 0xa4, 0x5e, 0xf5, 0x16, 0x96, 0xf6, 0x0d, 0xe9, 0x87,
	0x30, 0x3f, 0xa3, 0x49, 0x19, 0x88, 0x31, 0xa6, 0x28, 0x75, 0x02, 0xff, 0xc4, 0xd6, 0x7c, 0x49,
	0xe5, 0xe8, 0xa2, 0x51, 0xc1, 0x99, 0x92, 0xc8, 0x0c, 0x67, 0x99, 0xe1, 0x6b, 0xe6, 0x05, 0xa6,
	0xe2, 0x75, 0x72, 0x97, 0xa0, 0xdb, 0x7f, 0x49, 0x11, 0x58, 0xa7, 0x08, 0x6c, 0x52, 0x04, 0x3e,
	0x53, 0x04, 0x9e, 0x76, 0x48, 0xdb, 0xec, 0x90, 0xf6, 0xbe, 0x43, 0xda, 0xfd, 0xf9, 0xbe, 0x6d,
	0xb9, 0x3d, 0x79, 0xb6, 0x02, 0xe6, 0x52, 0xb2, 0x92, 0xab, 0x94, 0xde, 0xed, 0xbf, 0x32, 0xeb,
	0x8b, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x20, 0xf3, 0xe8, 0x95, 0xe4, 0x01, 0x00, 0x00,
}

func (this *FeeParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FeeParams)
	if !ok {
		that2, ok := that.(FeeParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.TxTypes) != len(that1.TxTypes) {
		return false
	}
	for i := range this.TxTypes {
		a := this.TxTypes[i]
		b := that1.TxTypes[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	if !this.BurnFactor.Equal(that1.BurnFactor) {
		return false
	}
	return true
}
func (m *FeeParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.BurnFactor.Size()
		i -= size
		if _, err := m.BurnFactor.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFee(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.TxTypes) > 0 {
		for k := range m.TxTypes {
			v := m.TxTypes[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFee(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintFee(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintFee(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintFee(dAtA []byte, offset int, v uint64) int {
	offset -= sovFee(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FeeParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TxTypes) > 0 {
		for k, v := range m.TxTypes {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovFee(uint64(len(k))) + 1 + l + sovFee(uint64(l))
			n += mapEntrySize + 1 + sovFee(uint64(mapEntrySize))
		}
	}
	l = m.BurnFactor.Size()
	n += 1 + l + sovFee(uint64(l))
	return n
}

func sovFee(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFee(x uint64) (n int) {
	return sovFee(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FeeParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxTypes == nil {
				m.TxTypes = make(map[string]types.Coin)
			}
			var mapkey string
			mapvalue := &types.Coin{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFee
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFee
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFee
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFee
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFee
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFee
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthFee
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &types.Coin{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFee(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthFee
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TxTypes[mapkey] = *mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFee(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFee
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFee
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFee
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFee
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFee
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFee
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFee        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFee          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFee = fmt.Errorf("proto: unexpected end of group")
)
