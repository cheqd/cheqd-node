// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cheqd/oracle/v2/query.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryExchangeRates is the request type for the Query/ExchangeRate RPC
// method.
type QueryExchangeRates struct {
	// denom defines the denomination to query for.
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryExchangeRates) Reset()         { *m = QueryExchangeRates{} }
func (m *QueryExchangeRates) String() string { return proto.CompactTextString(m) }
func (*QueryExchangeRates) ProtoMessage()    {}
func (*QueryExchangeRates) Descriptor() ([]byte, []int) {
	return fileDescriptor_90255b46abbbaf03, []int{0}
}
func (m *QueryExchangeRates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExchangeRates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExchangeRates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExchangeRates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExchangeRates.Merge(m, src)
}
func (m *QueryExchangeRates) XXX_Size() int {
	return m.Size()
}
func (m *QueryExchangeRates) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExchangeRates.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExchangeRates proto.InternalMessageInfo

// QueryExchangeRatesResponse is response type for the
// Query/ExchangeRates RPC method.
type QueryExchangeRatesResponse struct {
	// exchange_rates defines a list of the exchange rate for all whitelisted
	// denoms.
	ExchangeRates github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,1,rep,name=exchange_rates,json=exchangeRates,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"exchange_rates"`
}

func (m *QueryExchangeRatesResponse) Reset()         { *m = QueryExchangeRatesResponse{} }
func (m *QueryExchangeRatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExchangeRatesResponse) ProtoMessage()    {}
func (*QueryExchangeRatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90255b46abbbaf03, []int{1}
}
func (m *QueryExchangeRatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExchangeRatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExchangeRatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExchangeRatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExchangeRatesResponse.Merge(m, src)
}
func (m *QueryExchangeRatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExchangeRatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExchangeRatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExchangeRatesResponse proto.InternalMessageInfo

// QueryActiveExchangeRates is the request type for the
// Query/ActiveExchangeRates RPC method.
type QueryActiveExchangeRates struct {
}

func (m *QueryActiveExchangeRates) Reset()         { *m = QueryActiveExchangeRates{} }
func (m *QueryActiveExchangeRates) String() string { return proto.CompactTextString(m) }
func (*QueryActiveExchangeRates) ProtoMessage()    {}
func (*QueryActiveExchangeRates) Descriptor() ([]byte, []int) {
	return fileDescriptor_90255b46abbbaf03, []int{2}
}
func (m *QueryActiveExchangeRates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActiveExchangeRates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActiveExchangeRates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActiveExchangeRates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActiveExchangeRates.Merge(m, src)
}
func (m *QueryActiveExchangeRates) XXX_Size() int {
	return m.Size()
}
func (m *QueryActiveExchangeRates) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActiveExchangeRates.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActiveExchangeRates proto.InternalMessageInfo

// QueryActiveExchangeRatesResponse is response type for the
// Query/ActiveExchangeRates RPC method.
type QueryActiveExchangeRatesResponse struct {
	// activeRates defines a list of the denomination which oracle prices aggreed
	// upon.
	ActiveRates []string `protobuf:"bytes,1,rep,name=active_rates,json=activeRates,proto3" json:"active_rates,omitempty"`
}

func (m *QueryActiveExchangeRatesResponse) Reset()         { *m = QueryActiveExchangeRatesResponse{} }
func (m *QueryActiveExchangeRatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryActiveExchangeRatesResponse) ProtoMessage()    {}
func (*QueryActiveExchangeRatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90255b46abbbaf03, []int{3}
}
func (m *QueryActiveExchangeRatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActiveExchangeRatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActiveExchangeRatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActiveExchangeRatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActiveExchangeRatesResponse.Merge(m, src)
}
func (m *QueryActiveExchangeRatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryActiveExchangeRatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActiveExchangeRatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActiveExchangeRatesResponse proto.InternalMessageInfo

// QueryFeederDelegation is the request type for the
// Query/FeederDelegation RPC method.
type QueryFeederDelegation struct {
	// validator defines the validator address to query for.
	ValidatorAddr string `protobuf:"bytes,1,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
}

func (m *QueryFeederDelegation) Reset()         { *m = QueryFeederDelegation{} }
func (m *QueryFeederDelegation) String() string { return proto.CompactTextString(m) }
func (*QueryFeederDelegation) ProtoMessage()    {}
func (*QueryFeederDelegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_90255b46abbbaf03, []int{4}
}
func (m *QueryFeederDelegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeederDelegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeederDelegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeederDelegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeederDelegation.Merge(m, src)
}
func (m *QueryFeederDelegation) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeederDelegation) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeederDelegation.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeederDelegation proto.InternalMessageInfo

// QueryFeederDelegationResponse is response type for the
// Query/FeederDelegation RPC method.
type QueryFeederDelegationResponse struct {
	// feeder_addr defines the feeder delegation of a validator
	FeederAddr string `protobuf:"bytes,1,opt,name=feeder_addr,json=feederAddr,proto3" json:"feeder_addr,omitempty"`
}

func (m *QueryFeederDelegationResponse) Reset()         { *m = QueryFeederDelegationResponse{} }
func (m *QueryFeederDelegationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeederDelegationResponse) ProtoMessage()    {}
func (*QueryFeederDelegationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90255b46abbbaf03, []int{5}
}
func (m *QueryFeederDelegationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeederDelegationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeederDelegationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeederDelegationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeederDelegationResponse.Merge(m, src)
}
func (m *QueryFeederDelegationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeederDelegationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeederDelegationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeederDelegationResponse proto.InternalMessageInfo

// QueryMissCounter is the request type for the Query/MissCounter RPC
// method.
type QueryMissCounter struct {
	// validator defines the validator address to query for.
	ValidatorAddr string `protobuf:"bytes,1,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
}

func (m *QueryMissCounter) Reset()         { *m = QueryMissCounter{} }
func (m *QueryMissCounter) String() string { return proto.CompactTextString(m) }
func (*QueryMissCounter) ProtoMessage()    {}
func (*QueryMissCounter) Descriptor() ([]byte, []int) {
	return fileDescriptor_90255b46abbbaf03, []int{6}
}
func (m *QueryMissCounter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMissCounter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMissCounter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMissCounter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMissCounter.Merge(m, src)
}
func (m *QueryMissCounter) XXX_Size() int {
	return m.Size()
}
func (m *QueryMissCounter) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMissCounter.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMissCounter proto.InternalMessageInfo

// QueryMissCounterResponse is response type for the
// Query/MissCounter RPC method.
type QueryMissCounterResponse struct {
	// miss_counter defines the oracle miss counter of a validator
	MissCounter uint64 `protobuf:"varint,1,opt,name=miss_counter,json=missCounter,proto3" json:"miss_counter,omitempty"`
}

func (m *QueryMissCounterResponse) Reset()         { *m = QueryMissCounterResponse{} }
func (m *QueryMissCounterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMissCounterResponse) ProtoMessage()    {}
func (*QueryMissCounterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90255b46abbbaf03, []int{7}
}
func (m *QueryMissCounterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMissCounterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMissCounterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMissCounterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMissCounterResponse.Merge(m, src)
}
func (m *QueryMissCounterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMissCounterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMissCounterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMissCounterResponse proto.InternalMessageInfo

// QuerySlashWindow is the request type for the
// Query/SlashWindow RPC method.
type QuerySlashWindow struct {
}

func (m *QuerySlashWindow) Reset()         { *m = QuerySlashWindow{} }
func (m *QuerySlashWindow) String() string { return proto.CompactTextString(m) }
func (*QuerySlashWindow) ProtoMessage()    {}
func (*QuerySlashWindow) Descriptor() ([]byte, []int) {
	return fileDescriptor_90255b46abbbaf03, []int{8}
}
func (m *QuerySlashWindow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySlashWindow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySlashWindow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySlashWindow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySlashWindow.Merge(m, src)
}
func (m *QuerySlashWindow) XXX_Size() int {
	return m.Size()
}
func (m *QuerySlashWindow) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySlashWindow.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySlashWindow proto.InternalMessageInfo

// QuerySlashWindowResponse is response type for the
// Query/SlashWindow RPC method.
type QuerySlashWindowResponse struct {
	// window_progress defines the number of voting periods
	// since the last slashing event would have taken place.
	WindowProgress uint64 `protobuf:"varint,1,opt,name=window_progress,json=windowProgress,proto3" json:"window_progress,omitempty"`
}

func (m *QuerySlashWindowResponse) Reset()         { *m = QuerySlashWindowResponse{} }
func (m *QuerySlashWindowResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySlashWindowResponse) ProtoMessage()    {}
func (*QuerySlashWindowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90255b46abbbaf03, []int{9}
}
func (m *QuerySlashWindowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySlashWindowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySlashWindowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySlashWindowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySlashWindowResponse.Merge(m, src)
}
func (m *QuerySlashWindowResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySlashWindowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySlashWindowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySlashWindowResponse proto.InternalMessageInfo

// QueryAggregatePrevote is the request type for the
// Query/AggregatePrevote RPC method.
type QueryAggregatePrevote struct {
	// validator defines the validator address to query for.
	ValidatorAddr string `protobuf:"bytes,1,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
}

func (m *QueryAggregatePrevote) Reset()         { *m = QueryAggregatePrevote{} }
func (m *QueryAggregatePrevote) String() string { return proto.CompactTextString(m) }
func (*QueryAggregatePrevote) ProtoMessage()    {}
func (*QueryAggregatePrevote) Descriptor() ([]byte, []int) {
	return fileDescriptor_90255b46abbbaf03, []int{10}
}
func (m *QueryAggregatePrevote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAggregatePrevote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAggregatePrevote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAggregatePrevote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAggregatePrevote.Merge(m, src)
}
func (m *QueryAggregatePrevote) XXX_Size() int {
	return m.Size()
}
func (m *QueryAggregatePrevote) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAggregatePrevote.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAggregatePrevote proto.InternalMessageInfo

// QueryAggregatePrevoteResponse is response type for the
// Query/AggregatePrevote RPC method.
type QueryAggregatePrevoteResponse struct {
	// aggregate_prevote defines oracle aggregate prevote submitted by a validator
	// in the current vote period
	AggregatePrevote AggregateExchangeRatePrevote `protobuf:"bytes,1,opt,name=aggregate_prevote,json=aggregatePrevote,proto3" json:"aggregate_prevote"`
}

func (m *QueryAggregatePrevoteResponse) Reset()         { *m = QueryAggregatePrevoteResponse{} }
func (m *QueryAggregatePrevoteResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAggregatePrevoteResponse) ProtoMessage()    {}
func (*QueryAggregatePrevoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90255b46abbbaf03, []int{11}
}
func (m *QueryAggregatePrevoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAggregatePrevoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAggregatePrevoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAggregatePrevoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAggregatePrevoteResponse.Merge(m, src)
}
func (m *QueryAggregatePrevoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAggregatePrevoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAggregatePrevoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAggregatePrevoteResponse proto.InternalMessageInfo

// QueryAggregatePrevotes is the request type for the
// Query/AggregatePrevotes RPC method.
type QueryAggregatePrevotes struct {
}

func (m *QueryAggregatePrevotes) Reset()         { *m = QueryAggregatePrevotes{} }
func (m *QueryAggregatePrevotes) String() string { return proto.CompactTextString(m) }
func (*QueryAggregatePrevotes) ProtoMessage()    {}
func (*QueryAggregatePrevotes) Descriptor() ([]byte, []int) {
	return fileDescriptor_90255b46abbbaf03, []int{12}
}
func (m *QueryAggregatePrevotes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAggregatePrevotes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAggregatePrevotes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAggregatePrevotes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAggregatePrevotes.Merge(m, src)
}
func (m *QueryAggregatePrevotes) XXX_Size() int {
	return m.Size()
}
func (m *QueryAggregatePrevotes) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAggregatePrevotes.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAggregatePrevotes proto.InternalMessageInfo

// QueryAggregatePrevotesResponse is response type for the
// Query/AggregatePrevotes RPC method.
type QueryAggregatePrevotesResponse struct {
	// aggregate_prevotes defines all oracle aggregate prevotes submitted in the
	// current vote period
	AggregatePrevotes []AggregateExchangeRatePrevote `protobuf:"bytes,1,rep,name=aggregate_prevotes,json=aggregatePrevotes,proto3" json:"aggregate_prevotes"`
}

func (m *QueryAggregatePrevotesResponse) Reset()         { *m = QueryAggregatePrevotesResponse{} }
func (m *QueryAggregatePrevotesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAggregatePrevotesResponse) ProtoMessage()    {}
func (*QueryAggregatePrevotesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90255b46abbbaf03, []int{13}
}
func (m *QueryAggregatePrevotesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAggregatePrevotesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAggregatePrevotesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAggregatePrevotesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAggregatePrevotesResponse.Merge(m, src)
}
func (m *QueryAggregatePrevotesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAggregatePrevotesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAggregatePrevotesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAggregatePrevotesResponse proto.InternalMessageInfo

// QueryAggregateVote is the request type for the Query/AggregateVote RPC
// method.
type QueryAggregateVote struct {
	// validator defines the validator address to query for.
	ValidatorAddr string `protobuf:"bytes,1,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
}

func (m *QueryAggregateVote) Reset()         { *m = QueryAggregateVote{} }
func (m *QueryAggregateVote) String() string { return proto.CompactTextString(m) }
func (*QueryAggregateVote) ProtoMessage()    {}
func (*QueryAggregateVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_90255b46abbbaf03, []int{14}
}
func (m *QueryAggregateVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAggregateVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAggregateVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAggregateVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAggregateVote.Merge(m, src)
}
func (m *QueryAggregateVote) XXX_Size() int {
	return m.Size()
}
func (m *QueryAggregateVote) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAggregateVote.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAggregateVote proto.InternalMessageInfo

// QueryAggregateVoteResponse is response type for the
// Query/AggregateVote RPC method.
type QueryAggregateVoteResponse struct {
	// aggregate_vote defines oracle aggregate vote submitted by a validator in
	// the current vote period
	AggregateVote AggregateExchangeRateVote `protobuf:"bytes,1,opt,name=aggregate_vote,json=aggregateVote,proto3" json:"aggregate_vote"`
}

func (m *QueryAggregateVoteResponse) Reset()         { *m = QueryAggregateVoteResponse{} }
func (m *QueryAggregateVoteResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAggregateVoteResponse) ProtoMessage()    {}
func (*QueryAggregateVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90255b46abbbaf03, []int{15}
}
func (m *QueryAggregateVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAggregateVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAggregateVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAggregateVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAggregateVoteResponse.Merge(m, src)
}
func (m *QueryAggregateVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAggregateVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAggregateVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAggregateVoteResponse proto.InternalMessageInfo

// QueryAggregateVotes is the request type for the Query/AggregateVotes
// RPC method.
type QueryAggregateVotes struct {
}

func (m *QueryAggregateVotes) Reset()         { *m = QueryAggregateVotes{} }
func (m *QueryAggregateVotes) String() string { return proto.CompactTextString(m) }
func (*QueryAggregateVotes) ProtoMessage()    {}
func (*QueryAggregateVotes) Descriptor() ([]byte, []int) {
	return fileDescriptor_90255b46abbbaf03, []int{16}
}
func (m *QueryAggregateVotes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAggregateVotes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAggregateVotes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAggregateVotes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAggregateVotes.Merge(m, src)
}
func (m *QueryAggregateVotes) XXX_Size() int {
	return m.Size()
}
func (m *QueryAggregateVotes) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAggregateVotes.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAggregateVotes proto.InternalMessageInfo

// QueryAggregateVotesResponse is response type for the
// Query/AggregateVotes RPC method.
type QueryAggregateVotesResponse struct {
	// aggregate_votes defines all oracle aggregate votes submitted in the current
	// vote period
	AggregateVotes []AggregateExchangeRateVote `protobuf:"bytes,1,rep,name=aggregate_votes,json=aggregateVotes,proto3" json:"aggregate_votes"`
}

func (m *QueryAggregateVotesResponse) Reset()         { *m = QueryAggregateVotesResponse{} }
func (m *QueryAggregateVotesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAggregateVotesResponse) ProtoMessage()    {}
func (*QueryAggregateVotesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90255b46abbbaf03, []int{17}
}
func (m *QueryAggregateVotesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAggregateVotesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAggregateVotesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAggregateVotesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAggregateVotesResponse.Merge(m, src)
}
func (m *QueryAggregateVotesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAggregateVotesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAggregateVotesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAggregateVotesResponse proto.InternalMessageInfo

// QueryParams is the request type for the Query/Params RPC method.
type QueryParams struct {
}

func (m *QueryParams) Reset()         { *m = QueryParams{} }
func (m *QueryParams) String() string { return proto.CompactTextString(m) }
func (*QueryParams) ProtoMessage()    {}
func (*QueryParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_90255b46abbbaf03, []int{18}
}
func (m *QueryParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParams.Merge(m, src)
}
func (m *QueryParams) XXX_Size() int {
	return m.Size()
}
func (m *QueryParams) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParams.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParams proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params defines the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90255b46abbbaf03, []int{19}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

// QueryMedians is the request type for the Query/Medians RPC Response.
type QueryMedians struct {
	// denom defines the denomination to query for.
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	// numStamps defines the number of median stamps to query for. numStamps
	// must be greater than 0.
	NumStamps uint32 `protobuf:"varint,2,opt,name=num_stamps,json=numStamps,proto3" json:"num_stamps,omitempty"`
}

func (m *QueryMedians) Reset()         { *m = QueryMedians{} }
func (m *QueryMedians) String() string { return proto.CompactTextString(m) }
func (*QueryMedians) ProtoMessage()    {}
func (*QueryMedians) Descriptor() ([]byte, []int) {
	return fileDescriptor_90255b46abbbaf03, []int{20}
}
func (m *QueryMedians) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMedians) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMedians.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMedians) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMedians.Merge(m, src)
}
func (m *QueryMedians) XXX_Size() int {
	return m.Size()
}
func (m *QueryMedians) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMedians.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMedians proto.InternalMessageInfo

// QueryMediansResponse is response type for the
// Query/Medians RPC method.
type QueryMediansResponse struct {
	// medians defines a list of the medians for all stamped denoms.
	Medians []PriceStamp `protobuf:"bytes,1,rep,name=medians,proto3" json:"medians"`
}

func (m *QueryMediansResponse) Reset()         { *m = QueryMediansResponse{} }
func (m *QueryMediansResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMediansResponse) ProtoMessage()    {}
func (*QueryMediansResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90255b46abbbaf03, []int{21}
}
func (m *QueryMediansResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMediansResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMediansResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMediansResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMediansResponse.Merge(m, src)
}
func (m *QueryMediansResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMediansResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMediansResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMediansResponse proto.InternalMessageInfo

// QueryMedianDeviations is the request type for the Query/MedianDeviations RPC
// Response.
type QueryMedianDeviations struct {
	// denom defines the denomination to query for.
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryMedianDeviations) Reset()         { *m = QueryMedianDeviations{} }
func (m *QueryMedianDeviations) String() string { return proto.CompactTextString(m) }
func (*QueryMedianDeviations) ProtoMessage()    {}
func (*QueryMedianDeviations) Descriptor() ([]byte, []int) {
	return fileDescriptor_90255b46abbbaf03, []int{22}
}
func (m *QueryMedianDeviations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMedianDeviations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMedianDeviations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMedianDeviations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMedianDeviations.Merge(m, src)
}
func (m *QueryMedianDeviations) XXX_Size() int {
	return m.Size()
}
func (m *QueryMedianDeviations) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMedianDeviations.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMedianDeviations proto.InternalMessageInfo

// QueryMedianDeviationsResponse is response type for the
// Query/MedianDeviations RPC method.
type QueryMedianDeviationsResponse struct {
	// medians defines a list of the median deviations for all stamped denoms.
	MedianDeviations []PriceStamp `protobuf:"bytes,1,rep,name=median_deviations,json=medianDeviations,proto3" json:"median_deviations"`
}

func (m *QueryMedianDeviationsResponse) Reset()         { *m = QueryMedianDeviationsResponse{} }
func (m *QueryMedianDeviationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMedianDeviationsResponse) ProtoMessage()    {}
func (*QueryMedianDeviationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90255b46abbbaf03, []int{23}
}
func (m *QueryMedianDeviationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMedianDeviationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMedianDeviationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMedianDeviationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMedianDeviationsResponse.Merge(m, src)
}
func (m *QueryMedianDeviationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMedianDeviationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMedianDeviationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMedianDeviationsResponse proto.InternalMessageInfo

// QueryValidatorRewardSet is the request type for the Query/ValidatorRewardSet RPC method.
type QueryValidatorRewardSet struct {
}

func (m *QueryValidatorRewardSet) Reset()         { *m = QueryValidatorRewardSet{} }
func (m *QueryValidatorRewardSet) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorRewardSet) ProtoMessage()    {}
func (*QueryValidatorRewardSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_90255b46abbbaf03, []int{24}
}
func (m *QueryValidatorRewardSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorRewardSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorRewardSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorRewardSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorRewardSet.Merge(m, src)
}
func (m *QueryValidatorRewardSet) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorRewardSet) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorRewardSet.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorRewardSet proto.InternalMessageInfo

// QueryValidatorRewardSetResponse is the response type for the Query/ValidatorRewardSet RPC method.
type QueryValidatorRewardSetResponse struct {
	Validators ValidatorRewardSet `protobuf:"bytes,1,opt,name=validators,proto3" json:"validators"`
}

func (m *QueryValidatorRewardSetResponse) Reset()         { *m = QueryValidatorRewardSetResponse{} }
func (m *QueryValidatorRewardSetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorRewardSetResponse) ProtoMessage()    {}
func (*QueryValidatorRewardSetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90255b46abbbaf03, []int{25}
}
func (m *QueryValidatorRewardSetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorRewardSetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorRewardSetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorRewardSetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorRewardSetResponse.Merge(m, src)
}
func (m *QueryValidatorRewardSetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorRewardSetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorRewardSetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorRewardSetResponse proto.InternalMessageInfo

type GetEmaRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *GetEmaRequest) Reset()         { *m = GetEmaRequest{} }
func (m *GetEmaRequest) String() string { return proto.CompactTextString(m) }
func (*GetEmaRequest) ProtoMessage()    {}
func (*GetEmaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90255b46abbbaf03, []int{26}
}
func (m *GetEmaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetEmaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetEmaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetEmaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEmaRequest.Merge(m, src)
}
func (m *GetEmaRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetEmaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEmaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetEmaRequest proto.InternalMessageInfo

type GetEmaResponse struct {
	Price cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=price,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"price"`
}

func (m *GetEmaResponse) Reset()         { *m = GetEmaResponse{} }
func (m *GetEmaResponse) String() string { return proto.CompactTextString(m) }
func (*GetEmaResponse) ProtoMessage()    {}
func (*GetEmaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90255b46abbbaf03, []int{27}
}
func (m *GetEmaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetEmaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetEmaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetEmaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEmaResponse.Merge(m, src)
}
func (m *GetEmaResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetEmaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEmaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetEmaResponse proto.InternalMessageInfo

type QueryWMARequest struct {
	Denom         string  `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Strategy      string  `protobuf:"bytes,2,opt,name=strategy,proto3" json:"strategy,omitempty"`
	CustomWeights []int64 `protobuf:"varint,3,rep,packed,name=custom_weights,json=customWeights,proto3" json:"custom_weights,omitempty"`
}

func (m *QueryWMARequest) Reset()         { *m = QueryWMARequest{} }
func (m *QueryWMARequest) String() string { return proto.CompactTextString(m) }
func (*QueryWMARequest) ProtoMessage()    {}
func (*QueryWMARequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90255b46abbbaf03, []int{28}
}
func (m *QueryWMARequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWMARequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWMARequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWMARequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWMARequest.Merge(m, src)
}
func (m *QueryWMARequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWMARequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWMARequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWMARequest proto.InternalMessageInfo

type QueryWMAResponse struct {
	Price cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=price,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"price"`
}

func (m *QueryWMAResponse) Reset()         { *m = QueryWMAResponse{} }
func (m *QueryWMAResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWMAResponse) ProtoMessage()    {}
func (*QueryWMAResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90255b46abbbaf03, []int{29}
}
func (m *QueryWMAResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWMAResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWMAResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWMAResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWMAResponse.Merge(m, src)
}
func (m *QueryWMAResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWMAResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWMAResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWMAResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryExchangeRates)(nil), "cheqd.oracle.v2.QueryExchangeRates")
	proto.RegisterType((*QueryExchangeRatesResponse)(nil), "cheqd.oracle.v2.QueryExchangeRatesResponse")
	proto.RegisterType((*QueryActiveExchangeRates)(nil), "cheqd.oracle.v2.QueryActiveExchangeRates")
	proto.RegisterType((*QueryActiveExchangeRatesResponse)(nil), "cheqd.oracle.v2.QueryActiveExchangeRatesResponse")
	proto.RegisterType((*QueryFeederDelegation)(nil), "cheqd.oracle.v2.QueryFeederDelegation")
	proto.RegisterType((*QueryFeederDelegationResponse)(nil), "cheqd.oracle.v2.QueryFeederDelegationResponse")
	proto.RegisterType((*QueryMissCounter)(nil), "cheqd.oracle.v2.QueryMissCounter")
	proto.RegisterType((*QueryMissCounterResponse)(nil), "cheqd.oracle.v2.QueryMissCounterResponse")
	proto.RegisterType((*QuerySlashWindow)(nil), "cheqd.oracle.v2.QuerySlashWindow")
	proto.RegisterType((*QuerySlashWindowResponse)(nil), "cheqd.oracle.v2.QuerySlashWindowResponse")
	proto.RegisterType((*QueryAggregatePrevote)(nil), "cheqd.oracle.v2.QueryAggregatePrevote")
	proto.RegisterType((*QueryAggregatePrevoteResponse)(nil), "cheqd.oracle.v2.QueryAggregatePrevoteResponse")
	proto.RegisterType((*QueryAggregatePrevotes)(nil), "cheqd.oracle.v2.QueryAggregatePrevotes")
	proto.RegisterType((*QueryAggregatePrevotesResponse)(nil), "cheqd.oracle.v2.QueryAggregatePrevotesResponse")
	proto.RegisterType((*QueryAggregateVote)(nil), "cheqd.oracle.v2.QueryAggregateVote")
	proto.RegisterType((*QueryAggregateVoteResponse)(nil), "cheqd.oracle.v2.QueryAggregateVoteResponse")
	proto.RegisterType((*QueryAggregateVotes)(nil), "cheqd.oracle.v2.QueryAggregateVotes")
	proto.RegisterType((*QueryAggregateVotesResponse)(nil), "cheqd.oracle.v2.QueryAggregateVotesResponse")
	proto.RegisterType((*QueryParams)(nil), "cheqd.oracle.v2.QueryParams")
	proto.RegisterType((*QueryParamsResponse)(nil), "cheqd.oracle.v2.QueryParamsResponse")
	proto.RegisterType((*QueryMedians)(nil), "cheqd.oracle.v2.QueryMedians")
	proto.RegisterType((*QueryMediansResponse)(nil), "cheqd.oracle.v2.QueryMediansResponse")
	proto.RegisterType((*QueryMedianDeviations)(nil), "cheqd.oracle.v2.QueryMedianDeviations")
	proto.RegisterType((*QueryMedianDeviationsResponse)(nil), "cheqd.oracle.v2.QueryMedianDeviationsResponse")
	proto.RegisterType((*QueryValidatorRewardSet)(nil), "cheqd.oracle.v2.QueryValidatorRewardSet")
	proto.RegisterType((*QueryValidatorRewardSetResponse)(nil), "cheqd.oracle.v2.QueryValidatorRewardSetResponse")
	proto.RegisterType((*GetEmaRequest)(nil), "cheqd.oracle.v2.GetEmaRequest")
	proto.RegisterType((*GetEmaResponse)(nil), "cheqd.oracle.v2.GetEmaResponse")
	proto.RegisterType((*QueryWMARequest)(nil), "cheqd.oracle.v2.QueryWMARequest")
	proto.RegisterType((*QueryWMAResponse)(nil), "cheqd.oracle.v2.QueryWMAResponse")
}

func init() { proto.RegisterFile("cheqd/oracle/v2/query.proto", fileDescriptor_90255b46abbbaf03) }

var fileDescriptor_90255b46abbbaf03 = []byte{
	// 1422 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x98, 0xcf, 0x6f, 0xd4, 0x46,
	0x14, 0xc7, 0xd7, 0x04, 0x02, 0x79, 0xcb, 0x6e, 0x92, 0x01, 0x4a, 0x70, 0x92, 0xdd, 0x60, 0x08,
	0x04, 0xd2, 0xd8, 0x24, 0x29, 0xfd, 0x85, 0xa8, 0xc8, 0x2f, 0xa0, 0x2a, 0xa9, 0xa8, 0x23, 0x11,
	0xd1, 0x1e, 0xb6, 0x13, 0x7b, 0xea, 0x75, 0x89, 0xed, 0xc5, 0xe3, 0xdd, 0x24, 0xa2, 0x1c, 0x8a,
	0x7a, 0xe8, 0xb1, 0x12, 0x12, 0x12, 0x37, 0x7a, 0x68, 0x2b, 0x71, 0xac, 0xfa, 0x47, 0x70, 0x44,
	0xed, 0xa5, 0xea, 0x81, 0xb6, 0xd0, 0x43, 0xff, 0x8c, 0xca, 0x33, 0xb3, 0x5e, 0xef, 0xda, 0xde,
	0x6c, 0x50, 0x2f, 0x10, 0xbf, 0xf7, 0xe6, 0xbd, 0xcf, 0xbc, 0xf9, 0xf5, 0xd5, 0xc2, 0xa8, 0x51,
	0x25, 0x77, 0x4d, 0xcd, 0xf3, 0xb1, 0xb1, 0x49, 0xb4, 0xc6, 0x9c, 0x76, 0xb7, 0x4e, 0xfc, 0x1d,
	0xb5, 0xe6, 0x7b, 0x81, 0x87, 0x06, 0x99, 0x53, 0xe5, 0x4e, 0xb5, 0x31, 0x27, 0x8f, 0x75, 0x46,
	0x0b, 0x17, 0x0b, 0x97, 0x4b, 0x86, 0x47, 0x1d, 0x8f, 0x6a, 0x1b, 0x98, 0x12, 0xad, 0x31, 0xbb,
	0x41, 0x02, 0x3c, 0xab, 0x19, 0x9e, 0xed, 0x0a, 0xff, 0x09, 0xee, 0xaf, 0xb0, 0x2f, 0x8d, 0x7f,
	0x08, 0xd7, 0x51, 0xcb, 0xb3, 0x3c, 0x6e, 0x0f, 0xff, 0x12, 0xd6, 0x31, 0xcb, 0xf3, 0xac, 0x4d,
	0xa2, 0xe1, 0x9a, 0xad, 0x61, 0xd7, 0xf5, 0x02, 0x1c, 0xd8, 0x9e, 0x2b, 0xc6, 0x28, 0x6f, 0x01,
	0xfa, 0x24, 0x84, 0x5d, 0xd9, 0x36, 0xaa, 0xd8, 0xb5, 0x88, 0x8e, 0x03, 0x42, 0xd1, 0x51, 0x38,
	0x60, 0x12, 0xd7, 0x73, 0x46, 0xa4, 0x09, 0x69, 0x6a, 0x40, 0xe7, 0x1f, 0xef, 0x1f, 0xfa, 0xf6,
	0x49, 0x39, 0xf7, 0xef, 0x93, 0x72, 0x4e, 0x79, 0x24, 0x81, 0x9c, 0x1c, 0xa6, 0x13, 0x5a, 0xf3,
	0x5c, 0x4a, 0xd0, 0x36, 0x14, 0x89, 0x70, 0x54, 0xfc, 0xd0, 0x33, 0x22, 0x4d, 0xf4, 0x4d, 0xe5,
	0xe7, 0xc6, 0x54, 0xc1, 0x1b, 0x4e, 0x4e, 0x15, 0x93, 0x53, 0x97, 0x89, 0xb1, 0xe4, 0xd9, 0xee,
	0xe2, 0xfc, 0xb3, 0x17, 0xe5, 0xdc, 0xd3, 0x3f, 0xcb, 0xd3, 0x96, 0x1d, 0x54, 0xeb, 0x1b, 0xaa,
	0xe1, 0x39, 0x62, 0x7e, 0xe2, 0xbf, 0x19, 0x6a, 0xde, 0xd1, 0x82, 0x9d, 0x1a, 0xa1, 0xcd, 0x31,
	0x54, 0x2f, 0x90, 0x38, 0x81, 0x22, 0xc3, 0x08, 0xe3, 0x5a, 0x30, 0x02, 0xbb, 0x41, 0xda, 0xe8,
	0x94, 0x15, 0x98, 0xc8, 0xf2, 0x45, 0xe4, 0x27, 0xe1, 0x30, 0x66, 0xee, 0x18, 0xf7, 0x80, 0x9e,
	0xe7, 0x36, 0x9e, 0xe6, 0x3a, 0x1c, 0x63, 0x69, 0xae, 0x12, 0x62, 0x12, 0x7f, 0x99, 0x6c, 0x12,
	0x8b, 0x75, 0x14, 0x4d, 0x42, 0xb1, 0x81, 0x37, 0x6d, 0x13, 0x07, 0x9e, 0x5f, 0xc1, 0xa6, 0xe9,
	0x8b, 0xee, 0x15, 0x22, 0xeb, 0x82, 0x69, 0xfa, 0xb1, 0x2e, 0x5e, 0x81, 0xf1, 0xd4, 0x4c, 0x11,
	0x4d, 0x19, 0xf2, 0x5f, 0x30, 0x5f, 0x3c, 0x1d, 0x70, 0x53, 0x98, 0x4b, 0x59, 0x82, 0x21, 0x96,
	0x61, 0xd5, 0xa6, 0x74, 0xc9, 0xab, 0xbb, 0x01, 0xf1, 0xf7, 0x8e, 0x71, 0x59, 0xf4, 0x2c, 0x96,
	0x24, 0xde, 0x0f, 0xc7, 0xa6, 0xb4, 0x62, 0x70, 0x3b, 0x4b, 0xb5, 0x5f, 0xcf, 0x3b, 0xad, 0x50,
	0x05, 0x09, 0x86, 0xb5, 0x4d, 0x4c, 0xab, 0xeb, 0xb6, 0x6b, 0x7a, 0x5b, 0xca, 0x92, 0x48, 0x19,
	0xb3, 0x45, 0x29, 0xcf, 0xc2, 0xe0, 0x16, 0xb3, 0x84, 0x5b, 0xd8, 0xf2, 0x09, 0xa5, 0x22, 0x6b,
	0x91, 0x9b, 0x6f, 0x0a, 0x6b, 0xd4, 0xe8, 0x05, 0xcb, 0xf2, 0xc3, 0xce, 0x90, 0x9b, 0x3e, 0x69,
	0x78, 0x01, 0xd9, 0xfb, 0x0c, 0xbf, 0x96, 0x44, 0xa7, 0x3b, 0x53, 0x45, 0x50, 0x9f, 0xc3, 0x30,
	0x6e, 0xfa, 0x2a, 0x35, 0xee, 0x64, 0x59, 0xf3, 0x73, 0x33, 0x6a, 0xc7, 0x01, 0x56, 0xa3, 0x2c,
	0xf1, 0x3d, 0x24, 0x32, 0x2e, 0xee, 0x0f, 0x77, 0xb1, 0x3e, 0x84, 0x3b, 0x2a, 0x29, 0x23, 0xf0,
	0x46, 0x2a, 0x02, 0x55, 0xbe, 0x91, 0xa0, 0x94, 0xee, 0x8a, 0xf0, 0x36, 0x00, 0x25, 0xf0, 0x9a,
	0x87, 0xea, 0xb5, 0xf8, 0x86, 0x71, 0x02, 0x63, 0x45, 0xdc, 0x04, 0xd1, 0xe8, 0x5b, 0xaf, 0xd5,
	0xeb, 0xba, 0xb8, 0x19, 0xda, 0xd2, 0x44, 0x13, 0x59, 0x87, 0x62, 0x6b, 0x22, 0xb1, 0x26, 0x9f,
	0xef, 0x6d, 0x12, 0xb7, 0x5a, 0x33, 0x28, 0xe0, 0x78, 0x01, 0xe5, 0x18, 0x1c, 0x49, 0x96, 0xa5,
	0xca, 0x36, 0x8c, 0xa6, 0x98, 0x23, 0x9c, 0xdb, 0x30, 0xd8, 0x8e, 0xd3, 0x6c, 0xea, 0xde, 0x79,
	0x8a, 0xb8, 0xbd, 0x72, 0x01, 0xf2, 0xac, 0xf2, 0x4d, 0xec, 0x63, 0x87, 0x2a, 0x37, 0x04, 0x1f,
	0xff, 0x8c, 0x00, 0x2e, 0x42, 0x7f, 0x8d, 0x59, 0x44, 0x1f, 0x8e, 0x27, 0xea, 0xf2, 0x01, 0xa2,
	0x88, 0x08, 0x56, 0x56, 0xe1, 0x30, 0x3f, 0xb2, 0xc4, 0xb4, 0xb1, 0x9b, 0x71, 0x5f, 0xa3, 0x71,
	0x00, 0xb7, 0xee, 0x54, 0x68, 0x80, 0x9d, 0x1a, 0x1d, 0xd9, 0x37, 0x21, 0x4d, 0x15, 0xf4, 0x01,
	0xb7, 0xee, 0xac, 0x31, 0x43, 0x6c, 0xcd, 0xd6, 0xe0, 0x68, 0x3c, 0x5d, 0x44, 0x77, 0x09, 0x0e,
	0x3a, 0xdc, 0x24, 0xda, 0x32, 0x9a, 0xc4, 0xf3, 0x6d, 0x83, 0xb0, 0x84, 0x02, 0xb1, 0x39, 0x42,
	0x79, 0x47, 0x1c, 0x5f, 0x9e, 0x74, 0x99, 0x34, 0x6c, 0xfe, 0xf0, 0xec, 0xfa, 0xb8, 0x78, 0xe2,
	0xb0, 0x76, 0x0e, 0x8c, 0xb0, 0x3e, 0x86, 0x61, 0x5e, 0xa4, 0x62, 0x46, 0xce, 0xde, 0x01, 0x87,
	0x9c, 0x8e, 0xbc, 0xca, 0x09, 0x38, 0xce, 0x0a, 0xde, 0x6a, 0x6e, 0x69, 0x9d, 0x6c, 0x61, 0xdf,
	0x5c, 0x23, 0x81, 0xb2, 0x09, 0xe5, 0x0c, 0x57, 0x44, 0xf3, 0x21, 0x40, 0x74, 0x16, 0x9a, 0xcb,
	0x78, 0x2a, 0x81, 0x91, 0x4c, 0x20, 0x70, 0x62, 0x83, 0x95, 0x49, 0x28, 0x5c, 0x23, 0xc1, 0x8a,
	0x83, 0x75, 0x72, 0xb7, 0x4e, 0x68, 0x90, 0xde, 0x2a, 0xe5, 0x36, 0x14, 0x9b, 0x61, 0x82, 0xe1,
	0x1a, 0x1c, 0xa8, 0x85, 0xf3, 0xe4, 0x71, 0x8b, 0xb3, 0x61, 0xe6, 0x3f, 0x5e, 0x94, 0x47, 0xf9,
	0xbb, 0x49, 0xcd, 0x3b, 0xaa, 0xed, 0x69, 0x0e, 0x0e, 0xaa, 0xea, 0x0d, 0x62, 0x61, 0x63, 0x67,
	0x99, 0x18, 0xbf, 0xfe, 0x32, 0x03, 0xe2, 0x35, 0x5e, 0x26, 0x86, 0xce, 0xc7, 0x2b, 0x5f, 0xc2,
	0x20, 0x9b, 0xef, 0xfa, 0xea, 0x42, 0x57, 0x06, 0x24, 0xc3, 0x21, 0x1a, 0x84, 0x6f, 0xa4, 0xb5,
	0xc3, 0x76, 0xd6, 0x80, 0x1e, 0x7d, 0x87, 0x77, 0x86, 0x51, 0xa7, 0x81, 0xe7, 0x54, 0xb6, 0x88,
	0x6d, 0x55, 0x03, 0x3a, 0xd2, 0x37, 0xd1, 0x37, 0xd5, 0xa7, 0x17, 0xb8, 0x75, 0x9d, 0x1b, 0x95,
	0xcf, 0xc4, 0xc3, 0xc1, 0x6a, 0xfd, 0xcf, 0x13, 0x99, 0x7b, 0x38, 0x0c, 0x07, 0x58, 0x76, 0xf4,
	0x58, 0x82, 0x42, 0xbb, 0xba, 0x49, 0xae, 0x4e, 0x52, 0xcb, 0xc8, 0xd3, 0x3d, 0x04, 0x35, 0xb1,
	0x95, 0xb7, 0x1f, 0xfc, 0xf6, 0xcf, 0xc3, 0x7d, 0x17, 0x90, 0xaa, 0x75, 0x6a, 0x3b, 0xd6, 0x2d,
	0xaa, 0xb5, 0xcb, 0x21, 0xed, 0x1e, 0x33, 0xdf, 0x47, 0x4f, 0x25, 0x38, 0x92, 0x22, 0x47, 0xd0,
	0xb9, 0xf4, 0xe2, 0x29, 0xa1, 0xf2, 0x6c, 0xcf, 0xa1, 0x11, 0xed, 0x45, 0x46, 0xab, 0xa1, 0x99,
	0x2c, 0x5a, 0x21, 0x81, 0xda, 0xa1, 0xd1, 0x4f, 0x12, 0x0c, 0x25, 0x44, 0xcf, 0x99, 0xf4, 0xf2,
	0x9d, 0x71, 0xb2, 0xda, 0x5b, 0x5c, 0xc4, 0x78, 0x89, 0x31, 0x5e, 0x44, 0xf3, 0x09, 0xc6, 0xd6,
	0x79, 0xd1, 0xee, 0xb5, 0x3f, 0x4d, 0xf7, 0x35, 0x2e, 0x8d, 0xd0, 0x23, 0x09, 0xf2, 0x71, 0x49,
	0x74, 0x32, 0xbd, 0x78, 0x2c, 0x44, 0x3e, 0xb7, 0x6b, 0x48, 0x84, 0xf6, 0x1e, 0x43, 0x9b, 0x47,
	0xb3, 0x7b, 0x42, 0x0b, 0x25, 0x13, 0x7a, 0x20, 0x41, 0x3e, 0xa6, 0x89, 0xb2, 0xc0, 0x62, 0x21,
	0x59, 0x60, 0x29, 0xca, 0x4a, 0x99, 0x64, 0x60, 0x65, 0x34, 0x9e, 0x00, 0xa3, 0x61, 0x74, 0x85,
	0xeb, 0x2b, 0xf4, 0xb3, 0x04, 0x43, 0x09, 0x4d, 0x95, 0xb1, 0x8e, 0x9d, 0x71, 0x59, 0xeb, 0x98,
	0x25, 0xac, 0x94, 0xab, 0x8c, 0xe9, 0x0a, 0xfa, 0x60, 0x4f, 0xcd, 0x4a, 0x88, 0x1d, 0xf4, 0x83,
	0x04, 0xc3, 0x09, 0x7d, 0x84, 0xce, 0xf6, 0x46, 0x43, 0x65, 0xad, 0xc7, 0xc0, 0x1e, 0x4e, 0x74,
	0x8c, 0x3b, 0xa9, 0xc9, 0xd0, 0x8f, 0x12, 0x14, 0xda, 0x15, 0xd4, 0xa9, 0x5d, 0x4a, 0x87, 0x41,
	0x59, 0xb7, 0x4d, 0xaa, 0x88, 0x52, 0x96, 0x18, 0xdb, 0x65, 0x74, 0x29, 0x8d, 0xcd, 0xb4, 0x77,
	0xed, 0x29, 0x6b, 0xe8, 0x63, 0x09, 0x8a, 0xed, 0xaa, 0x08, 0x9d, 0xee, 0x01, 0x82, 0xca, 0x6f,
	0xf6, 0x12, 0x15, 0xb1, 0xce, 0x33, 0xd6, 0x19, 0x34, 0xdd, 0x5b, 0x1f, 0x79, 0x13, 0x1d, 0xe8,
	0xe7, 0xb2, 0x07, 0x8d, 0xa5, 0x17, 0xe3, 0x5e, 0xf9, 0x74, 0x37, 0x6f, 0x84, 0x50, 0x66, 0x08,
	0x27, 0xd0, 0xf1, 0x04, 0x02, 0x57, 0x53, 0xe8, 0x2b, 0x38, 0xd8, 0x14, 0x52, 0xe3, 0x19, 0xd7,
	0x00, 0x77, 0xcb, 0x93, 0x5d, 0xdd, 0x51, 0xc5, 0x69, 0x56, 0x71, 0x12, 0x9d, 0x12, 0x15, 0xab,
	0x36, 0x0d, 0x12, 0x97, 0xac, 0xd0, 0x49, 0xe8, 0x7b, 0x09, 0x86, 0x12, 0x1a, 0xe9, 0x4c, 0xb7,
	0x42, 0xad, 0xb8, 0xac, 0xe3, 0x98, 0x25, 0x9d, 0x12, 0x57, 0x7f, 0x17, 0xb2, 0x98, 0xb8, 0x0a,
	0xdf, 0x29, 0x94, 0x54, 0x30, 0x68, 0x2a, 0xbd, 0x7a, 0x32, 0x52, 0xbe, 0xd0, 0x6b, 0x64, 0x44,
	0xfa, 0x2e, 0x23, 0x9d, 0x43, 0x17, 0x3a, 0x56, 0x6d, 0x36, 0xbe, 0xc9, 0x5b, 0x7b, 0xdc, 0x67,
	0x09, 0x2a, 0x94, 0x04, 0xe8, 0x23, 0xe8, 0xe7, 0xf2, 0x08, 0x95, 0x12, 0x55, 0xdb, 0xe4, 0x95,
	0x5c, 0xce, 0xf4, 0x0b, 0x88, 0x1c, 0xba, 0x01, 0x7d, 0xeb, 0xab, 0x0b, 0x68, 0x22, 0x9d, 0xbf,
	0x25, 0x93, 0xe4, 0x93, 0x5d, 0x22, 0x9a, 0xd9, 0x16, 0xaf, 0x3f, 0xfb, 0xbb, 0x94, 0x7b, 0xf6,
	0xb2, 0x24, 0x3d, 0x7f, 0x59, 0x92, 0xfe, 0x7a, 0x59, 0x92, 0xbe, 0x7b, 0x55, 0xca, 0x3d, 0x7f,
	0x55, 0xca, 0xfd, 0xfe, 0xaa, 0x94, 0xfb, 0xf4, 0x7c, 0xfc, 0x87, 0x0f, 0x36, 0x69, 0xf6, 0xef,
	0x8c, 0xeb, 0x99, 0x44, 0xdb, 0x6e, 0x76, 0x80, 0xfd, 0x00, 0xb2, 0xd1, 0xcf, 0x7e, 0xbe, 0x99,
	0xff, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x11, 0xa3, 0xde, 0x8a, 0x7b, 0x12, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// ExchangeRates returns exchange rates of all denoms,
	// or, if specified, returns a single denom
	ExchangeRates(ctx context.Context, in *QueryExchangeRates, opts ...grpc.CallOption) (*QueryExchangeRatesResponse, error)
	// ActiveExchangeRates returns all active denoms
	ActiveExchangeRates(ctx context.Context, in *QueryActiveExchangeRates, opts ...grpc.CallOption) (*QueryActiveExchangeRatesResponse, error)
	// FeederDelegation returns feeder delegation of a validator
	FeederDelegation(ctx context.Context, in *QueryFeederDelegation, opts ...grpc.CallOption) (*QueryFeederDelegationResponse, error)
	// MissCounter returns oracle miss counter of a validator
	MissCounter(ctx context.Context, in *QueryMissCounter, opts ...grpc.CallOption) (*QueryMissCounterResponse, error)
	// SlashWindow returns slash window information
	SlashWindow(ctx context.Context, in *QuerySlashWindow, opts ...grpc.CallOption) (*QuerySlashWindowResponse, error)
	// AggregatePrevote returns an aggregate prevote of a validator
	AggregatePrevote(ctx context.Context, in *QueryAggregatePrevote, opts ...grpc.CallOption) (*QueryAggregatePrevoteResponse, error)
	// AggregatePrevotes returns aggregate prevotes of all validators
	AggregatePrevotes(ctx context.Context, in *QueryAggregatePrevotes, opts ...grpc.CallOption) (*QueryAggregatePrevotesResponse, error)
	// AggregateVote returns an aggregate vote of a validator
	AggregateVote(ctx context.Context, in *QueryAggregateVote, opts ...grpc.CallOption) (*QueryAggregateVoteResponse, error)
	// AggregateVotes returns aggregate votes of all validators
	AggregateVotes(ctx context.Context, in *QueryAggregateVotes, opts ...grpc.CallOption) (*QueryAggregateVotesResponse, error)
	// Params queries all parameters.
	Params(ctx context.Context, in *QueryParams, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Medians returns medians of all denoms,
	// or, if specified, returns a single median
	Medians(ctx context.Context, in *QueryMedians, opts ...grpc.CallOption) (*QueryMediansResponse, error)
	// MedianDeviations returns median deviations of all denoms,
	// or, if specified, returns a single median deviation
	MedianDeviations(ctx context.Context, in *QueryMedianDeviations, opts ...grpc.CallOption) (*QueryMedianDeviationsResponse, error)
	// ValidatorRewardSet returns the set of validators that is
	// earning rewards for voting on exchange rates based on their
	// misscounter in a given Slash Window
	ValidatorRewardSet(ctx context.Context, in *QueryValidatorRewardSet, opts ...grpc.CallOption) (*QueryValidatorRewardSetResponse, error)
	GetEma(ctx context.Context, in *GetEmaRequest, opts ...grpc.CallOption) (*GetEmaResponse, error)
	WMA(ctx context.Context, in *QueryWMARequest, opts ...grpc.CallOption) (*QueryWMAResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ExchangeRates(ctx context.Context, in *QueryExchangeRates, opts ...grpc.CallOption) (*QueryExchangeRatesResponse, error) {
	out := new(QueryExchangeRatesResponse)
	err := c.cc.Invoke(ctx, "/cheqd.oracle.v2.Query/ExchangeRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActiveExchangeRates(ctx context.Context, in *QueryActiveExchangeRates, opts ...grpc.CallOption) (*QueryActiveExchangeRatesResponse, error) {
	out := new(QueryActiveExchangeRatesResponse)
	err := c.cc.Invoke(ctx, "/cheqd.oracle.v2.Query/ActiveExchangeRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeederDelegation(ctx context.Context, in *QueryFeederDelegation, opts ...grpc.CallOption) (*QueryFeederDelegationResponse, error) {
	out := new(QueryFeederDelegationResponse)
	err := c.cc.Invoke(ctx, "/cheqd.oracle.v2.Query/FeederDelegation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MissCounter(ctx context.Context, in *QueryMissCounter, opts ...grpc.CallOption) (*QueryMissCounterResponse, error) {
	out := new(QueryMissCounterResponse)
	err := c.cc.Invoke(ctx, "/cheqd.oracle.v2.Query/MissCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SlashWindow(ctx context.Context, in *QuerySlashWindow, opts ...grpc.CallOption) (*QuerySlashWindowResponse, error) {
	out := new(QuerySlashWindowResponse)
	err := c.cc.Invoke(ctx, "/cheqd.oracle.v2.Query/SlashWindow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AggregatePrevote(ctx context.Context, in *QueryAggregatePrevote, opts ...grpc.CallOption) (*QueryAggregatePrevoteResponse, error) {
	out := new(QueryAggregatePrevoteResponse)
	err := c.cc.Invoke(ctx, "/cheqd.oracle.v2.Query/AggregatePrevote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AggregatePrevotes(ctx context.Context, in *QueryAggregatePrevotes, opts ...grpc.CallOption) (*QueryAggregatePrevotesResponse, error) {
	out := new(QueryAggregatePrevotesResponse)
	err := c.cc.Invoke(ctx, "/cheqd.oracle.v2.Query/AggregatePrevotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AggregateVote(ctx context.Context, in *QueryAggregateVote, opts ...grpc.CallOption) (*QueryAggregateVoteResponse, error) {
	out := new(QueryAggregateVoteResponse)
	err := c.cc.Invoke(ctx, "/cheqd.oracle.v2.Query/AggregateVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AggregateVotes(ctx context.Context, in *QueryAggregateVotes, opts ...grpc.CallOption) (*QueryAggregateVotesResponse, error) {
	out := new(QueryAggregateVotesResponse)
	err := c.cc.Invoke(ctx, "/cheqd.oracle.v2.Query/AggregateVotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParams, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/cheqd.oracle.v2.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Medians(ctx context.Context, in *QueryMedians, opts ...grpc.CallOption) (*QueryMediansResponse, error) {
	out := new(QueryMediansResponse)
	err := c.cc.Invoke(ctx, "/cheqd.oracle.v2.Query/Medians", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MedianDeviations(ctx context.Context, in *QueryMedianDeviations, opts ...grpc.CallOption) (*QueryMedianDeviationsResponse, error) {
	out := new(QueryMedianDeviationsResponse)
	err := c.cc.Invoke(ctx, "/cheqd.oracle.v2.Query/MedianDeviations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidatorRewardSet(ctx context.Context, in *QueryValidatorRewardSet, opts ...grpc.CallOption) (*QueryValidatorRewardSetResponse, error) {
	out := new(QueryValidatorRewardSetResponse)
	err := c.cc.Invoke(ctx, "/cheqd.oracle.v2.Query/ValidatorRewardSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetEma(ctx context.Context, in *GetEmaRequest, opts ...grpc.CallOption) (*GetEmaResponse, error) {
	out := new(GetEmaResponse)
	err := c.cc.Invoke(ctx, "/cheqd.oracle.v2.Query/GetEma", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WMA(ctx context.Context, in *QueryWMARequest, opts ...grpc.CallOption) (*QueryWMAResponse, error) {
	out := new(QueryWMAResponse)
	err := c.cc.Invoke(ctx, "/cheqd.oracle.v2.Query/WMA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// ExchangeRates returns exchange rates of all denoms,
	// or, if specified, returns a single denom
	ExchangeRates(context.Context, *QueryExchangeRates) (*QueryExchangeRatesResponse, error)
	// ActiveExchangeRates returns all active denoms
	ActiveExchangeRates(context.Context, *QueryActiveExchangeRates) (*QueryActiveExchangeRatesResponse, error)
	// FeederDelegation returns feeder delegation of a validator
	FeederDelegation(context.Context, *QueryFeederDelegation) (*QueryFeederDelegationResponse, error)
	// MissCounter returns oracle miss counter of a validator
	MissCounter(context.Context, *QueryMissCounter) (*QueryMissCounterResponse, error)
	// SlashWindow returns slash window information
	SlashWindow(context.Context, *QuerySlashWindow) (*QuerySlashWindowResponse, error)
	// AggregatePrevote returns an aggregate prevote of a validator
	AggregatePrevote(context.Context, *QueryAggregatePrevote) (*QueryAggregatePrevoteResponse, error)
	// AggregatePrevotes returns aggregate prevotes of all validators
	AggregatePrevotes(context.Context, *QueryAggregatePrevotes) (*QueryAggregatePrevotesResponse, error)
	// AggregateVote returns an aggregate vote of a validator
	AggregateVote(context.Context, *QueryAggregateVote) (*QueryAggregateVoteResponse, error)
	// AggregateVotes returns aggregate votes of all validators
	AggregateVotes(context.Context, *QueryAggregateVotes) (*QueryAggregateVotesResponse, error)
	// Params queries all parameters.
	Params(context.Context, *QueryParams) (*QueryParamsResponse, error)
	// Medians returns medians of all denoms,
	// or, if specified, returns a single median
	Medians(context.Context, *QueryMedians) (*QueryMediansResponse, error)
	// MedianDeviations returns median deviations of all denoms,
	// or, if specified, returns a single median deviation
	MedianDeviations(context.Context, *QueryMedianDeviations) (*QueryMedianDeviationsResponse, error)
	// ValidatorRewardSet returns the set of validators that is
	// earning rewards for voting on exchange rates based on their
	// misscounter in a given Slash Window
	ValidatorRewardSet(context.Context, *QueryValidatorRewardSet) (*QueryValidatorRewardSetResponse, error)
	GetEma(context.Context, *GetEmaRequest) (*GetEmaResponse, error)
	WMA(context.Context, *QueryWMARequest) (*QueryWMAResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) ExchangeRates(ctx context.Context, req *QueryExchangeRates) (*QueryExchangeRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeRates not implemented")
}
func (*UnimplementedQueryServer) ActiveExchangeRates(ctx context.Context, req *QueryActiveExchangeRates) (*QueryActiveExchangeRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActiveExchangeRates not implemented")
}
func (*UnimplementedQueryServer) FeederDelegation(ctx context.Context, req *QueryFeederDelegation) (*QueryFeederDelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeederDelegation not implemented")
}
func (*UnimplementedQueryServer) MissCounter(ctx context.Context, req *QueryMissCounter) (*QueryMissCounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MissCounter not implemented")
}
func (*UnimplementedQueryServer) SlashWindow(ctx context.Context, req *QuerySlashWindow) (*QuerySlashWindowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SlashWindow not implemented")
}
func (*UnimplementedQueryServer) AggregatePrevote(ctx context.Context, req *QueryAggregatePrevote) (*QueryAggregatePrevoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregatePrevote not implemented")
}
func (*UnimplementedQueryServer) AggregatePrevotes(ctx context.Context, req *QueryAggregatePrevotes) (*QueryAggregatePrevotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregatePrevotes not implemented")
}
func (*UnimplementedQueryServer) AggregateVote(ctx context.Context, req *QueryAggregateVote) (*QueryAggregateVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregateVote not implemented")
}
func (*UnimplementedQueryServer) AggregateVotes(ctx context.Context, req *QueryAggregateVotes) (*QueryAggregateVotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregateVotes not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParams) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Medians(ctx context.Context, req *QueryMedians) (*QueryMediansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Medians not implemented")
}
func (*UnimplementedQueryServer) MedianDeviations(ctx context.Context, req *QueryMedianDeviations) (*QueryMedianDeviationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MedianDeviations not implemented")
}
func (*UnimplementedQueryServer) ValidatorRewardSet(ctx context.Context, req *QueryValidatorRewardSet) (*QueryValidatorRewardSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorRewardSet not implemented")
}
func (*UnimplementedQueryServer) GetEma(ctx context.Context, req *GetEmaRequest) (*GetEmaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEma not implemented")
}
func (*UnimplementedQueryServer) WMA(ctx context.Context, req *QueryWMARequest) (*QueryWMAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WMA not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_ExchangeRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExchangeRates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExchangeRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheqd.oracle.v2.Query/ExchangeRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExchangeRates(ctx, req.(*QueryExchangeRates))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActiveExchangeRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryActiveExchangeRates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActiveExchangeRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheqd.oracle.v2.Query/ActiveExchangeRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActiveExchangeRates(ctx, req.(*QueryActiveExchangeRates))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeederDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeederDelegation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeederDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheqd.oracle.v2.Query/FeederDelegation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeederDelegation(ctx, req.(*QueryFeederDelegation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MissCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMissCounter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MissCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheqd.oracle.v2.Query/MissCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MissCounter(ctx, req.(*QueryMissCounter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SlashWindow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySlashWindow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SlashWindow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheqd.oracle.v2.Query/SlashWindow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SlashWindow(ctx, req.(*QuerySlashWindow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AggregatePrevote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAggregatePrevote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AggregatePrevote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheqd.oracle.v2.Query/AggregatePrevote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AggregatePrevote(ctx, req.(*QueryAggregatePrevote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AggregatePrevotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAggregatePrevotes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AggregatePrevotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheqd.oracle.v2.Query/AggregatePrevotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AggregatePrevotes(ctx, req.(*QueryAggregatePrevotes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AggregateVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAggregateVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AggregateVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheqd.oracle.v2.Query/AggregateVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AggregateVote(ctx, req.(*QueryAggregateVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AggregateVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAggregateVotes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AggregateVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheqd.oracle.v2.Query/AggregateVotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AggregateVotes(ctx, req.(*QueryAggregateVotes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheqd.oracle.v2.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Medians_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMedians)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Medians(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheqd.oracle.v2.Query/Medians",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Medians(ctx, req.(*QueryMedians))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MedianDeviations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMedianDeviations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MedianDeviations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheqd.oracle.v2.Query/MedianDeviations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MedianDeviations(ctx, req.(*QueryMedianDeviations))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidatorRewardSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorRewardSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidatorRewardSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheqd.oracle.v2.Query/ValidatorRewardSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidatorRewardSet(ctx, req.(*QueryValidatorRewardSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetEma_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetEma(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheqd.oracle.v2.Query/GetEma",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetEma(ctx, req.(*GetEmaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WMA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWMARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WMA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheqd.oracle.v2.Query/WMA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WMA(ctx, req.(*QueryWMARequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cheqd.oracle.v2.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExchangeRates",
			Handler:    _Query_ExchangeRates_Handler,
		},
		{
			MethodName: "ActiveExchangeRates",
			Handler:    _Query_ActiveExchangeRates_Handler,
		},
		{
			MethodName: "FeederDelegation",
			Handler:    _Query_FeederDelegation_Handler,
		},
		{
			MethodName: "MissCounter",
			Handler:    _Query_MissCounter_Handler,
		},
		{
			MethodName: "SlashWindow",
			Handler:    _Query_SlashWindow_Handler,
		},
		{
			MethodName: "AggregatePrevote",
			Handler:    _Query_AggregatePrevote_Handler,
		},
		{
			MethodName: "AggregatePrevotes",
			Handler:    _Query_AggregatePrevotes_Handler,
		},
		{
			MethodName: "AggregateVote",
			Handler:    _Query_AggregateVote_Handler,
		},
		{
			MethodName: "AggregateVotes",
			Handler:    _Query_AggregateVotes_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Medians",
			Handler:    _Query_Medians_Handler,
		},
		{
			MethodName: "MedianDeviations",
			Handler:    _Query_MedianDeviations_Handler,
		},
		{
			MethodName: "ValidatorRewardSet",
			Handler:    _Query_ValidatorRewardSet_Handler,
		},
		{
			MethodName: "GetEma",
			Handler:    _Query_GetEma_Handler,
		},
		{
			MethodName: "WMA",
			Handler:    _Query_WMA_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cheqd/oracle/v2/query.proto",
}

func (m *QueryExchangeRates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExchangeRates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExchangeRates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryExchangeRatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExchangeRatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExchangeRatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExchangeRates) > 0 {
		for iNdEx := len(m.ExchangeRates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExchangeRates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryActiveExchangeRates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActiveExchangeRates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActiveExchangeRates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryActiveExchangeRatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActiveExchangeRatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActiveExchangeRatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ActiveRates) > 0 {
		for iNdEx := len(m.ActiveRates) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ActiveRates[iNdEx])
			copy(dAtA[i:], m.ActiveRates[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.ActiveRates[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeederDelegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeederDelegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeederDelegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeederDelegationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeederDelegationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeederDelegationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeederAddr) > 0 {
		i -= len(m.FeederAddr)
		copy(dAtA[i:], m.FeederAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FeederAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMissCounter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMissCounter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMissCounter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMissCounterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMissCounterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMissCounterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MissCounter != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MissCounter))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySlashWindow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySlashWindow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySlashWindow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QuerySlashWindowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySlashWindowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySlashWindowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WindowProgress != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.WindowProgress))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAggregatePrevote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAggregatePrevote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAggregatePrevote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAggregatePrevoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAggregatePrevoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAggregatePrevoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AggregatePrevote.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAggregatePrevotes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAggregatePrevotes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAggregatePrevotes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAggregatePrevotesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAggregatePrevotesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAggregatePrevotesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AggregatePrevotes) > 0 {
		for iNdEx := len(m.AggregatePrevotes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AggregatePrevotes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAggregateVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAggregateVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAggregateVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAggregateVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAggregateVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAggregateVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AggregateVote.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAggregateVotes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAggregateVotes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAggregateVotes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAggregateVotesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAggregateVotesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAggregateVotesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AggregateVotes) > 0 {
		for iNdEx := len(m.AggregateVotes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AggregateVotes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryMedians) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMedians) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMedians) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumStamps != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.NumStamps))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMediansResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMediansResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMediansResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Medians) > 0 {
		for iNdEx := len(m.Medians) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Medians[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryMedianDeviations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMedianDeviations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMedianDeviations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMedianDeviationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMedianDeviationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMedianDeviationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MedianDeviations) > 0 {
		for iNdEx := len(m.MedianDeviations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MedianDeviations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidatorRewardSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorRewardSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorRewardSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryValidatorRewardSetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorRewardSetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorRewardSetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Validators.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetEmaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetEmaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetEmaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetEmaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetEmaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetEmaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryWMARequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWMARequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWMARequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CustomWeights) > 0 {
		dAtA6 := make([]byte, len(m.CustomWeights)*10)
		var j5 int
		for _, num1 := range m.CustomWeights {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintQuery(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Strategy) > 0 {
		i -= len(m.Strategy)
		copy(dAtA[i:], m.Strategy)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Strategy)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWMAResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWMAResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWMAResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryExchangeRates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryExchangeRatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExchangeRates) > 0 {
		for _, e := range m.ExchangeRates {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryActiveExchangeRates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryActiveExchangeRatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ActiveRates) > 0 {
		for _, s := range m.ActiveRates {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryFeederDelegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFeederDelegationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeederAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMissCounter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMissCounterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MissCounter != 0 {
		n += 1 + sovQuery(uint64(m.MissCounter))
	}
	return n
}

func (m *QuerySlashWindow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QuerySlashWindowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WindowProgress != 0 {
		n += 1 + sovQuery(uint64(m.WindowProgress))
	}
	return n
}

func (m *QueryAggregatePrevote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAggregatePrevoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AggregatePrevote.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAggregatePrevotes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAggregatePrevotesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AggregatePrevotes) > 0 {
		for _, e := range m.AggregatePrevotes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAggregateVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAggregateVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AggregateVote.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAggregateVotes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAggregateVotesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AggregateVotes) > 0 {
		for _, e := range m.AggregateVotes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryMedians) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.NumStamps != 0 {
		n += 1 + sovQuery(uint64(m.NumStamps))
	}
	return n
}

func (m *QueryMediansResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Medians) > 0 {
		for _, e := range m.Medians {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryMedianDeviations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMedianDeviationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MedianDeviations) > 0 {
		for _, e := range m.MedianDeviations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryValidatorRewardSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryValidatorRewardSetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Validators.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *GetEmaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetEmaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Price.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryWMARequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Strategy)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.CustomWeights) > 0 {
		l = 0
		for _, e := range m.CustomWeights {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func (m *QueryWMAResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Price.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryExchangeRates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExchangeRates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExchangeRates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExchangeRatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExchangeRatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExchangeRatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExchangeRates = append(m.ExchangeRates, types.DecCoin{})
			if err := m.ExchangeRates[len(m.ExchangeRates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActiveExchangeRates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveExchangeRates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveExchangeRates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActiveExchangeRatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveExchangeRatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveExchangeRatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveRates", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveRates = append(m.ActiveRates, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeederDelegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeederDelegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeederDelegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeederDelegationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeederDelegationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeederDelegationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeederAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeederAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMissCounter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMissCounter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMissCounter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMissCounterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMissCounterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMissCounterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissCounter", wireType)
			}
			m.MissCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissCounter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySlashWindow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySlashWindow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySlashWindow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySlashWindowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySlashWindowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySlashWindowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WindowProgress", wireType)
			}
			m.WindowProgress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WindowProgress |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAggregatePrevote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAggregatePrevote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAggregatePrevote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAggregatePrevoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAggregatePrevoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAggregatePrevoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatePrevote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AggregatePrevote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAggregatePrevotes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAggregatePrevotes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAggregatePrevotes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAggregatePrevotesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAggregatePrevotesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAggregatePrevotesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatePrevotes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregatePrevotes = append(m.AggregatePrevotes, AggregateExchangeRatePrevote{})
			if err := m.AggregatePrevotes[len(m.AggregatePrevotes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAggregateVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAggregateVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAggregateVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAggregateVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAggregateVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAggregateVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregateVote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AggregateVote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAggregateVotes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAggregateVotes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAggregateVotes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAggregateVotesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAggregateVotesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAggregateVotesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregateVotes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregateVotes = append(m.AggregateVotes, AggregateExchangeRateVote{})
			if err := m.AggregateVotes[len(m.AggregateVotes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMedians) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMedians: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMedians: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumStamps", wireType)
			}
			m.NumStamps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumStamps |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMediansResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMediansResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMediansResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Medians", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Medians = append(m.Medians, PriceStamp{})
			if err := m.Medians[len(m.Medians)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMedianDeviations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMedianDeviations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMedianDeviations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMedianDeviationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMedianDeviationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMedianDeviationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MedianDeviations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MedianDeviations = append(m.MedianDeviations, PriceStamp{})
			if err := m.MedianDeviations[len(m.MedianDeviations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorRewardSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorRewardSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorRewardSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorRewardSetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorRewardSetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorRewardSetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Validators.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetEmaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetEmaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetEmaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetEmaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetEmaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetEmaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWMARequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWMARequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWMARequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strategy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Strategy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CustomWeights = append(m.CustomWeights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CustomWeights) == 0 {
					m.CustomWeights = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CustomWeights = append(m.CustomWeights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomWeights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWMAResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWMAResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWMAResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
