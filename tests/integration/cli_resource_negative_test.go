//go:build integration

package integration

import (
	"crypto/ed25519"
	"fmt"

	"github.com/cheqd/cheqd-node/tests/integration/cli"
	"github.com/cheqd/cheqd-node/tests/integration/network"
	"github.com/cheqd/cheqd-node/tests/integration/testdata"
	clitypes "github.com/cheqd/cheqd-node/x/did/client/cli"
	testsetup "github.com/cheqd/cheqd-node/x/did/tests/setup"
	"github.com/cheqd/cheqd-node/x/did/types"
	resourcecli "github.com/cheqd/cheqd-node/x/resource/client/cli"
	"github.com/google/uuid"
	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
)

var _ = Describe("cheqd cli - negative resource", func() {
	var collectionID string
	var did string
	var signInputs []clitypes.SignInput
	var resourceID string
	var resourceName string

	var tmpDir string

	BeforeEach(func() {
		// Initialize tmpDir
		tmpDir = GinkgoT().TempDir()

		// Create a new DID Doc
		collectionID = uuid.NewString()
		did := "did:cheqd:" + network.DidNamespace + ":" + collectionID
		keyId := did + "#key1"

		pubKey, privKey, err := ed25519.GenerateKey(nil)
		Expect(err).To(BeNil())

		publicKeyMultibase := testsetup.GenerateEd25519VerificationKey2020VerificationMaterial(pubKey)

		payload := types.MsgCreateDidDocPayload{
			Id: did,
			VerificationMethod: []*types.VerificationMethod{
				{
					Id:                     keyId,
					VerificationMethodType: "Ed25519VerificationKey2020",
					Controller:             did,
					VerificationMaterial:   publicKeyMultibase,
				},
			},
			Authentication: []string{keyId},
			VersionId:      uuid.NewString(),
		}

		signInputs = []clitypes.SignInput{
			{
				VerificationMethodID: keyId,
				PrivKey:              privKey,
			},
		}

		res, err := cli.CreateDidDoc(tmpDir, payload, signInputs, testdata.BASE_ACCOUNT_1, cli.CliGasParams)
		Expect(err).To(BeNil())
		Expect(res.Code).To(BeEquivalentTo(0))

		// Initialize shared resourceID
		resourceID = uuid.NewString()
		resourceName = "TestName"
	})

	It("cannot create resource with missing cli arguments, sign inputs mismatch", func() {
		// Generate a new DID Doc
		collectionId2 := uuid.NewString()

		// Generate extra sign inputs
		keyId2 := did + "#key2"
		_, privKey2, err := ed25519.GenerateKey(nil)
		Expect(err).To(BeNil())
		signInputs2 := []clitypes.SignInput{
			{
				VerificationMethodID: keyId2,
				PrivKey:              privKey2,
			},
		}

		// Fail to create a resource in non-existing collection
		resourceName = "TestResource"
		resourceVersion := "1.0"
		resourceType := "TestType"
		resourceFile, err := testdata.CreateTestJson(GinkgoT().TempDir())
		Expect(err).To(BeNil())

		_, err = cli.CreateResource(tmpDir, resourcecli.CreateResourceOptions{
			CollectionID:    collectionId2,
			ResourceID:      resourceID,
			ResourceName:    resourceName,
			ResourceVersion: resourceVersion,
			ResourceType:    resourceType,
			ResourceFile:    resourceFile,
		}, signInputs, testdata.BASE_ACCOUNT_1, cli.CliGasParams)
		Expect(err).To(HaveOccurred())

		AddReportEntry("Integration", fmt.Sprintf("%sNegative: %s", cli.Purple, "cannot create resource with missing cli arguments"))
		// Fail to create a resource with missing cli arguments
		//   a. missing collection id
		_, err = cli.CreateResource(tmpDir, resourcecli.CreateResourceOptions{
			ResourceID:      resourceID,
			ResourceName:    resourceName,
			ResourceVersion: resourceVersion,
			ResourceType:    resourceType,
			ResourceFile:    resourceFile,
		}, signInputs, testdata.BASE_ACCOUNT_1, cli.CliGasParams)

		//  b. missing resource id - works because it is generated by the cli
		_, err = cli.CreateResource(tmpDir, resourcecli.CreateResourceOptions{
			CollectionID:    collectionID,
			ResourceName:    resourceName,
			ResourceVersion: resourceVersion,
			ResourceType:    resourceType,
			ResourceFile:    resourceFile,
		}, signInputs, testdata.BASE_ACCOUNT_1, cli.CliGasParams)
		Expect(err).To(BeNil())

		// c. missing resource name
		_, err = cli.CreateResource(tmpDir, resourcecli.CreateResourceOptions{
			CollectionID:    collectionID,
			ResourceID:      resourceID,
			ResourceVersion: resourceVersion,
			ResourceType:    resourceType,
			ResourceFile:    resourceFile,
		}, signInputs, testdata.BASE_ACCOUNT_1, cli.CliGasParams)
		Expect(err).To(HaveOccurred())

		// c. missing resource version - ok

		// d. missing resource type
		_, err = cli.CreateResource(tmpDir, resourcecli.CreateResourceOptions{
			CollectionID:    collectionID,
			ResourceID:      resourceID,
			ResourceName:    resourceName,
			ResourceVersion: resourceVersion,
			ResourceFile:    resourceFile,
		}, signInputs, testdata.BASE_ACCOUNT_1, cli.CliGasParams)
		Expect(err).To(HaveOccurred())

		// e. missing resource file
		_, err = cli.CreateResource(tmpDir, resourcecli.CreateResourceOptions{
			CollectionID:    collectionID,
			ResourceID:      resourceID,
			ResourceName:    resourceName,
			ResourceVersion: resourceVersion,
			ResourceType:    resourceType,
		}, signInputs, testdata.BASE_ACCOUNT_1, cli.CliGasParams)
		Expect(err).To(HaveOccurred())

		// f. missing sign inputs
		_, err = cli.CreateResource(tmpDir, resourcecli.CreateResourceOptions{
			CollectionID:    collectionID,
			ResourceID:      resourceID,
			ResourceName:    resourceName,
			ResourceVersion: resourceVersion,
			ResourceType:    resourceType,
			ResourceFile:    resourceFile,
		}, []clitypes.SignInput{}, testdata.BASE_ACCOUNT_1, cli.CliGasParams)
		Expect(err).To(HaveOccurred())

		// g. missing account
		_, err = cli.CreateResource(tmpDir, resourcecli.CreateResourceOptions{
			CollectionID:    collectionID,
			ResourceID:      resourceID,
			ResourceName:    resourceName,
			ResourceVersion: resourceVersion,
			ResourceType:    resourceType,
			ResourceFile:    resourceFile,
		}, signInputs, "", cli.CliGasParams)
		Expect(err).To(HaveOccurred())

		AddReportEntry("Integration", fmt.Sprintf("%sNegative: %s", cli.Purple, "cannot create resource with sign inputs mismatch"))
		// Fail to create a resource with sign inputs mismatch
		//   a. sign inputs mismatch
		_, err = cli.CreateResource(tmpDir, resourcecli.CreateResourceOptions{
			CollectionID:    collectionID,
			ResourceID:      resourceID,
			ResourceName:    resourceName,
			ResourceVersion: resourceVersion,
			ResourceType:    resourceType,
			ResourceFile:    resourceFile,
		}, signInputs2, testdata.BASE_ACCOUNT_1, cli.CliGasParams)
		Expect(err).To(HaveOccurred())

		//   b. non-existing key id
		_, err = cli.CreateResource(tmpDir, resourcecli.CreateResourceOptions{
			CollectionID:    collectionID,
			ResourceID:      resourceID,
			ResourceName:    resourceName,
			ResourceVersion: resourceVersion,
			ResourceType:    resourceType,
			ResourceFile:    resourceFile,
		}, []clitypes.SignInput{
			{
				VerificationMethodID: "non-existing-key-id",
				PrivKey:              signInputs[0].PrivKey,
			},
		}, testdata.BASE_ACCOUNT_1, cli.CliGasParams)
		Expect(err).To(HaveOccurred())

		//   c. non-matching private key
		_, err = cli.CreateResource(tmpDir, resourcecli.CreateResourceOptions{
			CollectionID:    collectionID,
			ResourceID:      resourceID,
			ResourceName:    resourceName,
			ResourceVersion: resourceVersion,
			ResourceType:    resourceType,
			ResourceFile:    resourceFile,
		}, []clitypes.SignInput{
			{
				VerificationMethodID: signInputs[0].VerificationMethodID,
				PrivKey:              privKey2,
			},
		}, testdata.BASE_ACCOUNT_1, cli.CliGasParams)
		Expect(err).To(HaveOccurred())

		//   d. invalid private key
		_, err = cli.CreateResource(tmpDir, resourcecli.CreateResourceOptions{
			CollectionID:    collectionID,
			ResourceID:      resourceID,
			ResourceName:    resourceName,
			ResourceVersion: resourceVersion,
			ResourceType:    resourceType,
			ResourceFile:    resourceFile,
		}, []clitypes.SignInput{
			{
				VerificationMethodID: signInputs[0].VerificationMethodID,
				PrivKey:              testdata.GenerateByteEntropy(),
			},
		}, testdata.BASE_ACCOUNT_1, cli.CliGasParams)
		Expect(err).To(HaveOccurred())

		// Finally, create the resource
		res, err := cli.CreateResource(tmpDir, resourcecli.CreateResourceOptions{
			CollectionID:    collectionID,
			ResourceID:      resourceID,
			ResourceName:    resourceName,
			ResourceVersion: resourceVersion,
			ResourceType:    resourceType,
			ResourceFile:    resourceFile,
		}, signInputs, testdata.BASE_ACCOUNT_1, cli.CliGasParams)
		Expect(err).To(BeNil())
		Expect(res.Code).To(BeEquivalentTo(0))
	})

	It("cannot query a resource with missing cli arguments, non-existing collection, non-existing resource", func() {
		collectionId2 := uuid.NewString()
		resourceId2 := uuid.NewString()

		AddReportEntry("Integration", fmt.Sprintf("%sNegative: %s", cli.Purple, "cannot query a resource with missing cli arguments"))
		// Fail to query a resource with missing cli arguments
		//   a. missing collection id, resource id
		_, err := cli.QueryResource("", "")
		Expect(err).To(HaveOccurred())

		//   b. missing collection id
		_, err = cli.QueryResource("", resourceId2)
		Expect(err).To(HaveOccurred())

		//   c. missing resource id
		_, err = cli.QueryResource(collectionId2, "")
		Expect(err).To(HaveOccurred())

		AddReportEntry("Integration", fmt.Sprintf("%sNegative: %s", cli.Purple, "cannot query a resource with non-existing collection id"))
		// Fail to query a resource with non-existing collection id
		_, err = cli.QueryResource(collectionId2, resourceID)
		Expect(err).To(HaveOccurred())

		AddReportEntry("Integration", fmt.Sprintf("%sNegative: %s", cli.Purple, "cannot query a resource with non-existing resource id"))
		// Fail to query a resource with non-existing resource id
		_, err = cli.QueryResource(collectionID, resourceId2)
		Expect(err).To(HaveOccurred())
	})

	It("cannot query resource collection with missing cli arguments, non-existing collection id", func() {
		collectionId2 := uuid.NewString()

		AddReportEntry("Integration", fmt.Sprintf("%sNegative: %s", cli.Purple, "cannot query resource collection with missing cli arguments"))
		// Fail to query resource collection with missing cli arguments
		//   a. missing collection id
		_, err := cli.QueryResourceCollection("")
		Expect(err).To(HaveOccurred())

		AddReportEntry("Integration", fmt.Sprintf("%sNegative: %s", cli.Purple, "cannot query resource collection with non-existing collection id"))
		// Fail to query resource collection with non-existing collection id
		_, err = cli.QueryResourceCollection(collectionId2)
		Expect(err).To(HaveOccurred())
	})
})
