// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cheqd/oracle/v2/tx.proto

package oraclev2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Msg_AggregateExchangeRatePrevote_FullMethodName         = "/cheqd.oracle.v2.Msg/AggregateExchangeRatePrevote"
	Msg_AggregateExchangeRateVote_FullMethodName            = "/cheqd.oracle.v2.Msg/AggregateExchangeRateVote"
	Msg_DelegateFeedConsent_FullMethodName                  = "/cheqd.oracle.v2.Msg/DelegateFeedConsent"
	Msg_LegacyGovUpdateParams_FullMethodName                = "/cheqd.oracle.v2.Msg/LegacyGovUpdateParams"
	Msg_GovUpdateParams_FullMethodName                      = "/cheqd.oracle.v2.Msg/GovUpdateParams"
	Msg_GovAddDenoms_FullMethodName                         = "/cheqd.oracle.v2.Msg/GovAddDenoms"
	Msg_GovRemoveCurrencyPairProviders_FullMethodName       = "/cheqd.oracle.v2.Msg/GovRemoveCurrencyPairProviders"
	Msg_GovRemoveCurrencyDeviationThresholds_FullMethodName = "/cheqd.oracle.v2.Msg/GovRemoveCurrencyDeviationThresholds"
	Msg_GovCancelUpdateParamPlan_FullMethodName             = "/cheqd.oracle.v2.Msg/GovCancelUpdateParamPlan"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Msg defines the oracle Msg service.
type MsgClient interface {
	// AggregateExchangeRatePrevote defines a method for submitting an aggregate
	// exchange rate prevote.
	AggregateExchangeRatePrevote(ctx context.Context, in *MsgAggregateExchangeRatePrevote, opts ...grpc.CallOption) (*MsgAggregateExchangeRatePrevoteResponse, error)
	// AggregateExchangeRateVote defines a method for submitting an aggregate
	// exchange rate vote.
	AggregateExchangeRateVote(ctx context.Context, in *MsgAggregateExchangeRateVote, opts ...grpc.CallOption) (*MsgAggregateExchangeRateVoteResponse, error)
	// DelegateFeedConsent defines a method for setting the feeder delegation.
	DelegateFeedConsent(ctx context.Context, in *MsgDelegateFeedConsent, opts ...grpc.CallOption) (*MsgDelegateFeedConsentResponse, error)
	// LegacyGovUpdateParams defines the legacy message that updates the oracle parameters.
	LegacyGovUpdateParams(ctx context.Context, in *MsgLegacyGovUpdateParams, opts ...grpc.CallOption) (*MsgLegacyGovUpdateParamsResponse, error)
	// GovUpdateParams updates the oracle parameters.
	GovUpdateParams(ctx context.Context, in *MsgGovUpdateParams, opts ...grpc.CallOption) (*MsgGovUpdateParamsResponse, error)
	// GovAddDenoms updates the oracle parameters to include a new tokens.
	GovAddDenoms(ctx context.Context, in *MsgGovAddDenoms, opts ...grpc.CallOption) (*MsgGovAddDenomsResponse, error)
	// GovRemoveCurrencyPairProviders updates the oracle parameters to remove a list of
	// currency pair providers.
	GovRemoveCurrencyPairProviders(ctx context.Context, in *MsgGovRemoveCurrencyPairProviders, opts ...grpc.CallOption) (*MsgGovRemoveCurrencyPairProvidersResponse, error)
	// GovRemoveCurrencyDeviationThresholds updates the oracle parameters to remove a list
	// of currency deviation thresholds.
	GovRemoveCurrencyDeviationThresholds(ctx context.Context, in *MsgGovRemoveCurrencyDeviationThresholds, opts ...grpc.CallOption) (*MsgGovRemoveCurrencyDeviationThresholdsResponse, error)
	// GovCancelUpdateParamPlan cancels a plan to update the oracle parameters.
	GovCancelUpdateParamPlan(ctx context.Context, in *MsgGovCancelUpdateParamPlan, opts ...grpc.CallOption) (*MsgGovCancelUpdateParamPlanResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AggregateExchangeRatePrevote(ctx context.Context, in *MsgAggregateExchangeRatePrevote, opts ...grpc.CallOption) (*MsgAggregateExchangeRatePrevoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgAggregateExchangeRatePrevoteResponse)
	err := c.cc.Invoke(ctx, Msg_AggregateExchangeRatePrevote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AggregateExchangeRateVote(ctx context.Context, in *MsgAggregateExchangeRateVote, opts ...grpc.CallOption) (*MsgAggregateExchangeRateVoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgAggregateExchangeRateVoteResponse)
	err := c.cc.Invoke(ctx, Msg_AggregateExchangeRateVote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DelegateFeedConsent(ctx context.Context, in *MsgDelegateFeedConsent, opts ...grpc.CallOption) (*MsgDelegateFeedConsentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgDelegateFeedConsentResponse)
	err := c.cc.Invoke(ctx, Msg_DelegateFeedConsent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) LegacyGovUpdateParams(ctx context.Context, in *MsgLegacyGovUpdateParams, opts ...grpc.CallOption) (*MsgLegacyGovUpdateParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgLegacyGovUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_LegacyGovUpdateParams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GovUpdateParams(ctx context.Context, in *MsgGovUpdateParams, opts ...grpc.CallOption) (*MsgGovUpdateParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgGovUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_GovUpdateParams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GovAddDenoms(ctx context.Context, in *MsgGovAddDenoms, opts ...grpc.CallOption) (*MsgGovAddDenomsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgGovAddDenomsResponse)
	err := c.cc.Invoke(ctx, Msg_GovAddDenoms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GovRemoveCurrencyPairProviders(ctx context.Context, in *MsgGovRemoveCurrencyPairProviders, opts ...grpc.CallOption) (*MsgGovRemoveCurrencyPairProvidersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgGovRemoveCurrencyPairProvidersResponse)
	err := c.cc.Invoke(ctx, Msg_GovRemoveCurrencyPairProviders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GovRemoveCurrencyDeviationThresholds(ctx context.Context, in *MsgGovRemoveCurrencyDeviationThresholds, opts ...grpc.CallOption) (*MsgGovRemoveCurrencyDeviationThresholdsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgGovRemoveCurrencyDeviationThresholdsResponse)
	err := c.cc.Invoke(ctx, Msg_GovRemoveCurrencyDeviationThresholds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GovCancelUpdateParamPlan(ctx context.Context, in *MsgGovCancelUpdateParamPlan, opts ...grpc.CallOption) (*MsgGovCancelUpdateParamPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgGovCancelUpdateParamPlanResponse)
	err := c.cc.Invoke(ctx, Msg_GovCancelUpdateParamPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility.
//
// Msg defines the oracle Msg service.
type MsgServer interface {
	// AggregateExchangeRatePrevote defines a method for submitting an aggregate
	// exchange rate prevote.
	AggregateExchangeRatePrevote(context.Context, *MsgAggregateExchangeRatePrevote) (*MsgAggregateExchangeRatePrevoteResponse, error)
	// AggregateExchangeRateVote defines a method for submitting an aggregate
	// exchange rate vote.
	AggregateExchangeRateVote(context.Context, *MsgAggregateExchangeRateVote) (*MsgAggregateExchangeRateVoteResponse, error)
	// DelegateFeedConsent defines a method for setting the feeder delegation.
	DelegateFeedConsent(context.Context, *MsgDelegateFeedConsent) (*MsgDelegateFeedConsentResponse, error)
	// LegacyGovUpdateParams defines the legacy message that updates the oracle parameters.
	LegacyGovUpdateParams(context.Context, *MsgLegacyGovUpdateParams) (*MsgLegacyGovUpdateParamsResponse, error)
	// GovUpdateParams updates the oracle parameters.
	GovUpdateParams(context.Context, *MsgGovUpdateParams) (*MsgGovUpdateParamsResponse, error)
	// GovAddDenoms updates the oracle parameters to include a new tokens.
	GovAddDenoms(context.Context, *MsgGovAddDenoms) (*MsgGovAddDenomsResponse, error)
	// GovRemoveCurrencyPairProviders updates the oracle parameters to remove a list of
	// currency pair providers.
	GovRemoveCurrencyPairProviders(context.Context, *MsgGovRemoveCurrencyPairProviders) (*MsgGovRemoveCurrencyPairProvidersResponse, error)
	// GovRemoveCurrencyDeviationThresholds updates the oracle parameters to remove a list
	// of currency deviation thresholds.
	GovRemoveCurrencyDeviationThresholds(context.Context, *MsgGovRemoveCurrencyDeviationThresholds) (*MsgGovRemoveCurrencyDeviationThresholdsResponse, error)
	// GovCancelUpdateParamPlan cancels a plan to update the oracle parameters.
	GovCancelUpdateParamPlan(context.Context, *MsgGovCancelUpdateParamPlan) (*MsgGovCancelUpdateParamPlanResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMsgServer struct{}

func (UnimplementedMsgServer) AggregateExchangeRatePrevote(context.Context, *MsgAggregateExchangeRatePrevote) (*MsgAggregateExchangeRatePrevoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregateExchangeRatePrevote not implemented")
}
func (UnimplementedMsgServer) AggregateExchangeRateVote(context.Context, *MsgAggregateExchangeRateVote) (*MsgAggregateExchangeRateVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregateExchangeRateVote not implemented")
}
func (UnimplementedMsgServer) DelegateFeedConsent(context.Context, *MsgDelegateFeedConsent) (*MsgDelegateFeedConsentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegateFeedConsent not implemented")
}
func (UnimplementedMsgServer) LegacyGovUpdateParams(context.Context, *MsgLegacyGovUpdateParams) (*MsgLegacyGovUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LegacyGovUpdateParams not implemented")
}
func (UnimplementedMsgServer) GovUpdateParams(context.Context, *MsgGovUpdateParams) (*MsgGovUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GovUpdateParams not implemented")
}
func (UnimplementedMsgServer) GovAddDenoms(context.Context, *MsgGovAddDenoms) (*MsgGovAddDenomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GovAddDenoms not implemented")
}
func (UnimplementedMsgServer) GovRemoveCurrencyPairProviders(context.Context, *MsgGovRemoveCurrencyPairProviders) (*MsgGovRemoveCurrencyPairProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GovRemoveCurrencyPairProviders not implemented")
}
func (UnimplementedMsgServer) GovRemoveCurrencyDeviationThresholds(context.Context, *MsgGovRemoveCurrencyDeviationThresholds) (*MsgGovRemoveCurrencyDeviationThresholdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GovRemoveCurrencyDeviationThresholds not implemented")
}
func (UnimplementedMsgServer) GovCancelUpdateParamPlan(context.Context, *MsgGovCancelUpdateParamPlan) (*MsgGovCancelUpdateParamPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GovCancelUpdateParamPlan not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}
func (UnimplementedMsgServer) testEmbeddedByValue()             {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	// If the following call pancis, it indicates UnimplementedMsgServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_AggregateExchangeRatePrevote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAggregateExchangeRatePrevote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AggregateExchangeRatePrevote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AggregateExchangeRatePrevote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AggregateExchangeRatePrevote(ctx, req.(*MsgAggregateExchangeRatePrevote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AggregateExchangeRateVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAggregateExchangeRateVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AggregateExchangeRateVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AggregateExchangeRateVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AggregateExchangeRateVote(ctx, req.(*MsgAggregateExchangeRateVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DelegateFeedConsent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDelegateFeedConsent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DelegateFeedConsent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DelegateFeedConsent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DelegateFeedConsent(ctx, req.(*MsgDelegateFeedConsent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_LegacyGovUpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLegacyGovUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LegacyGovUpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_LegacyGovUpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LegacyGovUpdateParams(ctx, req.(*MsgLegacyGovUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GovUpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGovUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GovUpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GovUpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GovUpdateParams(ctx, req.(*MsgGovUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GovAddDenoms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGovAddDenoms)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GovAddDenoms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GovAddDenoms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GovAddDenoms(ctx, req.(*MsgGovAddDenoms))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GovRemoveCurrencyPairProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGovRemoveCurrencyPairProviders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GovRemoveCurrencyPairProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GovRemoveCurrencyPairProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GovRemoveCurrencyPairProviders(ctx, req.(*MsgGovRemoveCurrencyPairProviders))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GovRemoveCurrencyDeviationThresholds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGovRemoveCurrencyDeviationThresholds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GovRemoveCurrencyDeviationThresholds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GovRemoveCurrencyDeviationThresholds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GovRemoveCurrencyDeviationThresholds(ctx, req.(*MsgGovRemoveCurrencyDeviationThresholds))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GovCancelUpdateParamPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGovCancelUpdateParamPlan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GovCancelUpdateParamPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GovCancelUpdateParamPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GovCancelUpdateParamPlan(ctx, req.(*MsgGovCancelUpdateParamPlan))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cheqd.oracle.v2.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AggregateExchangeRatePrevote",
			Handler:    _Msg_AggregateExchangeRatePrevote_Handler,
		},
		{
			MethodName: "AggregateExchangeRateVote",
			Handler:    _Msg_AggregateExchangeRateVote_Handler,
		},
		{
			MethodName: "DelegateFeedConsent",
			Handler:    _Msg_DelegateFeedConsent_Handler,
		},
		{
			MethodName: "LegacyGovUpdateParams",
			Handler:    _Msg_LegacyGovUpdateParams_Handler,
		},
		{
			MethodName: "GovUpdateParams",
			Handler:    _Msg_GovUpdateParams_Handler,
		},
		{
			MethodName: "GovAddDenoms",
			Handler:    _Msg_GovAddDenoms_Handler,
		},
		{
			MethodName: "GovRemoveCurrencyPairProviders",
			Handler:    _Msg_GovRemoveCurrencyPairProviders_Handler,
		},
		{
			MethodName: "GovRemoveCurrencyDeviationThresholds",
			Handler:    _Msg_GovRemoveCurrencyDeviationThresholds_Handler,
		},
		{
			MethodName: "GovCancelUpdateParamPlan",
			Handler:    _Msg_GovCancelUpdateParamPlan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cheqd/oracle/v2/tx.proto",
}
