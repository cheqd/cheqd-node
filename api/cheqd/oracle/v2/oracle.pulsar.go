// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package oraclev2

import (
	fmt "fmt"
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_Params_3_list)(nil)

type _Params_3_list struct {
	list *[]*RewardBand
}

func (x *_Params_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Params_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Params_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*RewardBand)
	(*x.list)[i] = concreteValue
}

func (x *_Params_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*RewardBand)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Params_3_list) AppendMutable() protoreflect.Value {
	v := new(RewardBand)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Params_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Params_3_list) NewElement() protoreflect.Value {
	v := new(RewardBand)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Params_3_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_Params_5_list)(nil)

type _Params_5_list struct {
	list *[]*Denom
}

func (x *_Params_5_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Params_5_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Params_5_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Denom)
	(*x.list)[i] = concreteValue
}

func (x *_Params_5_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Denom)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Params_5_list) AppendMutable() protoreflect.Value {
	v := new(Denom)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Params_5_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Params_5_list) NewElement() protoreflect.Value {
	v := new(Denom)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Params_5_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_Params_9_list)(nil)

type _Params_9_list struct {
	list *[]*Denom
}

func (x *_Params_9_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Params_9_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Params_9_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Denom)
	(*x.list)[i] = concreteValue
}

func (x *_Params_9_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Denom)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Params_9_list) AppendMutable() protoreflect.Value {
	v := new(Denom)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Params_9_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Params_9_list) NewElement() protoreflect.Value {
	v := new(Denom)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Params_9_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_Params_14_list)(nil)

type _Params_14_list struct {
	list *[]*CurrencyPairProviders
}

func (x *_Params_14_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Params_14_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Params_14_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*CurrencyPairProviders)
	(*x.list)[i] = concreteValue
}

func (x *_Params_14_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*CurrencyPairProviders)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Params_14_list) AppendMutable() protoreflect.Value {
	v := new(CurrencyPairProviders)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Params_14_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Params_14_list) NewElement() protoreflect.Value {
	v := new(CurrencyPairProviders)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Params_14_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_Params_15_list)(nil)

type _Params_15_list struct {
	list *[]*CurrencyDeviationThreshold
}

func (x *_Params_15_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Params_15_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Params_15_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*CurrencyDeviationThreshold)
	(*x.list)[i] = concreteValue
}

func (x *_Params_15_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*CurrencyDeviationThreshold)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Params_15_list) AppendMutable() protoreflect.Value {
	v := new(CurrencyDeviationThreshold)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Params_15_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Params_15_list) NewElement() protoreflect.Value {
	v := new(CurrencyDeviationThreshold)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Params_15_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Params                               protoreflect.MessageDescriptor
	fd_Params_vote_period                   protoreflect.FieldDescriptor
	fd_Params_vote_threshold                protoreflect.FieldDescriptor
	fd_Params_reward_bands                  protoreflect.FieldDescriptor
	fd_Params_reward_distribution_window    protoreflect.FieldDescriptor
	fd_Params_accept_list                   protoreflect.FieldDescriptor
	fd_Params_slash_fraction                protoreflect.FieldDescriptor
	fd_Params_slash_window                  protoreflect.FieldDescriptor
	fd_Params_min_valid_per_window          protoreflect.FieldDescriptor
	fd_Params_mandatory_list                protoreflect.FieldDescriptor
	fd_Params_historic_stamp_period         protoreflect.FieldDescriptor
	fd_Params_median_stamp_period           protoreflect.FieldDescriptor
	fd_Params_maximum_price_stamps          protoreflect.FieldDescriptor
	fd_Params_maximum_median_stamps         protoreflect.FieldDescriptor
	fd_Params_currency_pair_providers       protoreflect.FieldDescriptor
	fd_Params_currency_deviation_thresholds protoreflect.FieldDescriptor
	fd_Params_usdc_ibc_denom                protoreflect.FieldDescriptor
)

func init() {
	file_cheqd_oracle_v2_oracle_proto_init()
	md_Params = File_cheqd_oracle_v2_oracle_proto.Messages().ByName("Params")
	fd_Params_vote_period = md_Params.Fields().ByName("vote_period")
	fd_Params_vote_threshold = md_Params.Fields().ByName("vote_threshold")
	fd_Params_reward_bands = md_Params.Fields().ByName("reward_bands")
	fd_Params_reward_distribution_window = md_Params.Fields().ByName("reward_distribution_window")
	fd_Params_accept_list = md_Params.Fields().ByName("accept_list")
	fd_Params_slash_fraction = md_Params.Fields().ByName("slash_fraction")
	fd_Params_slash_window = md_Params.Fields().ByName("slash_window")
	fd_Params_min_valid_per_window = md_Params.Fields().ByName("min_valid_per_window")
	fd_Params_mandatory_list = md_Params.Fields().ByName("mandatory_list")
	fd_Params_historic_stamp_period = md_Params.Fields().ByName("historic_stamp_period")
	fd_Params_median_stamp_period = md_Params.Fields().ByName("median_stamp_period")
	fd_Params_maximum_price_stamps = md_Params.Fields().ByName("maximum_price_stamps")
	fd_Params_maximum_median_stamps = md_Params.Fields().ByName("maximum_median_stamps")
	fd_Params_currency_pair_providers = md_Params.Fields().ByName("currency_pair_providers")
	fd_Params_currency_deviation_thresholds = md_Params.Fields().ByName("currency_deviation_thresholds")
	fd_Params_usdc_ibc_denom = md_Params.Fields().ByName("usdc_ibc_denom")
}

var _ protoreflect.Message = (*fastReflection_Params)(nil)

type fastReflection_Params Params

func (x *Params) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Params)(x)
}

func (x *Params) slowProtoReflect() protoreflect.Message {
	mi := &file_cheqd_oracle_v2_oracle_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Params_messageType fastReflection_Params_messageType
var _ protoreflect.MessageType = fastReflection_Params_messageType{}

type fastReflection_Params_messageType struct{}

func (x fastReflection_Params_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Params)(nil)
}
func (x fastReflection_Params_messageType) New() protoreflect.Message {
	return new(fastReflection_Params)
}
func (x fastReflection_Params_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Params) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Params) Type() protoreflect.MessageType {
	return _fastReflection_Params_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Params) New() protoreflect.Message {
	return new(fastReflection_Params)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Params) Interface() protoreflect.ProtoMessage {
	return (*Params)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Params) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.VotePeriod != uint64(0) {
		value := protoreflect.ValueOfUint64(x.VotePeriod)
		if !f(fd_Params_vote_period, value) {
			return
		}
	}
	if x.VoteThreshold != "" {
		value := protoreflect.ValueOfString(x.VoteThreshold)
		if !f(fd_Params_vote_threshold, value) {
			return
		}
	}
	if len(x.RewardBands) != 0 {
		value := protoreflect.ValueOfList(&_Params_3_list{list: &x.RewardBands})
		if !f(fd_Params_reward_bands, value) {
			return
		}
	}
	if x.RewardDistributionWindow != uint64(0) {
		value := protoreflect.ValueOfUint64(x.RewardDistributionWindow)
		if !f(fd_Params_reward_distribution_window, value) {
			return
		}
	}
	if len(x.AcceptList) != 0 {
		value := protoreflect.ValueOfList(&_Params_5_list{list: &x.AcceptList})
		if !f(fd_Params_accept_list, value) {
			return
		}
	}
	if x.SlashFraction != "" {
		value := protoreflect.ValueOfString(x.SlashFraction)
		if !f(fd_Params_slash_fraction, value) {
			return
		}
	}
	if x.SlashWindow != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SlashWindow)
		if !f(fd_Params_slash_window, value) {
			return
		}
	}
	if x.MinValidPerWindow != "" {
		value := protoreflect.ValueOfString(x.MinValidPerWindow)
		if !f(fd_Params_min_valid_per_window, value) {
			return
		}
	}
	if len(x.MandatoryList) != 0 {
		value := protoreflect.ValueOfList(&_Params_9_list{list: &x.MandatoryList})
		if !f(fd_Params_mandatory_list, value) {
			return
		}
	}
	if x.HistoricStampPeriod != uint64(0) {
		value := protoreflect.ValueOfUint64(x.HistoricStampPeriod)
		if !f(fd_Params_historic_stamp_period, value) {
			return
		}
	}
	if x.MedianStampPeriod != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MedianStampPeriod)
		if !f(fd_Params_median_stamp_period, value) {
			return
		}
	}
	if x.MaximumPriceStamps != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MaximumPriceStamps)
		if !f(fd_Params_maximum_price_stamps, value) {
			return
		}
	}
	if x.MaximumMedianStamps != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MaximumMedianStamps)
		if !f(fd_Params_maximum_median_stamps, value) {
			return
		}
	}
	if len(x.CurrencyPairProviders) != 0 {
		value := protoreflect.ValueOfList(&_Params_14_list{list: &x.CurrencyPairProviders})
		if !f(fd_Params_currency_pair_providers, value) {
			return
		}
	}
	if len(x.CurrencyDeviationThresholds) != 0 {
		value := protoreflect.ValueOfList(&_Params_15_list{list: &x.CurrencyDeviationThresholds})
		if !f(fd_Params_currency_deviation_thresholds, value) {
			return
		}
	}
	if x.UsdcIbcDenom != "" {
		value := protoreflect.ValueOfString(x.UsdcIbcDenom)
		if !f(fd_Params_usdc_ibc_denom, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Params) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "cheqd.oracle.v2.Params.vote_period":
		return x.VotePeriod != uint64(0)
	case "cheqd.oracle.v2.Params.vote_threshold":
		return x.VoteThreshold != ""
	case "cheqd.oracle.v2.Params.reward_bands":
		return len(x.RewardBands) != 0
	case "cheqd.oracle.v2.Params.reward_distribution_window":
		return x.RewardDistributionWindow != uint64(0)
	case "cheqd.oracle.v2.Params.accept_list":
		return len(x.AcceptList) != 0
	case "cheqd.oracle.v2.Params.slash_fraction":
		return x.SlashFraction != ""
	case "cheqd.oracle.v2.Params.slash_window":
		return x.SlashWindow != uint64(0)
	case "cheqd.oracle.v2.Params.min_valid_per_window":
		return x.MinValidPerWindow != ""
	case "cheqd.oracle.v2.Params.mandatory_list":
		return len(x.MandatoryList) != 0
	case "cheqd.oracle.v2.Params.historic_stamp_period":
		return x.HistoricStampPeriod != uint64(0)
	case "cheqd.oracle.v2.Params.median_stamp_period":
		return x.MedianStampPeriod != uint64(0)
	case "cheqd.oracle.v2.Params.maximum_price_stamps":
		return x.MaximumPriceStamps != uint64(0)
	case "cheqd.oracle.v2.Params.maximum_median_stamps":
		return x.MaximumMedianStamps != uint64(0)
	case "cheqd.oracle.v2.Params.currency_pair_providers":
		return len(x.CurrencyPairProviders) != 0
	case "cheqd.oracle.v2.Params.currency_deviation_thresholds":
		return len(x.CurrencyDeviationThresholds) != 0
	case "cheqd.oracle.v2.Params.usdc_ibc_denom":
		return x.UsdcIbcDenom != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.Params"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.Params does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "cheqd.oracle.v2.Params.vote_period":
		x.VotePeriod = uint64(0)
	case "cheqd.oracle.v2.Params.vote_threshold":
		x.VoteThreshold = ""
	case "cheqd.oracle.v2.Params.reward_bands":
		x.RewardBands = nil
	case "cheqd.oracle.v2.Params.reward_distribution_window":
		x.RewardDistributionWindow = uint64(0)
	case "cheqd.oracle.v2.Params.accept_list":
		x.AcceptList = nil
	case "cheqd.oracle.v2.Params.slash_fraction":
		x.SlashFraction = ""
	case "cheqd.oracle.v2.Params.slash_window":
		x.SlashWindow = uint64(0)
	case "cheqd.oracle.v2.Params.min_valid_per_window":
		x.MinValidPerWindow = ""
	case "cheqd.oracle.v2.Params.mandatory_list":
		x.MandatoryList = nil
	case "cheqd.oracle.v2.Params.historic_stamp_period":
		x.HistoricStampPeriod = uint64(0)
	case "cheqd.oracle.v2.Params.median_stamp_period":
		x.MedianStampPeriod = uint64(0)
	case "cheqd.oracle.v2.Params.maximum_price_stamps":
		x.MaximumPriceStamps = uint64(0)
	case "cheqd.oracle.v2.Params.maximum_median_stamps":
		x.MaximumMedianStamps = uint64(0)
	case "cheqd.oracle.v2.Params.currency_pair_providers":
		x.CurrencyPairProviders = nil
	case "cheqd.oracle.v2.Params.currency_deviation_thresholds":
		x.CurrencyDeviationThresholds = nil
	case "cheqd.oracle.v2.Params.usdc_ibc_denom":
		x.UsdcIbcDenom = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.Params"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.Params does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Params) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "cheqd.oracle.v2.Params.vote_period":
		value := x.VotePeriod
		return protoreflect.ValueOfUint64(value)
	case "cheqd.oracle.v2.Params.vote_threshold":
		value := x.VoteThreshold
		return protoreflect.ValueOfString(value)
	case "cheqd.oracle.v2.Params.reward_bands":
		if len(x.RewardBands) == 0 {
			return protoreflect.ValueOfList(&_Params_3_list{})
		}
		listValue := &_Params_3_list{list: &x.RewardBands}
		return protoreflect.ValueOfList(listValue)
	case "cheqd.oracle.v2.Params.reward_distribution_window":
		value := x.RewardDistributionWindow
		return protoreflect.ValueOfUint64(value)
	case "cheqd.oracle.v2.Params.accept_list":
		if len(x.AcceptList) == 0 {
			return protoreflect.ValueOfList(&_Params_5_list{})
		}
		listValue := &_Params_5_list{list: &x.AcceptList}
		return protoreflect.ValueOfList(listValue)
	case "cheqd.oracle.v2.Params.slash_fraction":
		value := x.SlashFraction
		return protoreflect.ValueOfString(value)
	case "cheqd.oracle.v2.Params.slash_window":
		value := x.SlashWindow
		return protoreflect.ValueOfUint64(value)
	case "cheqd.oracle.v2.Params.min_valid_per_window":
		value := x.MinValidPerWindow
		return protoreflect.ValueOfString(value)
	case "cheqd.oracle.v2.Params.mandatory_list":
		if len(x.MandatoryList) == 0 {
			return protoreflect.ValueOfList(&_Params_9_list{})
		}
		listValue := &_Params_9_list{list: &x.MandatoryList}
		return protoreflect.ValueOfList(listValue)
	case "cheqd.oracle.v2.Params.historic_stamp_period":
		value := x.HistoricStampPeriod
		return protoreflect.ValueOfUint64(value)
	case "cheqd.oracle.v2.Params.median_stamp_period":
		value := x.MedianStampPeriod
		return protoreflect.ValueOfUint64(value)
	case "cheqd.oracle.v2.Params.maximum_price_stamps":
		value := x.MaximumPriceStamps
		return protoreflect.ValueOfUint64(value)
	case "cheqd.oracle.v2.Params.maximum_median_stamps":
		value := x.MaximumMedianStamps
		return protoreflect.ValueOfUint64(value)
	case "cheqd.oracle.v2.Params.currency_pair_providers":
		if len(x.CurrencyPairProviders) == 0 {
			return protoreflect.ValueOfList(&_Params_14_list{})
		}
		listValue := &_Params_14_list{list: &x.CurrencyPairProviders}
		return protoreflect.ValueOfList(listValue)
	case "cheqd.oracle.v2.Params.currency_deviation_thresholds":
		if len(x.CurrencyDeviationThresholds) == 0 {
			return protoreflect.ValueOfList(&_Params_15_list{})
		}
		listValue := &_Params_15_list{list: &x.CurrencyDeviationThresholds}
		return protoreflect.ValueOfList(listValue)
	case "cheqd.oracle.v2.Params.usdc_ibc_denom":
		value := x.UsdcIbcDenom
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.Params"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.Params does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "cheqd.oracle.v2.Params.vote_period":
		x.VotePeriod = value.Uint()
	case "cheqd.oracle.v2.Params.vote_threshold":
		x.VoteThreshold = value.Interface().(string)
	case "cheqd.oracle.v2.Params.reward_bands":
		lv := value.List()
		clv := lv.(*_Params_3_list)
		x.RewardBands = *clv.list
	case "cheqd.oracle.v2.Params.reward_distribution_window":
		x.RewardDistributionWindow = value.Uint()
	case "cheqd.oracle.v2.Params.accept_list":
		lv := value.List()
		clv := lv.(*_Params_5_list)
		x.AcceptList = *clv.list
	case "cheqd.oracle.v2.Params.slash_fraction":
		x.SlashFraction = value.Interface().(string)
	case "cheqd.oracle.v2.Params.slash_window":
		x.SlashWindow = value.Uint()
	case "cheqd.oracle.v2.Params.min_valid_per_window":
		x.MinValidPerWindow = value.Interface().(string)
	case "cheqd.oracle.v2.Params.mandatory_list":
		lv := value.List()
		clv := lv.(*_Params_9_list)
		x.MandatoryList = *clv.list
	case "cheqd.oracle.v2.Params.historic_stamp_period":
		x.HistoricStampPeriod = value.Uint()
	case "cheqd.oracle.v2.Params.median_stamp_period":
		x.MedianStampPeriod = value.Uint()
	case "cheqd.oracle.v2.Params.maximum_price_stamps":
		x.MaximumPriceStamps = value.Uint()
	case "cheqd.oracle.v2.Params.maximum_median_stamps":
		x.MaximumMedianStamps = value.Uint()
	case "cheqd.oracle.v2.Params.currency_pair_providers":
		lv := value.List()
		clv := lv.(*_Params_14_list)
		x.CurrencyPairProviders = *clv.list
	case "cheqd.oracle.v2.Params.currency_deviation_thresholds":
		lv := value.List()
		clv := lv.(*_Params_15_list)
		x.CurrencyDeviationThresholds = *clv.list
	case "cheqd.oracle.v2.Params.usdc_ibc_denom":
		x.UsdcIbcDenom = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.Params"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.Params does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cheqd.oracle.v2.Params.reward_bands":
		if x.RewardBands == nil {
			x.RewardBands = []*RewardBand{}
		}
		value := &_Params_3_list{list: &x.RewardBands}
		return protoreflect.ValueOfList(value)
	case "cheqd.oracle.v2.Params.accept_list":
		if x.AcceptList == nil {
			x.AcceptList = []*Denom{}
		}
		value := &_Params_5_list{list: &x.AcceptList}
		return protoreflect.ValueOfList(value)
	case "cheqd.oracle.v2.Params.mandatory_list":
		if x.MandatoryList == nil {
			x.MandatoryList = []*Denom{}
		}
		value := &_Params_9_list{list: &x.MandatoryList}
		return protoreflect.ValueOfList(value)
	case "cheqd.oracle.v2.Params.currency_pair_providers":
		if x.CurrencyPairProviders == nil {
			x.CurrencyPairProviders = []*CurrencyPairProviders{}
		}
		value := &_Params_14_list{list: &x.CurrencyPairProviders}
		return protoreflect.ValueOfList(value)
	case "cheqd.oracle.v2.Params.currency_deviation_thresholds":
		if x.CurrencyDeviationThresholds == nil {
			x.CurrencyDeviationThresholds = []*CurrencyDeviationThreshold{}
		}
		value := &_Params_15_list{list: &x.CurrencyDeviationThresholds}
		return protoreflect.ValueOfList(value)
	case "cheqd.oracle.v2.Params.vote_period":
		panic(fmt.Errorf("field vote_period of message cheqd.oracle.v2.Params is not mutable"))
	case "cheqd.oracle.v2.Params.vote_threshold":
		panic(fmt.Errorf("field vote_threshold of message cheqd.oracle.v2.Params is not mutable"))
	case "cheqd.oracle.v2.Params.reward_distribution_window":
		panic(fmt.Errorf("field reward_distribution_window of message cheqd.oracle.v2.Params is not mutable"))
	case "cheqd.oracle.v2.Params.slash_fraction":
		panic(fmt.Errorf("field slash_fraction of message cheqd.oracle.v2.Params is not mutable"))
	case "cheqd.oracle.v2.Params.slash_window":
		panic(fmt.Errorf("field slash_window of message cheqd.oracle.v2.Params is not mutable"))
	case "cheqd.oracle.v2.Params.min_valid_per_window":
		panic(fmt.Errorf("field min_valid_per_window of message cheqd.oracle.v2.Params is not mutable"))
	case "cheqd.oracle.v2.Params.historic_stamp_period":
		panic(fmt.Errorf("field historic_stamp_period of message cheqd.oracle.v2.Params is not mutable"))
	case "cheqd.oracle.v2.Params.median_stamp_period":
		panic(fmt.Errorf("field median_stamp_period of message cheqd.oracle.v2.Params is not mutable"))
	case "cheqd.oracle.v2.Params.maximum_price_stamps":
		panic(fmt.Errorf("field maximum_price_stamps of message cheqd.oracle.v2.Params is not mutable"))
	case "cheqd.oracle.v2.Params.maximum_median_stamps":
		panic(fmt.Errorf("field maximum_median_stamps of message cheqd.oracle.v2.Params is not mutable"))
	case "cheqd.oracle.v2.Params.usdc_ibc_denom":
		panic(fmt.Errorf("field usdc_ibc_denom of message cheqd.oracle.v2.Params is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.Params"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.Params does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Params) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cheqd.oracle.v2.Params.vote_period":
		return protoreflect.ValueOfUint64(uint64(0))
	case "cheqd.oracle.v2.Params.vote_threshold":
		return protoreflect.ValueOfString("")
	case "cheqd.oracle.v2.Params.reward_bands":
		list := []*RewardBand{}
		return protoreflect.ValueOfList(&_Params_3_list{list: &list})
	case "cheqd.oracle.v2.Params.reward_distribution_window":
		return protoreflect.ValueOfUint64(uint64(0))
	case "cheqd.oracle.v2.Params.accept_list":
		list := []*Denom{}
		return protoreflect.ValueOfList(&_Params_5_list{list: &list})
	case "cheqd.oracle.v2.Params.slash_fraction":
		return protoreflect.ValueOfString("")
	case "cheqd.oracle.v2.Params.slash_window":
		return protoreflect.ValueOfUint64(uint64(0))
	case "cheqd.oracle.v2.Params.min_valid_per_window":
		return protoreflect.ValueOfString("")
	case "cheqd.oracle.v2.Params.mandatory_list":
		list := []*Denom{}
		return protoreflect.ValueOfList(&_Params_9_list{list: &list})
	case "cheqd.oracle.v2.Params.historic_stamp_period":
		return protoreflect.ValueOfUint64(uint64(0))
	case "cheqd.oracle.v2.Params.median_stamp_period":
		return protoreflect.ValueOfUint64(uint64(0))
	case "cheqd.oracle.v2.Params.maximum_price_stamps":
		return protoreflect.ValueOfUint64(uint64(0))
	case "cheqd.oracle.v2.Params.maximum_median_stamps":
		return protoreflect.ValueOfUint64(uint64(0))
	case "cheqd.oracle.v2.Params.currency_pair_providers":
		list := []*CurrencyPairProviders{}
		return protoreflect.ValueOfList(&_Params_14_list{list: &list})
	case "cheqd.oracle.v2.Params.currency_deviation_thresholds":
		list := []*CurrencyDeviationThreshold{}
		return protoreflect.ValueOfList(&_Params_15_list{list: &list})
	case "cheqd.oracle.v2.Params.usdc_ibc_denom":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.Params"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.Params does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Params) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in cheqd.oracle.v2.Params", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Params) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Params) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Params) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.VotePeriod != 0 {
			n += 1 + runtime.Sov(uint64(x.VotePeriod))
		}
		l = len(x.VoteThreshold)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.RewardBands) > 0 {
			for _, e := range x.RewardBands {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.RewardDistributionWindow != 0 {
			n += 1 + runtime.Sov(uint64(x.RewardDistributionWindow))
		}
		if len(x.AcceptList) > 0 {
			for _, e := range x.AcceptList {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.SlashFraction)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.SlashWindow != 0 {
			n += 1 + runtime.Sov(uint64(x.SlashWindow))
		}
		l = len(x.MinValidPerWindow)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.MandatoryList) > 0 {
			for _, e := range x.MandatoryList {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.HistoricStampPeriod != 0 {
			n += 1 + runtime.Sov(uint64(x.HistoricStampPeriod))
		}
		if x.MedianStampPeriod != 0 {
			n += 1 + runtime.Sov(uint64(x.MedianStampPeriod))
		}
		if x.MaximumPriceStamps != 0 {
			n += 1 + runtime.Sov(uint64(x.MaximumPriceStamps))
		}
		if x.MaximumMedianStamps != 0 {
			n += 1 + runtime.Sov(uint64(x.MaximumMedianStamps))
		}
		if len(x.CurrencyPairProviders) > 0 {
			for _, e := range x.CurrencyPairProviders {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.CurrencyDeviationThresholds) > 0 {
			for _, e := range x.CurrencyDeviationThresholds {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.UsdcIbcDenom)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.UsdcIbcDenom) > 0 {
			i -= len(x.UsdcIbcDenom)
			copy(dAtA[i:], x.UsdcIbcDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.UsdcIbcDenom)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
		if len(x.CurrencyDeviationThresholds) > 0 {
			for iNdEx := len(x.CurrencyDeviationThresholds) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.CurrencyDeviationThresholds[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x7a
			}
		}
		if len(x.CurrencyPairProviders) > 0 {
			for iNdEx := len(x.CurrencyPairProviders) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.CurrencyPairProviders[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x72
			}
		}
		if x.MaximumMedianStamps != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaximumMedianStamps))
			i--
			dAtA[i] = 0x68
		}
		if x.MaximumPriceStamps != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaximumPriceStamps))
			i--
			dAtA[i] = 0x60
		}
		if x.MedianStampPeriod != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MedianStampPeriod))
			i--
			dAtA[i] = 0x58
		}
		if x.HistoricStampPeriod != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.HistoricStampPeriod))
			i--
			dAtA[i] = 0x50
		}
		if len(x.MandatoryList) > 0 {
			for iNdEx := len(x.MandatoryList) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.MandatoryList[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x4a
			}
		}
		if len(x.MinValidPerWindow) > 0 {
			i -= len(x.MinValidPerWindow)
			copy(dAtA[i:], x.MinValidPerWindow)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MinValidPerWindow)))
			i--
			dAtA[i] = 0x42
		}
		if x.SlashWindow != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SlashWindow))
			i--
			dAtA[i] = 0x38
		}
		if len(x.SlashFraction) > 0 {
			i -= len(x.SlashFraction)
			copy(dAtA[i:], x.SlashFraction)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SlashFraction)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.AcceptList) > 0 {
			for iNdEx := len(x.AcceptList) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.AcceptList[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2a
			}
		}
		if x.RewardDistributionWindow != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RewardDistributionWindow))
			i--
			dAtA[i] = 0x20
		}
		if len(x.RewardBands) > 0 {
			for iNdEx := len(x.RewardBands) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.RewardBands[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.VoteThreshold) > 0 {
			i -= len(x.VoteThreshold)
			copy(dAtA[i:], x.VoteThreshold)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.VoteThreshold)))
			i--
			dAtA[i] = 0x12
		}
		if x.VotePeriod != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.VotePeriod))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VotePeriod", wireType)
				}
				x.VotePeriod = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.VotePeriod |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VoteThreshold", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.VoteThreshold = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RewardBands", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RewardBands = append(x.RewardBands, &RewardBand{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.RewardBands[len(x.RewardBands)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RewardDistributionWindow", wireType)
				}
				x.RewardDistributionWindow = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RewardDistributionWindow |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AcceptList", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AcceptList = append(x.AcceptList, &Denom{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.AcceptList[len(x.AcceptList)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SlashFraction", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SlashFraction = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SlashWindow", wireType)
				}
				x.SlashWindow = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SlashWindow |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinValidPerWindow", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MinValidPerWindow = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MandatoryList", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MandatoryList = append(x.MandatoryList, &Denom{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.MandatoryList[len(x.MandatoryList)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field HistoricStampPeriod", wireType)
				}
				x.HistoricStampPeriod = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.HistoricStampPeriod |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MedianStampPeriod", wireType)
				}
				x.MedianStampPeriod = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MedianStampPeriod |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 12:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaximumPriceStamps", wireType)
				}
				x.MaximumPriceStamps = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaximumPriceStamps |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaximumMedianStamps", wireType)
				}
				x.MaximumMedianStamps = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaximumMedianStamps |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 14:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CurrencyPairProviders", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CurrencyPairProviders = append(x.CurrencyPairProviders, &CurrencyPairProviders{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.CurrencyPairProviders[len(x.CurrencyPairProviders)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 15:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CurrencyDeviationThresholds", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CurrencyDeviationThresholds = append(x.CurrencyDeviationThresholds, &CurrencyDeviationThreshold{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.CurrencyDeviationThresholds[len(x.CurrencyDeviationThresholds)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 16:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UsdcIbcDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.UsdcIbcDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_Denom              protoreflect.MessageDescriptor
	fd_Denom_base_denom   protoreflect.FieldDescriptor
	fd_Denom_symbol_denom protoreflect.FieldDescriptor
	fd_Denom_exponent     protoreflect.FieldDescriptor
)

func init() {
	file_cheqd_oracle_v2_oracle_proto_init()
	md_Denom = File_cheqd_oracle_v2_oracle_proto.Messages().ByName("Denom")
	fd_Denom_base_denom = md_Denom.Fields().ByName("base_denom")
	fd_Denom_symbol_denom = md_Denom.Fields().ByName("symbol_denom")
	fd_Denom_exponent = md_Denom.Fields().ByName("exponent")
}

var _ protoreflect.Message = (*fastReflection_Denom)(nil)

type fastReflection_Denom Denom

func (x *Denom) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Denom)(x)
}

func (x *Denom) slowProtoReflect() protoreflect.Message {
	mi := &file_cheqd_oracle_v2_oracle_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Denom_messageType fastReflection_Denom_messageType
var _ protoreflect.MessageType = fastReflection_Denom_messageType{}

type fastReflection_Denom_messageType struct{}

func (x fastReflection_Denom_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Denom)(nil)
}
func (x fastReflection_Denom_messageType) New() protoreflect.Message {
	return new(fastReflection_Denom)
}
func (x fastReflection_Denom_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Denom
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Denom) Descriptor() protoreflect.MessageDescriptor {
	return md_Denom
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Denom) Type() protoreflect.MessageType {
	return _fastReflection_Denom_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Denom) New() protoreflect.Message {
	return new(fastReflection_Denom)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Denom) Interface() protoreflect.ProtoMessage {
	return (*Denom)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Denom) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.BaseDenom != "" {
		value := protoreflect.ValueOfString(x.BaseDenom)
		if !f(fd_Denom_base_denom, value) {
			return
		}
	}
	if x.SymbolDenom != "" {
		value := protoreflect.ValueOfString(x.SymbolDenom)
		if !f(fd_Denom_symbol_denom, value) {
			return
		}
	}
	if x.Exponent != uint32(0) {
		value := protoreflect.ValueOfUint32(x.Exponent)
		if !f(fd_Denom_exponent, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Denom) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "cheqd.oracle.v2.Denom.base_denom":
		return x.BaseDenom != ""
	case "cheqd.oracle.v2.Denom.symbol_denom":
		return x.SymbolDenom != ""
	case "cheqd.oracle.v2.Denom.exponent":
		return x.Exponent != uint32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.Denom"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.Denom does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Denom) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "cheqd.oracle.v2.Denom.base_denom":
		x.BaseDenom = ""
	case "cheqd.oracle.v2.Denom.symbol_denom":
		x.SymbolDenom = ""
	case "cheqd.oracle.v2.Denom.exponent":
		x.Exponent = uint32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.Denom"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.Denom does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Denom) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "cheqd.oracle.v2.Denom.base_denom":
		value := x.BaseDenom
		return protoreflect.ValueOfString(value)
	case "cheqd.oracle.v2.Denom.symbol_denom":
		value := x.SymbolDenom
		return protoreflect.ValueOfString(value)
	case "cheqd.oracle.v2.Denom.exponent":
		value := x.Exponent
		return protoreflect.ValueOfUint32(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.Denom"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.Denom does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Denom) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "cheqd.oracle.v2.Denom.base_denom":
		x.BaseDenom = value.Interface().(string)
	case "cheqd.oracle.v2.Denom.symbol_denom":
		x.SymbolDenom = value.Interface().(string)
	case "cheqd.oracle.v2.Denom.exponent":
		x.Exponent = uint32(value.Uint())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.Denom"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.Denom does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Denom) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cheqd.oracle.v2.Denom.base_denom":
		panic(fmt.Errorf("field base_denom of message cheqd.oracle.v2.Denom is not mutable"))
	case "cheqd.oracle.v2.Denom.symbol_denom":
		panic(fmt.Errorf("field symbol_denom of message cheqd.oracle.v2.Denom is not mutable"))
	case "cheqd.oracle.v2.Denom.exponent":
		panic(fmt.Errorf("field exponent of message cheqd.oracle.v2.Denom is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.Denom"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.Denom does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Denom) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cheqd.oracle.v2.Denom.base_denom":
		return protoreflect.ValueOfString("")
	case "cheqd.oracle.v2.Denom.symbol_denom":
		return protoreflect.ValueOfString("")
	case "cheqd.oracle.v2.Denom.exponent":
		return protoreflect.ValueOfUint32(uint32(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.Denom"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.Denom does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Denom) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in cheqd.oracle.v2.Denom", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Denom) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Denom) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Denom) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Denom) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Denom)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.BaseDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SymbolDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Exponent != 0 {
			n += 1 + runtime.Sov(uint64(x.Exponent))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Denom)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Exponent != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Exponent))
			i--
			dAtA[i] = 0x18
		}
		if len(x.SymbolDenom) > 0 {
			i -= len(x.SymbolDenom)
			copy(dAtA[i:], x.SymbolDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SymbolDenom)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.BaseDenom) > 0 {
			i -= len(x.BaseDenom)
			copy(dAtA[i:], x.BaseDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BaseDenom)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Denom)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Denom: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Denom: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BaseDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SymbolDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SymbolDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Exponent", wireType)
				}
				x.Exponent = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Exponent |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_RewardBand              protoreflect.MessageDescriptor
	fd_RewardBand_symbol_denom protoreflect.FieldDescriptor
	fd_RewardBand_reward_band  protoreflect.FieldDescriptor
)

func init() {
	file_cheqd_oracle_v2_oracle_proto_init()
	md_RewardBand = File_cheqd_oracle_v2_oracle_proto.Messages().ByName("RewardBand")
	fd_RewardBand_symbol_denom = md_RewardBand.Fields().ByName("symbol_denom")
	fd_RewardBand_reward_band = md_RewardBand.Fields().ByName("reward_band")
}

var _ protoreflect.Message = (*fastReflection_RewardBand)(nil)

type fastReflection_RewardBand RewardBand

func (x *RewardBand) ProtoReflect() protoreflect.Message {
	return (*fastReflection_RewardBand)(x)
}

func (x *RewardBand) slowProtoReflect() protoreflect.Message {
	mi := &file_cheqd_oracle_v2_oracle_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_RewardBand_messageType fastReflection_RewardBand_messageType
var _ protoreflect.MessageType = fastReflection_RewardBand_messageType{}

type fastReflection_RewardBand_messageType struct{}

func (x fastReflection_RewardBand_messageType) Zero() protoreflect.Message {
	return (*fastReflection_RewardBand)(nil)
}
func (x fastReflection_RewardBand_messageType) New() protoreflect.Message {
	return new(fastReflection_RewardBand)
}
func (x fastReflection_RewardBand_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_RewardBand
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_RewardBand) Descriptor() protoreflect.MessageDescriptor {
	return md_RewardBand
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_RewardBand) Type() protoreflect.MessageType {
	return _fastReflection_RewardBand_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_RewardBand) New() protoreflect.Message {
	return new(fastReflection_RewardBand)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_RewardBand) Interface() protoreflect.ProtoMessage {
	return (*RewardBand)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_RewardBand) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.SymbolDenom != "" {
		value := protoreflect.ValueOfString(x.SymbolDenom)
		if !f(fd_RewardBand_symbol_denom, value) {
			return
		}
	}
	if x.RewardBand != "" {
		value := protoreflect.ValueOfString(x.RewardBand)
		if !f(fd_RewardBand_reward_band, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_RewardBand) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "cheqd.oracle.v2.RewardBand.symbol_denom":
		return x.SymbolDenom != ""
	case "cheqd.oracle.v2.RewardBand.reward_band":
		return x.RewardBand != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.RewardBand"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.RewardBand does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RewardBand) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "cheqd.oracle.v2.RewardBand.symbol_denom":
		x.SymbolDenom = ""
	case "cheqd.oracle.v2.RewardBand.reward_band":
		x.RewardBand = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.RewardBand"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.RewardBand does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_RewardBand) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "cheqd.oracle.v2.RewardBand.symbol_denom":
		value := x.SymbolDenom
		return protoreflect.ValueOfString(value)
	case "cheqd.oracle.v2.RewardBand.reward_band":
		value := x.RewardBand
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.RewardBand"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.RewardBand does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RewardBand) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "cheqd.oracle.v2.RewardBand.symbol_denom":
		x.SymbolDenom = value.Interface().(string)
	case "cheqd.oracle.v2.RewardBand.reward_band":
		x.RewardBand = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.RewardBand"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.RewardBand does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RewardBand) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cheqd.oracle.v2.RewardBand.symbol_denom":
		panic(fmt.Errorf("field symbol_denom of message cheqd.oracle.v2.RewardBand is not mutable"))
	case "cheqd.oracle.v2.RewardBand.reward_band":
		panic(fmt.Errorf("field reward_band of message cheqd.oracle.v2.RewardBand is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.RewardBand"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.RewardBand does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_RewardBand) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cheqd.oracle.v2.RewardBand.symbol_denom":
		return protoreflect.ValueOfString("")
	case "cheqd.oracle.v2.RewardBand.reward_band":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.RewardBand"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.RewardBand does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_RewardBand) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in cheqd.oracle.v2.RewardBand", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_RewardBand) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RewardBand) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_RewardBand) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_RewardBand) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*RewardBand)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.SymbolDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.RewardBand)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*RewardBand)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.RewardBand) > 0 {
			i -= len(x.RewardBand)
			copy(dAtA[i:], x.RewardBand)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RewardBand)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.SymbolDenom) > 0 {
			i -= len(x.SymbolDenom)
			copy(dAtA[i:], x.SymbolDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SymbolDenom)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*RewardBand)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RewardBand: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RewardBand: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SymbolDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SymbolDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RewardBand", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RewardBand = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_AggregateExchangeRatePrevote              protoreflect.MessageDescriptor
	fd_AggregateExchangeRatePrevote_hash         protoreflect.FieldDescriptor
	fd_AggregateExchangeRatePrevote_voter        protoreflect.FieldDescriptor
	fd_AggregateExchangeRatePrevote_submit_block protoreflect.FieldDescriptor
)

func init() {
	file_cheqd_oracle_v2_oracle_proto_init()
	md_AggregateExchangeRatePrevote = File_cheqd_oracle_v2_oracle_proto.Messages().ByName("AggregateExchangeRatePrevote")
	fd_AggregateExchangeRatePrevote_hash = md_AggregateExchangeRatePrevote.Fields().ByName("hash")
	fd_AggregateExchangeRatePrevote_voter = md_AggregateExchangeRatePrevote.Fields().ByName("voter")
	fd_AggregateExchangeRatePrevote_submit_block = md_AggregateExchangeRatePrevote.Fields().ByName("submit_block")
}

var _ protoreflect.Message = (*fastReflection_AggregateExchangeRatePrevote)(nil)

type fastReflection_AggregateExchangeRatePrevote AggregateExchangeRatePrevote

func (x *AggregateExchangeRatePrevote) ProtoReflect() protoreflect.Message {
	return (*fastReflection_AggregateExchangeRatePrevote)(x)
}

func (x *AggregateExchangeRatePrevote) slowProtoReflect() protoreflect.Message {
	mi := &file_cheqd_oracle_v2_oracle_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_AggregateExchangeRatePrevote_messageType fastReflection_AggregateExchangeRatePrevote_messageType
var _ protoreflect.MessageType = fastReflection_AggregateExchangeRatePrevote_messageType{}

type fastReflection_AggregateExchangeRatePrevote_messageType struct{}

func (x fastReflection_AggregateExchangeRatePrevote_messageType) Zero() protoreflect.Message {
	return (*fastReflection_AggregateExchangeRatePrevote)(nil)
}
func (x fastReflection_AggregateExchangeRatePrevote_messageType) New() protoreflect.Message {
	return new(fastReflection_AggregateExchangeRatePrevote)
}
func (x fastReflection_AggregateExchangeRatePrevote_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_AggregateExchangeRatePrevote
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_AggregateExchangeRatePrevote) Descriptor() protoreflect.MessageDescriptor {
	return md_AggregateExchangeRatePrevote
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_AggregateExchangeRatePrevote) Type() protoreflect.MessageType {
	return _fastReflection_AggregateExchangeRatePrevote_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_AggregateExchangeRatePrevote) New() protoreflect.Message {
	return new(fastReflection_AggregateExchangeRatePrevote)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_AggregateExchangeRatePrevote) Interface() protoreflect.ProtoMessage {
	return (*AggregateExchangeRatePrevote)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_AggregateExchangeRatePrevote) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Hash != "" {
		value := protoreflect.ValueOfString(x.Hash)
		if !f(fd_AggregateExchangeRatePrevote_hash, value) {
			return
		}
	}
	if x.Voter != "" {
		value := protoreflect.ValueOfString(x.Voter)
		if !f(fd_AggregateExchangeRatePrevote_voter, value) {
			return
		}
	}
	if x.SubmitBlock != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SubmitBlock)
		if !f(fd_AggregateExchangeRatePrevote_submit_block, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_AggregateExchangeRatePrevote) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "cheqd.oracle.v2.AggregateExchangeRatePrevote.hash":
		return x.Hash != ""
	case "cheqd.oracle.v2.AggregateExchangeRatePrevote.voter":
		return x.Voter != ""
	case "cheqd.oracle.v2.AggregateExchangeRatePrevote.submit_block":
		return x.SubmitBlock != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.AggregateExchangeRatePrevote"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.AggregateExchangeRatePrevote does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AggregateExchangeRatePrevote) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "cheqd.oracle.v2.AggregateExchangeRatePrevote.hash":
		x.Hash = ""
	case "cheqd.oracle.v2.AggregateExchangeRatePrevote.voter":
		x.Voter = ""
	case "cheqd.oracle.v2.AggregateExchangeRatePrevote.submit_block":
		x.SubmitBlock = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.AggregateExchangeRatePrevote"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.AggregateExchangeRatePrevote does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_AggregateExchangeRatePrevote) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "cheqd.oracle.v2.AggregateExchangeRatePrevote.hash":
		value := x.Hash
		return protoreflect.ValueOfString(value)
	case "cheqd.oracle.v2.AggregateExchangeRatePrevote.voter":
		value := x.Voter
		return protoreflect.ValueOfString(value)
	case "cheqd.oracle.v2.AggregateExchangeRatePrevote.submit_block":
		value := x.SubmitBlock
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.AggregateExchangeRatePrevote"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.AggregateExchangeRatePrevote does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AggregateExchangeRatePrevote) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "cheqd.oracle.v2.AggregateExchangeRatePrevote.hash":
		x.Hash = value.Interface().(string)
	case "cheqd.oracle.v2.AggregateExchangeRatePrevote.voter":
		x.Voter = value.Interface().(string)
	case "cheqd.oracle.v2.AggregateExchangeRatePrevote.submit_block":
		x.SubmitBlock = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.AggregateExchangeRatePrevote"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.AggregateExchangeRatePrevote does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AggregateExchangeRatePrevote) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cheqd.oracle.v2.AggregateExchangeRatePrevote.hash":
		panic(fmt.Errorf("field hash of message cheqd.oracle.v2.AggregateExchangeRatePrevote is not mutable"))
	case "cheqd.oracle.v2.AggregateExchangeRatePrevote.voter":
		panic(fmt.Errorf("field voter of message cheqd.oracle.v2.AggregateExchangeRatePrevote is not mutable"))
	case "cheqd.oracle.v2.AggregateExchangeRatePrevote.submit_block":
		panic(fmt.Errorf("field submit_block of message cheqd.oracle.v2.AggregateExchangeRatePrevote is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.AggregateExchangeRatePrevote"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.AggregateExchangeRatePrevote does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_AggregateExchangeRatePrevote) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cheqd.oracle.v2.AggregateExchangeRatePrevote.hash":
		return protoreflect.ValueOfString("")
	case "cheqd.oracle.v2.AggregateExchangeRatePrevote.voter":
		return protoreflect.ValueOfString("")
	case "cheqd.oracle.v2.AggregateExchangeRatePrevote.submit_block":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.AggregateExchangeRatePrevote"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.AggregateExchangeRatePrevote does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_AggregateExchangeRatePrevote) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in cheqd.oracle.v2.AggregateExchangeRatePrevote", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_AggregateExchangeRatePrevote) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AggregateExchangeRatePrevote) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_AggregateExchangeRatePrevote) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_AggregateExchangeRatePrevote) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*AggregateExchangeRatePrevote)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Hash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Voter)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.SubmitBlock != 0 {
			n += 1 + runtime.Sov(uint64(x.SubmitBlock))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*AggregateExchangeRatePrevote)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.SubmitBlock != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SubmitBlock))
			i--
			dAtA[i] = 0x18
		}
		if len(x.Voter) > 0 {
			i -= len(x.Voter)
			copy(dAtA[i:], x.Voter)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Voter)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Hash) > 0 {
			i -= len(x.Hash)
			copy(dAtA[i:], x.Hash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Hash)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*AggregateExchangeRatePrevote)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AggregateExchangeRatePrevote: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AggregateExchangeRatePrevote: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Hash = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Voter = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SubmitBlock", wireType)
				}
				x.SubmitBlock = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SubmitBlock |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_AggregateExchangeRateVote_1_list)(nil)

type _AggregateExchangeRateVote_1_list struct {
	list *[]*v1beta1.DecCoin
}

func (x *_AggregateExchangeRateVote_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_AggregateExchangeRateVote_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_AggregateExchangeRateVote_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.DecCoin)
	(*x.list)[i] = concreteValue
}

func (x *_AggregateExchangeRateVote_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.DecCoin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_AggregateExchangeRateVote_1_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.DecCoin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AggregateExchangeRateVote_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_AggregateExchangeRateVote_1_list) NewElement() protoreflect.Value {
	v := new(v1beta1.DecCoin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AggregateExchangeRateVote_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_AggregateExchangeRateVote                protoreflect.MessageDescriptor
	fd_AggregateExchangeRateVote_exchange_rates protoreflect.FieldDescriptor
	fd_AggregateExchangeRateVote_voter          protoreflect.FieldDescriptor
)

func init() {
	file_cheqd_oracle_v2_oracle_proto_init()
	md_AggregateExchangeRateVote = File_cheqd_oracle_v2_oracle_proto.Messages().ByName("AggregateExchangeRateVote")
	fd_AggregateExchangeRateVote_exchange_rates = md_AggregateExchangeRateVote.Fields().ByName("exchange_rates")
	fd_AggregateExchangeRateVote_voter = md_AggregateExchangeRateVote.Fields().ByName("voter")
}

var _ protoreflect.Message = (*fastReflection_AggregateExchangeRateVote)(nil)

type fastReflection_AggregateExchangeRateVote AggregateExchangeRateVote

func (x *AggregateExchangeRateVote) ProtoReflect() protoreflect.Message {
	return (*fastReflection_AggregateExchangeRateVote)(x)
}

func (x *AggregateExchangeRateVote) slowProtoReflect() protoreflect.Message {
	mi := &file_cheqd_oracle_v2_oracle_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_AggregateExchangeRateVote_messageType fastReflection_AggregateExchangeRateVote_messageType
var _ protoreflect.MessageType = fastReflection_AggregateExchangeRateVote_messageType{}

type fastReflection_AggregateExchangeRateVote_messageType struct{}

func (x fastReflection_AggregateExchangeRateVote_messageType) Zero() protoreflect.Message {
	return (*fastReflection_AggregateExchangeRateVote)(nil)
}
func (x fastReflection_AggregateExchangeRateVote_messageType) New() protoreflect.Message {
	return new(fastReflection_AggregateExchangeRateVote)
}
func (x fastReflection_AggregateExchangeRateVote_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_AggregateExchangeRateVote
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_AggregateExchangeRateVote) Descriptor() protoreflect.MessageDescriptor {
	return md_AggregateExchangeRateVote
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_AggregateExchangeRateVote) Type() protoreflect.MessageType {
	return _fastReflection_AggregateExchangeRateVote_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_AggregateExchangeRateVote) New() protoreflect.Message {
	return new(fastReflection_AggregateExchangeRateVote)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_AggregateExchangeRateVote) Interface() protoreflect.ProtoMessage {
	return (*AggregateExchangeRateVote)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_AggregateExchangeRateVote) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.ExchangeRates) != 0 {
		value := protoreflect.ValueOfList(&_AggregateExchangeRateVote_1_list{list: &x.ExchangeRates})
		if !f(fd_AggregateExchangeRateVote_exchange_rates, value) {
			return
		}
	}
	if x.Voter != "" {
		value := protoreflect.ValueOfString(x.Voter)
		if !f(fd_AggregateExchangeRateVote_voter, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_AggregateExchangeRateVote) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "cheqd.oracle.v2.AggregateExchangeRateVote.exchange_rates":
		return len(x.ExchangeRates) != 0
	case "cheqd.oracle.v2.AggregateExchangeRateVote.voter":
		return x.Voter != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.AggregateExchangeRateVote"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.AggregateExchangeRateVote does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AggregateExchangeRateVote) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "cheqd.oracle.v2.AggregateExchangeRateVote.exchange_rates":
		x.ExchangeRates = nil
	case "cheqd.oracle.v2.AggregateExchangeRateVote.voter":
		x.Voter = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.AggregateExchangeRateVote"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.AggregateExchangeRateVote does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_AggregateExchangeRateVote) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "cheqd.oracle.v2.AggregateExchangeRateVote.exchange_rates":
		if len(x.ExchangeRates) == 0 {
			return protoreflect.ValueOfList(&_AggregateExchangeRateVote_1_list{})
		}
		listValue := &_AggregateExchangeRateVote_1_list{list: &x.ExchangeRates}
		return protoreflect.ValueOfList(listValue)
	case "cheqd.oracle.v2.AggregateExchangeRateVote.voter":
		value := x.Voter
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.AggregateExchangeRateVote"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.AggregateExchangeRateVote does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AggregateExchangeRateVote) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "cheqd.oracle.v2.AggregateExchangeRateVote.exchange_rates":
		lv := value.List()
		clv := lv.(*_AggregateExchangeRateVote_1_list)
		x.ExchangeRates = *clv.list
	case "cheqd.oracle.v2.AggregateExchangeRateVote.voter":
		x.Voter = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.AggregateExchangeRateVote"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.AggregateExchangeRateVote does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AggregateExchangeRateVote) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cheqd.oracle.v2.AggregateExchangeRateVote.exchange_rates":
		if x.ExchangeRates == nil {
			x.ExchangeRates = []*v1beta1.DecCoin{}
		}
		value := &_AggregateExchangeRateVote_1_list{list: &x.ExchangeRates}
		return protoreflect.ValueOfList(value)
	case "cheqd.oracle.v2.AggregateExchangeRateVote.voter":
		panic(fmt.Errorf("field voter of message cheqd.oracle.v2.AggregateExchangeRateVote is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.AggregateExchangeRateVote"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.AggregateExchangeRateVote does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_AggregateExchangeRateVote) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cheqd.oracle.v2.AggregateExchangeRateVote.exchange_rates":
		list := []*v1beta1.DecCoin{}
		return protoreflect.ValueOfList(&_AggregateExchangeRateVote_1_list{list: &list})
	case "cheqd.oracle.v2.AggregateExchangeRateVote.voter":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.AggregateExchangeRateVote"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.AggregateExchangeRateVote does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_AggregateExchangeRateVote) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in cheqd.oracle.v2.AggregateExchangeRateVote", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_AggregateExchangeRateVote) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AggregateExchangeRateVote) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_AggregateExchangeRateVote) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_AggregateExchangeRateVote) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*AggregateExchangeRateVote)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.ExchangeRates) > 0 {
			for _, e := range x.ExchangeRates {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.Voter)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*AggregateExchangeRateVote)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Voter) > 0 {
			i -= len(x.Voter)
			copy(dAtA[i:], x.Voter)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Voter)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.ExchangeRates) > 0 {
			for iNdEx := len(x.ExchangeRates) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.ExchangeRates[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*AggregateExchangeRateVote)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AggregateExchangeRateVote: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AggregateExchangeRateVote: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExchangeRates", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ExchangeRates = append(x.ExchangeRates, &v1beta1.DecCoin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ExchangeRates[len(x.ExchangeRates)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Voter = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_PriceStamp               protoreflect.MessageDescriptor
	fd_PriceStamp_exchange_rate protoreflect.FieldDescriptor
	fd_PriceStamp_block_num     protoreflect.FieldDescriptor
)

func init() {
	file_cheqd_oracle_v2_oracle_proto_init()
	md_PriceStamp = File_cheqd_oracle_v2_oracle_proto.Messages().ByName("PriceStamp")
	fd_PriceStamp_exchange_rate = md_PriceStamp.Fields().ByName("exchange_rate")
	fd_PriceStamp_block_num = md_PriceStamp.Fields().ByName("block_num")
}

var _ protoreflect.Message = (*fastReflection_PriceStamp)(nil)

type fastReflection_PriceStamp PriceStamp

func (x *PriceStamp) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PriceStamp)(x)
}

func (x *PriceStamp) slowProtoReflect() protoreflect.Message {
	mi := &file_cheqd_oracle_v2_oracle_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PriceStamp_messageType fastReflection_PriceStamp_messageType
var _ protoreflect.MessageType = fastReflection_PriceStamp_messageType{}

type fastReflection_PriceStamp_messageType struct{}

func (x fastReflection_PriceStamp_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PriceStamp)(nil)
}
func (x fastReflection_PriceStamp_messageType) New() protoreflect.Message {
	return new(fastReflection_PriceStamp)
}
func (x fastReflection_PriceStamp_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PriceStamp
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PriceStamp) Descriptor() protoreflect.MessageDescriptor {
	return md_PriceStamp
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PriceStamp) Type() protoreflect.MessageType {
	return _fastReflection_PriceStamp_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PriceStamp) New() protoreflect.Message {
	return new(fastReflection_PriceStamp)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PriceStamp) Interface() protoreflect.ProtoMessage {
	return (*PriceStamp)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PriceStamp) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ExchangeRate != nil {
		value := protoreflect.ValueOfMessage(x.ExchangeRate.ProtoReflect())
		if !f(fd_PriceStamp_exchange_rate, value) {
			return
		}
	}
	if x.BlockNum != uint64(0) {
		value := protoreflect.ValueOfUint64(x.BlockNum)
		if !f(fd_PriceStamp_block_num, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PriceStamp) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "cheqd.oracle.v2.PriceStamp.exchange_rate":
		return x.ExchangeRate != nil
	case "cheqd.oracle.v2.PriceStamp.block_num":
		return x.BlockNum != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.PriceStamp"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.PriceStamp does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PriceStamp) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "cheqd.oracle.v2.PriceStamp.exchange_rate":
		x.ExchangeRate = nil
	case "cheqd.oracle.v2.PriceStamp.block_num":
		x.BlockNum = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.PriceStamp"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.PriceStamp does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PriceStamp) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "cheqd.oracle.v2.PriceStamp.exchange_rate":
		value := x.ExchangeRate
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "cheqd.oracle.v2.PriceStamp.block_num":
		value := x.BlockNum
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.PriceStamp"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.PriceStamp does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PriceStamp) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "cheqd.oracle.v2.PriceStamp.exchange_rate":
		x.ExchangeRate = value.Message().Interface().(*v1beta1.DecCoin)
	case "cheqd.oracle.v2.PriceStamp.block_num":
		x.BlockNum = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.PriceStamp"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.PriceStamp does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PriceStamp) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cheqd.oracle.v2.PriceStamp.exchange_rate":
		if x.ExchangeRate == nil {
			x.ExchangeRate = new(v1beta1.DecCoin)
		}
		return protoreflect.ValueOfMessage(x.ExchangeRate.ProtoReflect())
	case "cheqd.oracle.v2.PriceStamp.block_num":
		panic(fmt.Errorf("field block_num of message cheqd.oracle.v2.PriceStamp is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.PriceStamp"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.PriceStamp does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PriceStamp) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cheqd.oracle.v2.PriceStamp.exchange_rate":
		m := new(v1beta1.DecCoin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "cheqd.oracle.v2.PriceStamp.block_num":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.PriceStamp"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.PriceStamp does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PriceStamp) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in cheqd.oracle.v2.PriceStamp", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PriceStamp) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PriceStamp) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PriceStamp) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PriceStamp) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PriceStamp)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.ExchangeRate != nil {
			l = options.Size(x.ExchangeRate)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.BlockNum != 0 {
			n += 1 + runtime.Sov(uint64(x.BlockNum))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PriceStamp)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.BlockNum != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BlockNum))
			i--
			dAtA[i] = 0x10
		}
		if x.ExchangeRate != nil {
			encoded, err := options.Marshal(x.ExchangeRate)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PriceStamp)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PriceStamp: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PriceStamp: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExchangeRate", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ExchangeRate == nil {
					x.ExchangeRate = &v1beta1.DecCoin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ExchangeRate); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockNum", wireType)
				}
				x.BlockNum = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BlockNum |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_ValidatorRewardSet_1_list)(nil)

type _ValidatorRewardSet_1_list struct {
	list *[]string
}

func (x *_ValidatorRewardSet_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ValidatorRewardSet_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_ValidatorRewardSet_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_ValidatorRewardSet_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_ValidatorRewardSet_1_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message ValidatorRewardSet at list field ValidatorSet as it is not of Message kind"))
}

func (x *_ValidatorRewardSet_1_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_ValidatorRewardSet_1_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_ValidatorRewardSet_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_ValidatorRewardSet               protoreflect.MessageDescriptor
	fd_ValidatorRewardSet_validator_set protoreflect.FieldDescriptor
)

func init() {
	file_cheqd_oracle_v2_oracle_proto_init()
	md_ValidatorRewardSet = File_cheqd_oracle_v2_oracle_proto.Messages().ByName("ValidatorRewardSet")
	fd_ValidatorRewardSet_validator_set = md_ValidatorRewardSet.Fields().ByName("validator_set")
}

var _ protoreflect.Message = (*fastReflection_ValidatorRewardSet)(nil)

type fastReflection_ValidatorRewardSet ValidatorRewardSet

func (x *ValidatorRewardSet) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ValidatorRewardSet)(x)
}

func (x *ValidatorRewardSet) slowProtoReflect() protoreflect.Message {
	mi := &file_cheqd_oracle_v2_oracle_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ValidatorRewardSet_messageType fastReflection_ValidatorRewardSet_messageType
var _ protoreflect.MessageType = fastReflection_ValidatorRewardSet_messageType{}

type fastReflection_ValidatorRewardSet_messageType struct{}

func (x fastReflection_ValidatorRewardSet_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ValidatorRewardSet)(nil)
}
func (x fastReflection_ValidatorRewardSet_messageType) New() protoreflect.Message {
	return new(fastReflection_ValidatorRewardSet)
}
func (x fastReflection_ValidatorRewardSet_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ValidatorRewardSet
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ValidatorRewardSet) Descriptor() protoreflect.MessageDescriptor {
	return md_ValidatorRewardSet
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ValidatorRewardSet) Type() protoreflect.MessageType {
	return _fastReflection_ValidatorRewardSet_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ValidatorRewardSet) New() protoreflect.Message {
	return new(fastReflection_ValidatorRewardSet)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ValidatorRewardSet) Interface() protoreflect.ProtoMessage {
	return (*ValidatorRewardSet)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ValidatorRewardSet) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.ValidatorSet) != 0 {
		value := protoreflect.ValueOfList(&_ValidatorRewardSet_1_list{list: &x.ValidatorSet})
		if !f(fd_ValidatorRewardSet_validator_set, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ValidatorRewardSet) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "cheqd.oracle.v2.ValidatorRewardSet.validator_set":
		return len(x.ValidatorSet) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.ValidatorRewardSet"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.ValidatorRewardSet does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValidatorRewardSet) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "cheqd.oracle.v2.ValidatorRewardSet.validator_set":
		x.ValidatorSet = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.ValidatorRewardSet"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.ValidatorRewardSet does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ValidatorRewardSet) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "cheqd.oracle.v2.ValidatorRewardSet.validator_set":
		if len(x.ValidatorSet) == 0 {
			return protoreflect.ValueOfList(&_ValidatorRewardSet_1_list{})
		}
		listValue := &_ValidatorRewardSet_1_list{list: &x.ValidatorSet}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.ValidatorRewardSet"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.ValidatorRewardSet does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValidatorRewardSet) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "cheqd.oracle.v2.ValidatorRewardSet.validator_set":
		lv := value.List()
		clv := lv.(*_ValidatorRewardSet_1_list)
		x.ValidatorSet = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.ValidatorRewardSet"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.ValidatorRewardSet does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValidatorRewardSet) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cheqd.oracle.v2.ValidatorRewardSet.validator_set":
		if x.ValidatorSet == nil {
			x.ValidatorSet = []string{}
		}
		value := &_ValidatorRewardSet_1_list{list: &x.ValidatorSet}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.ValidatorRewardSet"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.ValidatorRewardSet does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ValidatorRewardSet) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cheqd.oracle.v2.ValidatorRewardSet.validator_set":
		list := []string{}
		return protoreflect.ValueOfList(&_ValidatorRewardSet_1_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.ValidatorRewardSet"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.ValidatorRewardSet does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ValidatorRewardSet) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in cheqd.oracle.v2.ValidatorRewardSet", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ValidatorRewardSet) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValidatorRewardSet) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ValidatorRewardSet) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ValidatorRewardSet) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ValidatorRewardSet)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.ValidatorSet) > 0 {
			for _, s := range x.ValidatorSet {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ValidatorRewardSet)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ValidatorSet) > 0 {
			for iNdEx := len(x.ValidatorSet) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.ValidatorSet[iNdEx])
				copy(dAtA[i:], x.ValidatorSet[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ValidatorSet[iNdEx])))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ValidatorRewardSet)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ValidatorRewardSet: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ValidatorRewardSet: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidatorSet", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ValidatorSet = append(x.ValidatorSet, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_CurrencyPairProviders_3_list)(nil)

type _CurrencyPairProviders_3_list struct {
	list *[]*PairAddressProvider
}

func (x *_CurrencyPairProviders_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_CurrencyPairProviders_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_CurrencyPairProviders_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*PairAddressProvider)
	(*x.list)[i] = concreteValue
}

func (x *_CurrencyPairProviders_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*PairAddressProvider)
	*x.list = append(*x.list, concreteValue)
}

func (x *_CurrencyPairProviders_3_list) AppendMutable() protoreflect.Value {
	v := new(PairAddressProvider)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CurrencyPairProviders_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_CurrencyPairProviders_3_list) NewElement() protoreflect.Value {
	v := new(PairAddressProvider)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CurrencyPairProviders_3_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_CurrencyPairProviders_4_list)(nil)

type _CurrencyPairProviders_4_list struct {
	list *[]string
}

func (x *_CurrencyPairProviders_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_CurrencyPairProviders_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_CurrencyPairProviders_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_CurrencyPairProviders_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_CurrencyPairProviders_4_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message CurrencyPairProviders at list field Providers as it is not of Message kind"))
}

func (x *_CurrencyPairProviders_4_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_CurrencyPairProviders_4_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_CurrencyPairProviders_4_list) IsValid() bool {
	return x.list != nil
}

var (
	md_CurrencyPairProviders              protoreflect.MessageDescriptor
	fd_CurrencyPairProviders_base_denom   protoreflect.FieldDescriptor
	fd_CurrencyPairProviders_quote_denom  protoreflect.FieldDescriptor
	fd_CurrencyPairProviders_pair_address protoreflect.FieldDescriptor
	fd_CurrencyPairProviders_providers    protoreflect.FieldDescriptor
)

func init() {
	file_cheqd_oracle_v2_oracle_proto_init()
	md_CurrencyPairProviders = File_cheqd_oracle_v2_oracle_proto.Messages().ByName("CurrencyPairProviders")
	fd_CurrencyPairProviders_base_denom = md_CurrencyPairProviders.Fields().ByName("base_denom")
	fd_CurrencyPairProviders_quote_denom = md_CurrencyPairProviders.Fields().ByName("quote_denom")
	fd_CurrencyPairProviders_pair_address = md_CurrencyPairProviders.Fields().ByName("pair_address")
	fd_CurrencyPairProviders_providers = md_CurrencyPairProviders.Fields().ByName("providers")
}

var _ protoreflect.Message = (*fastReflection_CurrencyPairProviders)(nil)

type fastReflection_CurrencyPairProviders CurrencyPairProviders

func (x *CurrencyPairProviders) ProtoReflect() protoreflect.Message {
	return (*fastReflection_CurrencyPairProviders)(x)
}

func (x *CurrencyPairProviders) slowProtoReflect() protoreflect.Message {
	mi := &file_cheqd_oracle_v2_oracle_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_CurrencyPairProviders_messageType fastReflection_CurrencyPairProviders_messageType
var _ protoreflect.MessageType = fastReflection_CurrencyPairProviders_messageType{}

type fastReflection_CurrencyPairProviders_messageType struct{}

func (x fastReflection_CurrencyPairProviders_messageType) Zero() protoreflect.Message {
	return (*fastReflection_CurrencyPairProviders)(nil)
}
func (x fastReflection_CurrencyPairProviders_messageType) New() protoreflect.Message {
	return new(fastReflection_CurrencyPairProviders)
}
func (x fastReflection_CurrencyPairProviders_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_CurrencyPairProviders
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_CurrencyPairProviders) Descriptor() protoreflect.MessageDescriptor {
	return md_CurrencyPairProviders
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_CurrencyPairProviders) Type() protoreflect.MessageType {
	return _fastReflection_CurrencyPairProviders_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_CurrencyPairProviders) New() protoreflect.Message {
	return new(fastReflection_CurrencyPairProviders)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_CurrencyPairProviders) Interface() protoreflect.ProtoMessage {
	return (*CurrencyPairProviders)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_CurrencyPairProviders) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.BaseDenom != "" {
		value := protoreflect.ValueOfString(x.BaseDenom)
		if !f(fd_CurrencyPairProviders_base_denom, value) {
			return
		}
	}
	if x.QuoteDenom != "" {
		value := protoreflect.ValueOfString(x.QuoteDenom)
		if !f(fd_CurrencyPairProviders_quote_denom, value) {
			return
		}
	}
	if len(x.PairAddress) != 0 {
		value := protoreflect.ValueOfList(&_CurrencyPairProviders_3_list{list: &x.PairAddress})
		if !f(fd_CurrencyPairProviders_pair_address, value) {
			return
		}
	}
	if len(x.Providers) != 0 {
		value := protoreflect.ValueOfList(&_CurrencyPairProviders_4_list{list: &x.Providers})
		if !f(fd_CurrencyPairProviders_providers, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_CurrencyPairProviders) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "cheqd.oracle.v2.CurrencyPairProviders.base_denom":
		return x.BaseDenom != ""
	case "cheqd.oracle.v2.CurrencyPairProviders.quote_denom":
		return x.QuoteDenom != ""
	case "cheqd.oracle.v2.CurrencyPairProviders.pair_address":
		return len(x.PairAddress) != 0
	case "cheqd.oracle.v2.CurrencyPairProviders.providers":
		return len(x.Providers) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.CurrencyPairProviders"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.CurrencyPairProviders does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CurrencyPairProviders) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "cheqd.oracle.v2.CurrencyPairProviders.base_denom":
		x.BaseDenom = ""
	case "cheqd.oracle.v2.CurrencyPairProviders.quote_denom":
		x.QuoteDenom = ""
	case "cheqd.oracle.v2.CurrencyPairProviders.pair_address":
		x.PairAddress = nil
	case "cheqd.oracle.v2.CurrencyPairProviders.providers":
		x.Providers = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.CurrencyPairProviders"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.CurrencyPairProviders does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_CurrencyPairProviders) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "cheqd.oracle.v2.CurrencyPairProviders.base_denom":
		value := x.BaseDenom
		return protoreflect.ValueOfString(value)
	case "cheqd.oracle.v2.CurrencyPairProviders.quote_denom":
		value := x.QuoteDenom
		return protoreflect.ValueOfString(value)
	case "cheqd.oracle.v2.CurrencyPairProviders.pair_address":
		if len(x.PairAddress) == 0 {
			return protoreflect.ValueOfList(&_CurrencyPairProviders_3_list{})
		}
		listValue := &_CurrencyPairProviders_3_list{list: &x.PairAddress}
		return protoreflect.ValueOfList(listValue)
	case "cheqd.oracle.v2.CurrencyPairProviders.providers":
		if len(x.Providers) == 0 {
			return protoreflect.ValueOfList(&_CurrencyPairProviders_4_list{})
		}
		listValue := &_CurrencyPairProviders_4_list{list: &x.Providers}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.CurrencyPairProviders"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.CurrencyPairProviders does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CurrencyPairProviders) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "cheqd.oracle.v2.CurrencyPairProviders.base_denom":
		x.BaseDenom = value.Interface().(string)
	case "cheqd.oracle.v2.CurrencyPairProviders.quote_denom":
		x.QuoteDenom = value.Interface().(string)
	case "cheqd.oracle.v2.CurrencyPairProviders.pair_address":
		lv := value.List()
		clv := lv.(*_CurrencyPairProviders_3_list)
		x.PairAddress = *clv.list
	case "cheqd.oracle.v2.CurrencyPairProviders.providers":
		lv := value.List()
		clv := lv.(*_CurrencyPairProviders_4_list)
		x.Providers = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.CurrencyPairProviders"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.CurrencyPairProviders does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CurrencyPairProviders) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cheqd.oracle.v2.CurrencyPairProviders.pair_address":
		if x.PairAddress == nil {
			x.PairAddress = []*PairAddressProvider{}
		}
		value := &_CurrencyPairProviders_3_list{list: &x.PairAddress}
		return protoreflect.ValueOfList(value)
	case "cheqd.oracle.v2.CurrencyPairProviders.providers":
		if x.Providers == nil {
			x.Providers = []string{}
		}
		value := &_CurrencyPairProviders_4_list{list: &x.Providers}
		return protoreflect.ValueOfList(value)
	case "cheqd.oracle.v2.CurrencyPairProviders.base_denom":
		panic(fmt.Errorf("field base_denom of message cheqd.oracle.v2.CurrencyPairProviders is not mutable"))
	case "cheqd.oracle.v2.CurrencyPairProviders.quote_denom":
		panic(fmt.Errorf("field quote_denom of message cheqd.oracle.v2.CurrencyPairProviders is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.CurrencyPairProviders"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.CurrencyPairProviders does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_CurrencyPairProviders) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cheqd.oracle.v2.CurrencyPairProviders.base_denom":
		return protoreflect.ValueOfString("")
	case "cheqd.oracle.v2.CurrencyPairProviders.quote_denom":
		return protoreflect.ValueOfString("")
	case "cheqd.oracle.v2.CurrencyPairProviders.pair_address":
		list := []*PairAddressProvider{}
		return protoreflect.ValueOfList(&_CurrencyPairProviders_3_list{list: &list})
	case "cheqd.oracle.v2.CurrencyPairProviders.providers":
		list := []string{}
		return protoreflect.ValueOfList(&_CurrencyPairProviders_4_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.CurrencyPairProviders"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.CurrencyPairProviders does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_CurrencyPairProviders) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in cheqd.oracle.v2.CurrencyPairProviders", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_CurrencyPairProviders) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CurrencyPairProviders) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_CurrencyPairProviders) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_CurrencyPairProviders) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*CurrencyPairProviders)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.BaseDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.QuoteDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.PairAddress) > 0 {
			for _, e := range x.PairAddress {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Providers) > 0 {
			for _, s := range x.Providers {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*CurrencyPairProviders)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Providers) > 0 {
			for iNdEx := len(x.Providers) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Providers[iNdEx])
				copy(dAtA[i:], x.Providers[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Providers[iNdEx])))
				i--
				dAtA[i] = 0x22
			}
		}
		if len(x.PairAddress) > 0 {
			for iNdEx := len(x.PairAddress) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.PairAddress[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.QuoteDenom) > 0 {
			i -= len(x.QuoteDenom)
			copy(dAtA[i:], x.QuoteDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.QuoteDenom)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.BaseDenom) > 0 {
			i -= len(x.BaseDenom)
			copy(dAtA[i:], x.BaseDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BaseDenom)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*CurrencyPairProviders)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CurrencyPairProviders: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CurrencyPairProviders: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BaseDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field QuoteDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.QuoteDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PairAddress", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PairAddress = append(x.PairAddress, &PairAddressProvider{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PairAddress[len(x.PairAddress)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Providers", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Providers = append(x.Providers, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_PairAddressProvider                  protoreflect.MessageDescriptor
	fd_PairAddressProvider_address          protoreflect.FieldDescriptor
	fd_PairAddressProvider_address_provider protoreflect.FieldDescriptor
)

func init() {
	file_cheqd_oracle_v2_oracle_proto_init()
	md_PairAddressProvider = File_cheqd_oracle_v2_oracle_proto.Messages().ByName("PairAddressProvider")
	fd_PairAddressProvider_address = md_PairAddressProvider.Fields().ByName("address")
	fd_PairAddressProvider_address_provider = md_PairAddressProvider.Fields().ByName("address_provider")
}

var _ protoreflect.Message = (*fastReflection_PairAddressProvider)(nil)

type fastReflection_PairAddressProvider PairAddressProvider

func (x *PairAddressProvider) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PairAddressProvider)(x)
}

func (x *PairAddressProvider) slowProtoReflect() protoreflect.Message {
	mi := &file_cheqd_oracle_v2_oracle_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PairAddressProvider_messageType fastReflection_PairAddressProvider_messageType
var _ protoreflect.MessageType = fastReflection_PairAddressProvider_messageType{}

type fastReflection_PairAddressProvider_messageType struct{}

func (x fastReflection_PairAddressProvider_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PairAddressProvider)(nil)
}
func (x fastReflection_PairAddressProvider_messageType) New() protoreflect.Message {
	return new(fastReflection_PairAddressProvider)
}
func (x fastReflection_PairAddressProvider_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PairAddressProvider
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PairAddressProvider) Descriptor() protoreflect.MessageDescriptor {
	return md_PairAddressProvider
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PairAddressProvider) Type() protoreflect.MessageType {
	return _fastReflection_PairAddressProvider_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PairAddressProvider) New() protoreflect.Message {
	return new(fastReflection_PairAddressProvider)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PairAddressProvider) Interface() protoreflect.ProtoMessage {
	return (*PairAddressProvider)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PairAddressProvider) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Address != "" {
		value := protoreflect.ValueOfString(x.Address)
		if !f(fd_PairAddressProvider_address, value) {
			return
		}
	}
	if x.AddressProvider != "" {
		value := protoreflect.ValueOfString(x.AddressProvider)
		if !f(fd_PairAddressProvider_address_provider, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PairAddressProvider) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "cheqd.oracle.v2.PairAddressProvider.address":
		return x.Address != ""
	case "cheqd.oracle.v2.PairAddressProvider.address_provider":
		return x.AddressProvider != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.PairAddressProvider"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.PairAddressProvider does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PairAddressProvider) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "cheqd.oracle.v2.PairAddressProvider.address":
		x.Address = ""
	case "cheqd.oracle.v2.PairAddressProvider.address_provider":
		x.AddressProvider = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.PairAddressProvider"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.PairAddressProvider does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PairAddressProvider) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "cheqd.oracle.v2.PairAddressProvider.address":
		value := x.Address
		return protoreflect.ValueOfString(value)
	case "cheqd.oracle.v2.PairAddressProvider.address_provider":
		value := x.AddressProvider
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.PairAddressProvider"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.PairAddressProvider does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PairAddressProvider) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "cheqd.oracle.v2.PairAddressProvider.address":
		x.Address = value.Interface().(string)
	case "cheqd.oracle.v2.PairAddressProvider.address_provider":
		x.AddressProvider = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.PairAddressProvider"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.PairAddressProvider does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PairAddressProvider) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cheqd.oracle.v2.PairAddressProvider.address":
		panic(fmt.Errorf("field address of message cheqd.oracle.v2.PairAddressProvider is not mutable"))
	case "cheqd.oracle.v2.PairAddressProvider.address_provider":
		panic(fmt.Errorf("field address_provider of message cheqd.oracle.v2.PairAddressProvider is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.PairAddressProvider"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.PairAddressProvider does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PairAddressProvider) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cheqd.oracle.v2.PairAddressProvider.address":
		return protoreflect.ValueOfString("")
	case "cheqd.oracle.v2.PairAddressProvider.address_provider":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.PairAddressProvider"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.PairAddressProvider does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PairAddressProvider) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in cheqd.oracle.v2.PairAddressProvider", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PairAddressProvider) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PairAddressProvider) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PairAddressProvider) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PairAddressProvider) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PairAddressProvider)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Address)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.AddressProvider)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PairAddressProvider)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.AddressProvider) > 0 {
			i -= len(x.AddressProvider)
			copy(dAtA[i:], x.AddressProvider)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AddressProvider)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Address) > 0 {
			i -= len(x.Address)
			copy(dAtA[i:], x.Address)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Address)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PairAddressProvider)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PairAddressProvider: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PairAddressProvider: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Address = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AddressProvider", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AddressProvider = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_CurrencyDeviationThreshold            protoreflect.MessageDescriptor
	fd_CurrencyDeviationThreshold_base_denom protoreflect.FieldDescriptor
	fd_CurrencyDeviationThreshold_threshold  protoreflect.FieldDescriptor
)

func init() {
	file_cheqd_oracle_v2_oracle_proto_init()
	md_CurrencyDeviationThreshold = File_cheqd_oracle_v2_oracle_proto.Messages().ByName("CurrencyDeviationThreshold")
	fd_CurrencyDeviationThreshold_base_denom = md_CurrencyDeviationThreshold.Fields().ByName("base_denom")
	fd_CurrencyDeviationThreshold_threshold = md_CurrencyDeviationThreshold.Fields().ByName("threshold")
}

var _ protoreflect.Message = (*fastReflection_CurrencyDeviationThreshold)(nil)

type fastReflection_CurrencyDeviationThreshold CurrencyDeviationThreshold

func (x *CurrencyDeviationThreshold) ProtoReflect() protoreflect.Message {
	return (*fastReflection_CurrencyDeviationThreshold)(x)
}

func (x *CurrencyDeviationThreshold) slowProtoReflect() protoreflect.Message {
	mi := &file_cheqd_oracle_v2_oracle_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_CurrencyDeviationThreshold_messageType fastReflection_CurrencyDeviationThreshold_messageType
var _ protoreflect.MessageType = fastReflection_CurrencyDeviationThreshold_messageType{}

type fastReflection_CurrencyDeviationThreshold_messageType struct{}

func (x fastReflection_CurrencyDeviationThreshold_messageType) Zero() protoreflect.Message {
	return (*fastReflection_CurrencyDeviationThreshold)(nil)
}
func (x fastReflection_CurrencyDeviationThreshold_messageType) New() protoreflect.Message {
	return new(fastReflection_CurrencyDeviationThreshold)
}
func (x fastReflection_CurrencyDeviationThreshold_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_CurrencyDeviationThreshold
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_CurrencyDeviationThreshold) Descriptor() protoreflect.MessageDescriptor {
	return md_CurrencyDeviationThreshold
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_CurrencyDeviationThreshold) Type() protoreflect.MessageType {
	return _fastReflection_CurrencyDeviationThreshold_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_CurrencyDeviationThreshold) New() protoreflect.Message {
	return new(fastReflection_CurrencyDeviationThreshold)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_CurrencyDeviationThreshold) Interface() protoreflect.ProtoMessage {
	return (*CurrencyDeviationThreshold)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_CurrencyDeviationThreshold) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.BaseDenom != "" {
		value := protoreflect.ValueOfString(x.BaseDenom)
		if !f(fd_CurrencyDeviationThreshold_base_denom, value) {
			return
		}
	}
	if x.Threshold != "" {
		value := protoreflect.ValueOfString(x.Threshold)
		if !f(fd_CurrencyDeviationThreshold_threshold, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_CurrencyDeviationThreshold) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "cheqd.oracle.v2.CurrencyDeviationThreshold.base_denom":
		return x.BaseDenom != ""
	case "cheqd.oracle.v2.CurrencyDeviationThreshold.threshold":
		return x.Threshold != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.CurrencyDeviationThreshold"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.CurrencyDeviationThreshold does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CurrencyDeviationThreshold) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "cheqd.oracle.v2.CurrencyDeviationThreshold.base_denom":
		x.BaseDenom = ""
	case "cheqd.oracle.v2.CurrencyDeviationThreshold.threshold":
		x.Threshold = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.CurrencyDeviationThreshold"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.CurrencyDeviationThreshold does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_CurrencyDeviationThreshold) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "cheqd.oracle.v2.CurrencyDeviationThreshold.base_denom":
		value := x.BaseDenom
		return protoreflect.ValueOfString(value)
	case "cheqd.oracle.v2.CurrencyDeviationThreshold.threshold":
		value := x.Threshold
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.CurrencyDeviationThreshold"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.CurrencyDeviationThreshold does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CurrencyDeviationThreshold) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "cheqd.oracle.v2.CurrencyDeviationThreshold.base_denom":
		x.BaseDenom = value.Interface().(string)
	case "cheqd.oracle.v2.CurrencyDeviationThreshold.threshold":
		x.Threshold = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.CurrencyDeviationThreshold"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.CurrencyDeviationThreshold does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CurrencyDeviationThreshold) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cheqd.oracle.v2.CurrencyDeviationThreshold.base_denom":
		panic(fmt.Errorf("field base_denom of message cheqd.oracle.v2.CurrencyDeviationThreshold is not mutable"))
	case "cheqd.oracle.v2.CurrencyDeviationThreshold.threshold":
		panic(fmt.Errorf("field threshold of message cheqd.oracle.v2.CurrencyDeviationThreshold is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.CurrencyDeviationThreshold"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.CurrencyDeviationThreshold does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_CurrencyDeviationThreshold) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cheqd.oracle.v2.CurrencyDeviationThreshold.base_denom":
		return protoreflect.ValueOfString("")
	case "cheqd.oracle.v2.CurrencyDeviationThreshold.threshold":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.CurrencyDeviationThreshold"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.CurrencyDeviationThreshold does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_CurrencyDeviationThreshold) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in cheqd.oracle.v2.CurrencyDeviationThreshold", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_CurrencyDeviationThreshold) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CurrencyDeviationThreshold) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_CurrencyDeviationThreshold) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_CurrencyDeviationThreshold) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*CurrencyDeviationThreshold)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.BaseDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Threshold)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*CurrencyDeviationThreshold)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Threshold) > 0 {
			i -= len(x.Threshold)
			copy(dAtA[i:], x.Threshold)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Threshold)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.BaseDenom) > 0 {
			i -= len(x.BaseDenom)
			copy(dAtA[i:], x.BaseDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BaseDenom)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*CurrencyDeviationThreshold)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CurrencyDeviationThreshold: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CurrencyDeviationThreshold: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BaseDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Threshold = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_ParamUpdatePlan_1_list)(nil)

type _ParamUpdatePlan_1_list struct {
	list *[]string
}

func (x *_ParamUpdatePlan_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ParamUpdatePlan_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_ParamUpdatePlan_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_ParamUpdatePlan_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_ParamUpdatePlan_1_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message ParamUpdatePlan at list field Keys as it is not of Message kind"))
}

func (x *_ParamUpdatePlan_1_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_ParamUpdatePlan_1_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_ParamUpdatePlan_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_ParamUpdatePlan         protoreflect.MessageDescriptor
	fd_ParamUpdatePlan_keys    protoreflect.FieldDescriptor
	fd_ParamUpdatePlan_height  protoreflect.FieldDescriptor
	fd_ParamUpdatePlan_changes protoreflect.FieldDescriptor
)

func init() {
	file_cheqd_oracle_v2_oracle_proto_init()
	md_ParamUpdatePlan = File_cheqd_oracle_v2_oracle_proto.Messages().ByName("ParamUpdatePlan")
	fd_ParamUpdatePlan_keys = md_ParamUpdatePlan.Fields().ByName("keys")
	fd_ParamUpdatePlan_height = md_ParamUpdatePlan.Fields().ByName("height")
	fd_ParamUpdatePlan_changes = md_ParamUpdatePlan.Fields().ByName("changes")
}

var _ protoreflect.Message = (*fastReflection_ParamUpdatePlan)(nil)

type fastReflection_ParamUpdatePlan ParamUpdatePlan

func (x *ParamUpdatePlan) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ParamUpdatePlan)(x)
}

func (x *ParamUpdatePlan) slowProtoReflect() protoreflect.Message {
	mi := &file_cheqd_oracle_v2_oracle_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ParamUpdatePlan_messageType fastReflection_ParamUpdatePlan_messageType
var _ protoreflect.MessageType = fastReflection_ParamUpdatePlan_messageType{}

type fastReflection_ParamUpdatePlan_messageType struct{}

func (x fastReflection_ParamUpdatePlan_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ParamUpdatePlan)(nil)
}
func (x fastReflection_ParamUpdatePlan_messageType) New() protoreflect.Message {
	return new(fastReflection_ParamUpdatePlan)
}
func (x fastReflection_ParamUpdatePlan_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ParamUpdatePlan
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ParamUpdatePlan) Descriptor() protoreflect.MessageDescriptor {
	return md_ParamUpdatePlan
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ParamUpdatePlan) Type() protoreflect.MessageType {
	return _fastReflection_ParamUpdatePlan_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ParamUpdatePlan) New() protoreflect.Message {
	return new(fastReflection_ParamUpdatePlan)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ParamUpdatePlan) Interface() protoreflect.ProtoMessage {
	return (*ParamUpdatePlan)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ParamUpdatePlan) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.Keys) != 0 {
		value := protoreflect.ValueOfList(&_ParamUpdatePlan_1_list{list: &x.Keys})
		if !f(fd_ParamUpdatePlan_keys, value) {
			return
		}
	}
	if x.Height != int64(0) {
		value := protoreflect.ValueOfInt64(x.Height)
		if !f(fd_ParamUpdatePlan_height, value) {
			return
		}
	}
	if x.Changes != nil {
		value := protoreflect.ValueOfMessage(x.Changes.ProtoReflect())
		if !f(fd_ParamUpdatePlan_changes, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ParamUpdatePlan) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "cheqd.oracle.v2.ParamUpdatePlan.keys":
		return len(x.Keys) != 0
	case "cheqd.oracle.v2.ParamUpdatePlan.height":
		return x.Height != int64(0)
	case "cheqd.oracle.v2.ParamUpdatePlan.changes":
		return x.Changes != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.ParamUpdatePlan"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.ParamUpdatePlan does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ParamUpdatePlan) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "cheqd.oracle.v2.ParamUpdatePlan.keys":
		x.Keys = nil
	case "cheqd.oracle.v2.ParamUpdatePlan.height":
		x.Height = int64(0)
	case "cheqd.oracle.v2.ParamUpdatePlan.changes":
		x.Changes = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.ParamUpdatePlan"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.ParamUpdatePlan does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ParamUpdatePlan) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "cheqd.oracle.v2.ParamUpdatePlan.keys":
		if len(x.Keys) == 0 {
			return protoreflect.ValueOfList(&_ParamUpdatePlan_1_list{})
		}
		listValue := &_ParamUpdatePlan_1_list{list: &x.Keys}
		return protoreflect.ValueOfList(listValue)
	case "cheqd.oracle.v2.ParamUpdatePlan.height":
		value := x.Height
		return protoreflect.ValueOfInt64(value)
	case "cheqd.oracle.v2.ParamUpdatePlan.changes":
		value := x.Changes
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.ParamUpdatePlan"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.ParamUpdatePlan does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ParamUpdatePlan) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "cheqd.oracle.v2.ParamUpdatePlan.keys":
		lv := value.List()
		clv := lv.(*_ParamUpdatePlan_1_list)
		x.Keys = *clv.list
	case "cheqd.oracle.v2.ParamUpdatePlan.height":
		x.Height = value.Int()
	case "cheqd.oracle.v2.ParamUpdatePlan.changes":
		x.Changes = value.Message().Interface().(*Params)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.ParamUpdatePlan"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.ParamUpdatePlan does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ParamUpdatePlan) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cheqd.oracle.v2.ParamUpdatePlan.keys":
		if x.Keys == nil {
			x.Keys = []string{}
		}
		value := &_ParamUpdatePlan_1_list{list: &x.Keys}
		return protoreflect.ValueOfList(value)
	case "cheqd.oracle.v2.ParamUpdatePlan.changes":
		if x.Changes == nil {
			x.Changes = new(Params)
		}
		return protoreflect.ValueOfMessage(x.Changes.ProtoReflect())
	case "cheqd.oracle.v2.ParamUpdatePlan.height":
		panic(fmt.Errorf("field height of message cheqd.oracle.v2.ParamUpdatePlan is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.ParamUpdatePlan"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.ParamUpdatePlan does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ParamUpdatePlan) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cheqd.oracle.v2.ParamUpdatePlan.keys":
		list := []string{}
		return protoreflect.ValueOfList(&_ParamUpdatePlan_1_list{list: &list})
	case "cheqd.oracle.v2.ParamUpdatePlan.height":
		return protoreflect.ValueOfInt64(int64(0))
	case "cheqd.oracle.v2.ParamUpdatePlan.changes":
		m := new(Params)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cheqd.oracle.v2.ParamUpdatePlan"))
		}
		panic(fmt.Errorf("message cheqd.oracle.v2.ParamUpdatePlan does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ParamUpdatePlan) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in cheqd.oracle.v2.ParamUpdatePlan", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ParamUpdatePlan) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ParamUpdatePlan) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ParamUpdatePlan) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ParamUpdatePlan) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ParamUpdatePlan)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.Keys) > 0 {
			for _, s := range x.Keys {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Height != 0 {
			n += 1 + runtime.Sov(uint64(x.Height))
		}
		if x.Changes != nil {
			l = options.Size(x.Changes)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ParamUpdatePlan)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Changes != nil {
			encoded, err := options.Marshal(x.Changes)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Height != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Height))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Keys) > 0 {
			for iNdEx := len(x.Keys) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Keys[iNdEx])
				copy(dAtA[i:], x.Keys[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Keys[iNdEx])))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ParamUpdatePlan)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ParamUpdatePlan: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ParamUpdatePlan: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Keys = append(x.Keys, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
				}
				x.Height = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Height |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Changes", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Changes == nil {
					x.Changes = &Params{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Changes); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: cheqd/oracle/v2/oracle.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Params defines the parameters for the oracle module.
type Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VotePeriod               uint64        `protobuf:"varint,1,opt,name=vote_period,json=votePeriod,proto3" json:"vote_period,omitempty"`
	VoteThreshold            string        `protobuf:"bytes,2,opt,name=vote_threshold,json=voteThreshold,proto3" json:"vote_threshold,omitempty"`
	RewardBands              []*RewardBand `protobuf:"bytes,3,rep,name=reward_bands,json=rewardBands,proto3" json:"reward_bands,omitempty"`
	RewardDistributionWindow uint64        `protobuf:"varint,4,opt,name=reward_distribution_window,json=rewardDistributionWindow,proto3" json:"reward_distribution_window,omitempty"`
	AcceptList               []*Denom      `protobuf:"bytes,5,rep,name=accept_list,json=acceptList,proto3" json:"accept_list,omitempty"`
	SlashFraction            string        `protobuf:"bytes,6,opt,name=slash_fraction,json=slashFraction,proto3" json:"slash_fraction,omitempty"`
	SlashWindow              uint64        `protobuf:"varint,7,opt,name=slash_window,json=slashWindow,proto3" json:"slash_window,omitempty"`
	MinValidPerWindow        string        `protobuf:"bytes,8,opt,name=min_valid_per_window,json=minValidPerWindow,proto3" json:"min_valid_per_window,omitempty"`
	MandatoryList            []*Denom      `protobuf:"bytes,9,rep,name=mandatory_list,json=mandatoryList,proto3" json:"mandatory_list,omitempty"`
	// Historic Stamp Period represents the amount of blocks the oracle
	// module waits before recording a new historic price.
	HistoricStampPeriod uint64 `protobuf:"varint,10,opt,name=historic_stamp_period,json=historicStampPeriod,proto3" json:"historic_stamp_period,omitempty"`
	// Median Stamp Period represents the amount blocks the oracle module
	// waits between calculating and stamping a new median and standard
	// deviation of that median.
	MedianStampPeriod uint64 `protobuf:"varint,11,opt,name=median_stamp_period,json=medianStampPeriod,proto3" json:"median_stamp_period,omitempty"`
	// Maximum Price Stamps represents the maximum amount of historic prices
	// the oracle module will store before pruning via FIFO.
	MaximumPriceStamps uint64 `protobuf:"varint,12,opt,name=maximum_price_stamps,json=maximumPriceStamps,proto3" json:"maximum_price_stamps,omitempty"`
	// Maximum Median Stamps represents the maximum amount of medians the
	// oracle module will store before pruning via FIFO.
	MaximumMedianStamps uint64 `protobuf:"varint,13,opt,name=maximum_median_stamps,json=maximumMedianStamps,proto3" json:"maximum_median_stamps,omitempty"`
	// Currency Pair Providers defines the currency provider pairs the
	// price feeder uses upon start up for pricing data.
	CurrencyPairProviders []*CurrencyPairProviders `protobuf:"bytes,14,rep,name=currency_pair_providers,json=currencyPairProviders,proto3" json:"currency_pair_providers,omitempty"`
	// Currency Deviation Thresholds defines the deviation thresholds
	// for each base currency the price feeder uses upon start up.
	CurrencyDeviationThresholds []*CurrencyDeviationThreshold `protobuf:"bytes,15,rep,name=currency_deviation_thresholds,json=currencyDeviationThresholds,proto3" json:"currency_deviation_thresholds,omitempty"`
	// usdc ibc denom
	UsdcIbcDenom string `protobuf:"bytes,16,opt,name=usdc_ibc_denom,json=usdcIbcDenom,proto3" json:"usdc_ibc_denom,omitempty"`
}

func (x *Params) Reset() {
	*x = Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cheqd_oracle_v2_oracle_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_cheqd_oracle_v2_oracle_proto_rawDescGZIP(), []int{0}
}

func (x *Params) GetVotePeriod() uint64 {
	if x != nil {
		return x.VotePeriod
	}
	return 0
}

func (x *Params) GetVoteThreshold() string {
	if x != nil {
		return x.VoteThreshold
	}
	return ""
}

func (x *Params) GetRewardBands() []*RewardBand {
	if x != nil {
		return x.RewardBands
	}
	return nil
}

func (x *Params) GetRewardDistributionWindow() uint64 {
	if x != nil {
		return x.RewardDistributionWindow
	}
	return 0
}

func (x *Params) GetAcceptList() []*Denom {
	if x != nil {
		return x.AcceptList
	}
	return nil
}

func (x *Params) GetSlashFraction() string {
	if x != nil {
		return x.SlashFraction
	}
	return ""
}

func (x *Params) GetSlashWindow() uint64 {
	if x != nil {
		return x.SlashWindow
	}
	return 0
}

func (x *Params) GetMinValidPerWindow() string {
	if x != nil {
		return x.MinValidPerWindow
	}
	return ""
}

func (x *Params) GetMandatoryList() []*Denom {
	if x != nil {
		return x.MandatoryList
	}
	return nil
}

func (x *Params) GetHistoricStampPeriod() uint64 {
	if x != nil {
		return x.HistoricStampPeriod
	}
	return 0
}

func (x *Params) GetMedianStampPeriod() uint64 {
	if x != nil {
		return x.MedianStampPeriod
	}
	return 0
}

func (x *Params) GetMaximumPriceStamps() uint64 {
	if x != nil {
		return x.MaximumPriceStamps
	}
	return 0
}

func (x *Params) GetMaximumMedianStamps() uint64 {
	if x != nil {
		return x.MaximumMedianStamps
	}
	return 0
}

func (x *Params) GetCurrencyPairProviders() []*CurrencyPairProviders {
	if x != nil {
		return x.CurrencyPairProviders
	}
	return nil
}

func (x *Params) GetCurrencyDeviationThresholds() []*CurrencyDeviationThreshold {
	if x != nil {
		return x.CurrencyDeviationThresholds
	}
	return nil
}

func (x *Params) GetUsdcIbcDenom() string {
	if x != nil {
		return x.UsdcIbcDenom
	}
	return ""
}

// Denom - the object to hold configurations of each denom
type Denom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseDenom   string `protobuf:"bytes,1,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
	SymbolDenom string `protobuf:"bytes,2,opt,name=symbol_denom,json=symbolDenom,proto3" json:"symbol_denom,omitempty"`
	Exponent    uint32 `protobuf:"varint,3,opt,name=exponent,proto3" json:"exponent,omitempty"`
}

func (x *Denom) Reset() {
	*x = Denom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cheqd_oracle_v2_oracle_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Denom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Denom) ProtoMessage() {}

// Deprecated: Use Denom.ProtoReflect.Descriptor instead.
func (*Denom) Descriptor() ([]byte, []int) {
	return file_cheqd_oracle_v2_oracle_proto_rawDescGZIP(), []int{1}
}

func (x *Denom) GetBaseDenom() string {
	if x != nil {
		return x.BaseDenom
	}
	return ""
}

func (x *Denom) GetSymbolDenom() string {
	if x != nil {
		return x.SymbolDenom
	}
	return ""
}

func (x *Denom) GetExponent() uint32 {
	if x != nil {
		return x.Exponent
	}
	return 0
}

// RewardBand - the object to hold the reward band configuration for a given denom.
type RewardBand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolDenom string `protobuf:"bytes,1,opt,name=symbol_denom,json=symbolDenom,proto3" json:"symbol_denom,omitempty"`
	RewardBand  string `protobuf:"bytes,2,opt,name=reward_band,json=rewardBand,proto3" json:"reward_band,omitempty"`
}

func (x *RewardBand) Reset() {
	*x = RewardBand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cheqd_oracle_v2_oracle_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardBand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardBand) ProtoMessage() {}

// Deprecated: Use RewardBand.ProtoReflect.Descriptor instead.
func (*RewardBand) Descriptor() ([]byte, []int) {
	return file_cheqd_oracle_v2_oracle_proto_rawDescGZIP(), []int{2}
}

func (x *RewardBand) GetSymbolDenom() string {
	if x != nil {
		return x.SymbolDenom
	}
	return ""
}

func (x *RewardBand) GetRewardBand() string {
	if x != nil {
		return x.RewardBand
	}
	return ""
}

// AggregateExchangeRatePrevote -
// struct for aggregate prevoting on the ExchangeRateVote.
// The purpose of aggregate prevote is to hide vote exchange rates with hash
// which is formatted as hex string in SHA256("{salt}:{exchange
// rate}{denom},...,{exchange rate}{denom}:{voter}")
type AggregateExchangeRatePrevote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash        string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Voter       string `protobuf:"bytes,2,opt,name=voter,proto3" json:"voter,omitempty"`
	SubmitBlock uint64 `protobuf:"varint,3,opt,name=submit_block,json=submitBlock,proto3" json:"submit_block,omitempty"`
}

func (x *AggregateExchangeRatePrevote) Reset() {
	*x = AggregateExchangeRatePrevote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cheqd_oracle_v2_oracle_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregateExchangeRatePrevote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateExchangeRatePrevote) ProtoMessage() {}

// Deprecated: Use AggregateExchangeRatePrevote.ProtoReflect.Descriptor instead.
func (*AggregateExchangeRatePrevote) Descriptor() ([]byte, []int) {
	return file_cheqd_oracle_v2_oracle_proto_rawDescGZIP(), []int{3}
}

func (x *AggregateExchangeRatePrevote) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *AggregateExchangeRatePrevote) GetVoter() string {
	if x != nil {
		return x.Voter
	}
	return ""
}

func (x *AggregateExchangeRatePrevote) GetSubmitBlock() uint64 {
	if x != nil {
		return x.SubmitBlock
	}
	return 0
}

// AggregateExchangeRateVote - struct for voting on
// the exchange rates of USD denominated in various assets.
type AggregateExchangeRateVote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeRates []*v1beta1.DecCoin `protobuf:"bytes,1,rep,name=exchange_rates,json=exchangeRates,proto3" json:"exchange_rates,omitempty"`
	Voter         string             `protobuf:"bytes,2,opt,name=voter,proto3" json:"voter,omitempty"`
}

func (x *AggregateExchangeRateVote) Reset() {
	*x = AggregateExchangeRateVote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cheqd_oracle_v2_oracle_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregateExchangeRateVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateExchangeRateVote) ProtoMessage() {}

// Deprecated: Use AggregateExchangeRateVote.ProtoReflect.Descriptor instead.
func (*AggregateExchangeRateVote) Descriptor() ([]byte, []int) {
	return file_cheqd_oracle_v2_oracle_proto_rawDescGZIP(), []int{4}
}

func (x *AggregateExchangeRateVote) GetExchangeRates() []*v1beta1.DecCoin {
	if x != nil {
		return x.ExchangeRates
	}
	return nil
}

func (x *AggregateExchangeRateVote) GetVoter() string {
	if x != nil {
		return x.Voter
	}
	return ""
}

// PriceStamp defines a stamp of a denom's exchange rate
// at the block number it was calculated in.
type PriceStamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeRate *v1beta1.DecCoin `protobuf:"bytes,1,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`
	BlockNum     uint64           `protobuf:"varint,2,opt,name=block_num,json=blockNum,proto3" json:"block_num,omitempty"`
}

func (x *PriceStamp) Reset() {
	*x = PriceStamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cheqd_oracle_v2_oracle_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceStamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceStamp) ProtoMessage() {}

// Deprecated: Use PriceStamp.ProtoReflect.Descriptor instead.
func (*PriceStamp) Descriptor() ([]byte, []int) {
	return file_cheqd_oracle_v2_oracle_proto_rawDescGZIP(), []int{5}
}

func (x *PriceStamp) GetExchangeRate() *v1beta1.DecCoin {
	if x != nil {
		return x.ExchangeRate
	}
	return nil
}

func (x *PriceStamp) GetBlockNum() uint64 {
	if x != nil {
		return x.BlockNum
	}
	return 0
}

// ValidatorRewardSet is the set of validators that is earning
// rewards for voting on exchange rates based on their misscounter
// in a given Slash Window. This set gets updated every Slash Window.
type ValidatorRewardSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidatorSet []string `protobuf:"bytes,1,rep,name=validator_set,json=validatorSet,proto3" json:"validator_set,omitempty"`
}

func (x *ValidatorRewardSet) Reset() {
	*x = ValidatorRewardSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cheqd_oracle_v2_oracle_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorRewardSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorRewardSet) ProtoMessage() {}

// Deprecated: Use ValidatorRewardSet.ProtoReflect.Descriptor instead.
func (*ValidatorRewardSet) Descriptor() ([]byte, []int) {
	return file_cheqd_oracle_v2_oracle_proto_rawDescGZIP(), []int{6}
}

func (x *ValidatorRewardSet) GetValidatorSet() []string {
	if x != nil {
		return x.ValidatorSet
	}
	return nil
}

// CurrencyPairProviders defines a list of currency providers for the
// currency pair defined by base and quote.
type CurrencyPairProviders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseDenom   string                 `protobuf:"bytes,1,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
	QuoteDenom  string                 `protobuf:"bytes,2,opt,name=quote_denom,json=quoteDenom,proto3" json:"quote_denom,omitempty"`
	PairAddress []*PairAddressProvider `protobuf:"bytes,3,rep,name=pair_address,json=pairAddress,proto3" json:"pair_address,omitempty"`
	Providers   []string               `protobuf:"bytes,4,rep,name=providers,proto3" json:"providers,omitempty"`
}

func (x *CurrencyPairProviders) Reset() {
	*x = CurrencyPairProviders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cheqd_oracle_v2_oracle_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyPairProviders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyPairProviders) ProtoMessage() {}

// Deprecated: Use CurrencyPairProviders.ProtoReflect.Descriptor instead.
func (*CurrencyPairProviders) Descriptor() ([]byte, []int) {
	return file_cheqd_oracle_v2_oracle_proto_rawDescGZIP(), []int{7}
}

func (x *CurrencyPairProviders) GetBaseDenom() string {
	if x != nil {
		return x.BaseDenom
	}
	return ""
}

func (x *CurrencyPairProviders) GetQuoteDenom() string {
	if x != nil {
		return x.QuoteDenom
	}
	return ""
}

func (x *CurrencyPairProviders) GetPairAddress() []*PairAddressProvider {
	if x != nil {
		return x.PairAddress
	}
	return nil
}

func (x *CurrencyPairProviders) GetProviders() []string {
	if x != nil {
		return x.Providers
	}
	return nil
}

// PairAddressProvider defines the uniswap pair address and provider
// for uniswap currency pair.
type PairAddressProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address         string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	AddressProvider string `protobuf:"bytes,2,opt,name=address_provider,json=addressProvider,proto3" json:"address_provider,omitempty"`
}

func (x *PairAddressProvider) Reset() {
	*x = PairAddressProvider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cheqd_oracle_v2_oracle_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PairAddressProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PairAddressProvider) ProtoMessage() {}

// Deprecated: Use PairAddressProvider.ProtoReflect.Descriptor instead.
func (*PairAddressProvider) Descriptor() ([]byte, []int) {
	return file_cheqd_oracle_v2_oracle_proto_rawDescGZIP(), []int{8}
}

func (x *PairAddressProvider) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *PairAddressProvider) GetAddressProvider() string {
	if x != nil {
		return x.AddressProvider
	}
	return ""
}

// CurrencyDeviationThreshold defines a deviation theshold for a
// base denom.
type CurrencyDeviationThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseDenom string `protobuf:"bytes,1,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
	Threshold string `protobuf:"bytes,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *CurrencyDeviationThreshold) Reset() {
	*x = CurrencyDeviationThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cheqd_oracle_v2_oracle_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyDeviationThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyDeviationThreshold) ProtoMessage() {}

// Deprecated: Use CurrencyDeviationThreshold.ProtoReflect.Descriptor instead.
func (*CurrencyDeviationThreshold) Descriptor() ([]byte, []int) {
	return file_cheqd_oracle_v2_oracle_proto_rawDescGZIP(), []int{9}
}

func (x *CurrencyDeviationThreshold) GetBaseDenom() string {
	if x != nil {
		return x.BaseDenom
	}
	return ""
}

func (x *CurrencyDeviationThreshold) GetThreshold() string {
	if x != nil {
		return x.Threshold
	}
	return ""
}

// ParamUpdatePlan specifies updates to the Oracle module parameters
// and at which block height they should occur.
type ParamUpdatePlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Store keys of the Oracle params getting updated.
	Keys []string `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// The height at which the param update must be performed.
	Height int64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	// Changes to the oracle parameters.
	Changes *Params `protobuf:"bytes,3,opt,name=changes,proto3" json:"changes,omitempty"`
}

func (x *ParamUpdatePlan) Reset() {
	*x = ParamUpdatePlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cheqd_oracle_v2_oracle_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParamUpdatePlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParamUpdatePlan) ProtoMessage() {}

// Deprecated: Use ParamUpdatePlan.ProtoReflect.Descriptor instead.
func (*ParamUpdatePlan) Descriptor() ([]byte, []int) {
	return file_cheqd_oracle_v2_oracle_proto_rawDescGZIP(), []int{10}
}

func (x *ParamUpdatePlan) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *ParamUpdatePlan) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ParamUpdatePlan) GetChanges() *Params {
	if x != nil {
		return x.Changes
	}
	return nil
}

var File_cheqd_oracle_v2_oracle_proto protoreflect.FileDescriptor

var file_cheqd_oracle_v2_oracle_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x63, 0x68, 0x65, 0x71, 0x64, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2f, 0x76,
	0x32, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f,
	0x63, 0x68, 0x65, 0x71, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x32, 0x1a,
	0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbf, 0x0b, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x37, 0x0a, 0x0b, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x16, 0xf2, 0xde, 0x1f, 0x12, 0x79, 0x61, 0x6d, 0x6c, 0x3a,
	0x22, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x52, 0x0a, 0x76,
	0x6f, 0x74, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x63, 0x0a, 0x0e, 0x76, 0x6f, 0x74,
	0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x3c, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xf2, 0xde, 0x1f, 0x15, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22,
	0x76, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x52,
	0x0d, 0x76, 0x6f, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x6d,
	0x0a, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x65, 0x71, 0x64, 0x2e, 0x6f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x61, 0x6e,
	0x64, 0x42, 0x2d, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x13, 0x79, 0x61, 0x6d, 0x6c, 0x3a,
	0x22, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x73, 0x22, 0xaa, 0xdf,
	0x1f, 0x0e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x63, 0x0a,
	0x1a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x25, 0xf2, 0xde, 0x1f, 0x21, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x22, 0x52, 0x18, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x12, 0x60, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x68, 0x65, 0x71, 0x64, 0x2e,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x42,
	0x27, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x12, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xaa, 0xdf, 0x1f, 0x09, 0x44,
	0x65, 0x6e, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x0e, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x66, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0xc8, 0xde,
	0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e,
	0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65,
	0x63, 0xf2, 0xde, 0x1f, 0x15, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x73, 0x6c, 0x61, 0x73, 0x68,
	0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x0d, 0x73, 0x6c, 0x61, 0x73,
	0x68, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x6c, 0x61,
	0x73, 0x68, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x17, 0xf2, 0xde, 0x1f, 0x13, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x73, 0x6c, 0x61, 0x73, 0x68,
	0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x22, 0x52, 0x0b, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x73, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x42, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xf2, 0xde, 0x1f, 0x1b, 0x79, 0x61, 0x6d, 0x6c,
	0x3a, 0x22, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x22, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x50, 0x65, 0x72, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x69, 0x0a, 0x0e, 0x6d, 0x61,
	0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x68, 0x65, 0x71, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x42, 0x2a, 0xc8, 0xde, 0x1f, 0x00,
	0xf2, 0xde, 0x1f, 0x15, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xaa, 0xdf, 0x1f, 0x09, 0x44, 0x65, 0x6e,
	0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x63, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12,
	0xa3, 0x01, 0x0a, 0x17, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x61, 0x69,
	0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x65, 0x71, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x2e, 0x76, 0x32, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x42, 0x43, 0xc8, 0xde, 0x1f, 0x00, 0xf2,
	0xde, 0x1f, 0x1e, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x22, 0xaa, 0xdf, 0x1f, 0x19, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69,
	0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x15,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0xbf, 0x01, 0x0a, 0x1d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x63, 0x68, 0x65, 0x71, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x32, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x4e, 0xc8, 0xde, 0x1f, 0x00,
	0xf2, 0xde, 0x1f, 0x24, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x22, 0xaa, 0xdf, 0x1f, 0x1e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x1b, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x64, 0x63, 0x5f,
	0x69, 0x62, 0x63, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x75, 0x73, 0x64, 0x63, 0x49, 0x62, 0x63, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x3a, 0x08, 0x98,
	0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x01, 0x22, 0xb8, 0x01, 0x0a, 0x05, 0x44, 0x65, 0x6e, 0x6f,
	0x6d, 0x12, 0x34, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xf2, 0xde, 0x1f, 0x11, 0x79, 0x61, 0x6d, 0x6c, 0x3a,
	0x22, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x22, 0x52, 0x09, 0x62, 0x61,
	0x73, 0x65, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xf2,
	0xde, 0x1f, 0x13, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f,
	0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x22, 0x52, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x44, 0x65,
	0x6e, 0x6f, 0x6d, 0x12, 0x2f, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0xf2, 0xde, 0x1f, 0x0f, 0x79, 0x61, 0x6d, 0x6c, 0x3a,
	0x22, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x22, 0x52, 0x08, 0x65, 0x78, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x3a, 0x0c, 0x88, 0xa0, 0x1f, 0x00, 0x98, 0xa0, 0x1f, 0x00, 0xe8, 0xa0,
	0x1f, 0x00, 0x22, 0xb2, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x61, 0x6e,
	0x64, 0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x64, 0x65, 0x6e, 0x6f,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xf2, 0xde, 0x1f, 0x13, 0x79, 0x61, 0x6d,
	0x6c, 0x3a, 0x22, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x22,
	0x52, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x5a, 0x0a,
	0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x39, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xf2, 0xde, 0x1f, 0x12, 0x79, 0x61, 0x6d, 0x6c, 0x3a,
	0x22, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x22, 0x52, 0x0a, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x3a, 0x0c, 0x88, 0xa0, 0x1f, 0x00, 0x98,
	0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x00, 0x22, 0xb5, 0x01, 0x0a, 0x1c, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x65, 0x76, 0x6f, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xde, 0x1f, 0x0b, 0x79, 0x61, 0x6d, 0x6c,
	0x3a, 0x22, 0x68, 0x61, 0x73, 0x68, 0x22, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a,
	0x05, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xf2, 0xde,
	0x1f, 0x0c, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x22, 0x52, 0x05,
	0x76, 0x6f, 0x74, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x17, 0xf2, 0xde, 0x1f,
	0x13, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x22, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x3a, 0x0c, 0x88, 0xa0, 0x1f, 0x00, 0x98, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x00, 0x22,
	0xcb, 0x01, 0x0a, 0x19, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x78, 0x0a,
	0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x43,
	0x6f, 0x69, 0x6e, 0x42, 0x33, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x2b, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x44, 0x65, 0x63, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xf2, 0xde, 0x1f, 0x0c, 0x79, 0x61, 0x6d, 0x6c,
	0x3a, 0x22, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x22, 0x52, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x3a,
	0x0c, 0x88, 0xa0, 0x1f, 0x00, 0x98, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x00, 0x22, 0x6c, 0x0a,
	0x0a, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x41, 0x0a, 0x0d, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x43, 0x6f, 0x69, 0x6e,
	0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x22, 0x53, 0x0a, 0x12, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65,
	0x74, 0x12, 0x3d, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x18, 0xf2, 0xde, 0x1f, 0x14, 0x79, 0x61,
	0x6d, 0x6c, 0x3a, 0x22, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65,
	0x74, 0x22, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74,
	0x22, 0xae, 0x02, 0x0a, 0x15, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69,
	0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15,
	0xf2, 0xde, 0x1f, 0x11, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64,
	0x65, 0x6e, 0x6f, 0x6d, 0x22, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x44, 0x65, 0x6e, 0x6f, 0x6d,
	0x12, 0x37, 0x0a, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xf2, 0xde, 0x1f, 0x12, 0x79, 0x61, 0x6d, 0x6c, 0x3a,
	0x22, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x22, 0x52, 0x0a, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x64, 0x0a, 0x0c, 0x70, 0x61, 0x69,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x68, 0x65, 0x71, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x76,
	0x32, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x1b, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x13, 0x79,
	0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x52, 0x0b, 0x70, 0x61, 0x69, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x32, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x14, 0xf2, 0xde, 0x1f, 0x10, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x22, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x3a, 0x0c, 0x88, 0xa0, 0x1f, 0x00, 0x98, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f,
	0x00, 0x22, 0x8b, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x69, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xf2, 0xde, 0x1f, 0x0e,
	0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1b, 0xf2, 0xde, 0x1f, 0x17, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x52, 0x0f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22,
	0x94, 0x01, 0x0a, 0x1a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x44, 0x65, 0x76, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x34,
	0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x15, 0xf2, 0xde, 0x1f, 0x11, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x22, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x44,
	0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x32, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xf2, 0xde, 0x1f, 0x10, 0x79, 0x61, 0x6d,
	0x6c, 0x3a, 0x22, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x52, 0x09, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x3a, 0x0c, 0x88, 0xa0, 0x1f, 0x00, 0x98, 0xa0,
	0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x00, 0x22, 0x84, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x68, 0x65, 0x71, 0x64, 0x2e,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x3a,
	0x0c, 0x88, 0xa0, 0x1f, 0x00, 0x98, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x01, 0x42, 0xc1, 0x01,
	0xc8, 0xe1, 0x1e, 0x00, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x65, 0x71, 0x64, 0x2e,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x32, 0x42, 0x0b, 0x4f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x65, 0x71, 0x64, 0x2f, 0x63, 0x68, 0x65, 0x71, 0x64,
	0x2d, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x68, 0x65,
	0x71, 0x64, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2f, 0x76, 0x32, 0x3b, 0x6f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x76, 0x32, 0xa2, 0x02, 0x03, 0x43, 0x4f, 0x58, 0xaa, 0x02, 0x0f, 0x43, 0x68,
	0x65, 0x71, 0x64, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x56, 0x32, 0xca, 0x02, 0x0f,
	0x43, 0x68, 0x65, 0x71, 0x64, 0x5c, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5c, 0x56, 0x32, 0xe2,
	0x02, 0x1b, 0x43, 0x68, 0x65, 0x71, 0x64, 0x5c, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5c, 0x56,
	0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11,
	0x43, 0x68, 0x65, 0x71, 0x64, 0x3a, 0x3a, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x3a, 0x3a, 0x56,
	0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cheqd_oracle_v2_oracle_proto_rawDescOnce sync.Once
	file_cheqd_oracle_v2_oracle_proto_rawDescData = file_cheqd_oracle_v2_oracle_proto_rawDesc
)

func file_cheqd_oracle_v2_oracle_proto_rawDescGZIP() []byte {
	file_cheqd_oracle_v2_oracle_proto_rawDescOnce.Do(func() {
		file_cheqd_oracle_v2_oracle_proto_rawDescData = protoimpl.X.CompressGZIP(file_cheqd_oracle_v2_oracle_proto_rawDescData)
	})
	return file_cheqd_oracle_v2_oracle_proto_rawDescData
}

var file_cheqd_oracle_v2_oracle_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_cheqd_oracle_v2_oracle_proto_goTypes = []interface{}{
	(*Params)(nil),                       // 0: cheqd.oracle.v2.Params
	(*Denom)(nil),                        // 1: cheqd.oracle.v2.Denom
	(*RewardBand)(nil),                   // 2: cheqd.oracle.v2.RewardBand
	(*AggregateExchangeRatePrevote)(nil), // 3: cheqd.oracle.v2.AggregateExchangeRatePrevote
	(*AggregateExchangeRateVote)(nil),    // 4: cheqd.oracle.v2.AggregateExchangeRateVote
	(*PriceStamp)(nil),                   // 5: cheqd.oracle.v2.PriceStamp
	(*ValidatorRewardSet)(nil),           // 6: cheqd.oracle.v2.ValidatorRewardSet
	(*CurrencyPairProviders)(nil),        // 7: cheqd.oracle.v2.CurrencyPairProviders
	(*PairAddressProvider)(nil),          // 8: cheqd.oracle.v2.PairAddressProvider
	(*CurrencyDeviationThreshold)(nil),   // 9: cheqd.oracle.v2.CurrencyDeviationThreshold
	(*ParamUpdatePlan)(nil),              // 10: cheqd.oracle.v2.ParamUpdatePlan
	(*v1beta1.DecCoin)(nil),              // 11: cosmos.base.v1beta1.DecCoin
}
var file_cheqd_oracle_v2_oracle_proto_depIdxs = []int32{
	2,  // 0: cheqd.oracle.v2.Params.reward_bands:type_name -> cheqd.oracle.v2.RewardBand
	1,  // 1: cheqd.oracle.v2.Params.accept_list:type_name -> cheqd.oracle.v2.Denom
	1,  // 2: cheqd.oracle.v2.Params.mandatory_list:type_name -> cheqd.oracle.v2.Denom
	7,  // 3: cheqd.oracle.v2.Params.currency_pair_providers:type_name -> cheqd.oracle.v2.CurrencyPairProviders
	9,  // 4: cheqd.oracle.v2.Params.currency_deviation_thresholds:type_name -> cheqd.oracle.v2.CurrencyDeviationThreshold
	11, // 5: cheqd.oracle.v2.AggregateExchangeRateVote.exchange_rates:type_name -> cosmos.base.v1beta1.DecCoin
	11, // 6: cheqd.oracle.v2.PriceStamp.exchange_rate:type_name -> cosmos.base.v1beta1.DecCoin
	8,  // 7: cheqd.oracle.v2.CurrencyPairProviders.pair_address:type_name -> cheqd.oracle.v2.PairAddressProvider
	0,  // 8: cheqd.oracle.v2.ParamUpdatePlan.changes:type_name -> cheqd.oracle.v2.Params
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_cheqd_oracle_v2_oracle_proto_init() }
func file_cheqd_oracle_v2_oracle_proto_init() {
	if File_cheqd_oracle_v2_oracle_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cheqd_oracle_v2_oracle_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cheqd_oracle_v2_oracle_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Denom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cheqd_oracle_v2_oracle_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardBand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cheqd_oracle_v2_oracle_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregateExchangeRatePrevote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cheqd_oracle_v2_oracle_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregateExchangeRateVote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cheqd_oracle_v2_oracle_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceStamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cheqd_oracle_v2_oracle_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorRewardSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cheqd_oracle_v2_oracle_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyPairProviders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cheqd_oracle_v2_oracle_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PairAddressProvider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cheqd_oracle_v2_oracle_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyDeviationThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cheqd_oracle_v2_oracle_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParamUpdatePlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cheqd_oracle_v2_oracle_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cheqd_oracle_v2_oracle_proto_goTypes,
		DependencyIndexes: file_cheqd_oracle_v2_oracle_proto_depIdxs,
		MessageInfos:      file_cheqd_oracle_v2_oracle_proto_msgTypes,
	}.Build()
	File_cheqd_oracle_v2_oracle_proto = out.File
	file_cheqd_oracle_v2_oracle_proto_rawDesc = nil
	file_cheqd_oracle_v2_oracle_proto_goTypes = nil
	file_cheqd_oracle_v2_oracle_proto_depIdxs = nil
}
