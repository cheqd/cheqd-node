name: "Build"
on:
  workflow_call:
    outputs:
      VERSION:
        description: "Build version number"
        value: ${{ jobs.build-binary.outputs.VERSION }}
defaults:
  run:
    shell: bash


jobs:
  go-unit-tests:
    name: "Golang unit tests"
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: '1.17'
      
      - name: Run Golang unit tests
        run: go test -v ./...

  build-binary:
    name: "Node binary/tar archive"
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.set-version.outputs.VERSION }}

    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: '1.17'
      
      - name: Fetch Golang protoc compiler plugins
        env:
          GOLANG_PROTOBUF_VERSION: 1.3.5
          GOGO_PROTOBUF_VERSION: 1.3.2
          GRPC_GATEWAY_VERSION: 1.14.7
        # Taken from: tendermintdev/sdk-proto-gen:v0.2
        run: |
          go get \
            github.com/golang/protobuf/protoc-gen-go@v"$GOLANG_PROTOBUF_VERSION" \
            github.com/gogo/protobuf/protoc-gen-gogo@v"$GOGO_PROTOBUF_VERSION" \
            github.com/gogo/protobuf/protoc-gen-gogofast@v"$GOGO_PROTOBUF_VERSION" \
            github.com/gogo/protobuf/protoc-gen-gogofaster@v"$GOGO_PROTOBUF_VERSION" \
            github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway@v"$GRPC_GATEWAY_VERSION" \
            github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger@v"$GRPC_GATEWAY_VERSION" \
            github.com/regen-network/cosmos-proto/protoc-gen-gocosmos@latest
      - name: Install buf
        env:
          PREFIX: "/usr/local"
          VERSION: "1.0.0-rc8"
        run: |
          curl -sSL "https://github.com/bufbuild/buf/releases/download/v${VERSION}/buf-$(uname -s)-$(uname -m).tar.gz" | \
          sudo tar -xvzf - -C "${PREFIX}" --strip-components 1
      
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Required to fetch version

      - name: Build node binary
        run: |
          make proto-gen build
        
      - name: Store artifact
        uses: actions/upload-artifact@v3
        with:
          name: cheqd-noded
          path: build/cheqd-noded

      - name: Set version number
        id: set-version
        run: |
          VERSION=$(build/cheqd-noded version 2>&1)
          echo ::set-output name=VERSION::"$VERSION"

      - name: Install fpm
        run: |
          sudo apt-get install ruby ruby-dev rubygems build-essential
          sudo gem install --no-document fpm

      - name: Build cosmovisor
        working-directory: /home/runner/
        run: |
          git clone https://github.com/cosmos/cosmos-sdk.git
          cd cosmos-sdk
          git checkout cosmovisor/v1.1.0
          make cosmovisor
      
      - name: Build Debian package
        working-directory: ./build-tools
        run: |
          ./build-deb.sh "../build/cheqd-noded" "/home/runner/cosmos-sdk/cosmovisor/cosmovisor"

      - name: Build Tar archive
        working-directory: ./build-tools
        run: |
          ./build-tar.sh "../build/cheqd-noded"
      
      - name: Store Debian package artifact
        uses: actions/upload-artifact@v3
        env:
          VERSION: ${{ steps.set-version.outputs.VERSION }}
        with:
          name: cheqd-node_${{ env.VERSION }}_amd64.deb
          path: build-tools/output/cheqd-node_${{ env.VERSION }}_amd64.deb

      - name: Store Tar archive artifact
        uses: actions/upload-artifact@v3
        env:
          VERSION: ${{ steps.set-version.outputs.VERSION }}
        with:
          name: cheqd-node_${{ env.VERSION }}.tar.gz
          path: build-tools/output/cheqd-node_${{ env.VERSION }}.tar.gz

  build-docker-images:
    name: "Docker images"
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Required to fetch version
      
      - name: Build cheqd-cli Docker image 'cheqd-noded' as entrypoint
        # TODO: Get rid of UID and GID
        run: docker build --target base -t cheqd-cli -f docker/Dockerfile --build-arg UID="$(id -u)" --build-arg GID="$(id -g)" .

      - name: Build cheqd-node Docker image with 'node-start' as entrypoint
        run: docker build --target node -t cheqd-node -f docker/Dockerfile --build-arg UID="$(id -u)" --build-arg GID="$(id -g)" .

      - name: Save cheqd-cli Docker image
        run: docker save -o cheqd-cli-image.tar cheqd-cli

      - name: Build cosmovisor Docker image with 'cosmovisor run' as entrypoint and no build args
        run: docker build -f docker/Dockerfile --target cosmovisor -t cheqd-noded:cosmovisor_to .

      - name: Login to Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push cheqd-node image
        run: |
          docker tag cheqd-noded:cosmovisor ghcr.io/${{ github.repository }}:cosmovisor
          docker push ghcr.io/${{ github.repository }}:cosmovisor

      - name: Store cheqd-cli artifact
        uses: actions/upload-artifact@v3
        with:
          name: cheqd-cli-image.tar
          path: cheqd-cli-image.tar

      - name: Save cheqd-node Docker image
        run: docker save -o cheqd-node-image.tar cheqd-node

      - name: Store cheqd-node artifact
        uses: actions/upload-artifact@v3
        with:
          name: cheqd-node-image.tar
          path: cheqd-node-image.tar

      - name: Save cheqd-node:cosmovisor_to Docker image
        run: docker save -o cheqd-cosmovisor-to.tar cheqd-noded:cosmovisor_to

      - name: Store cheqd-node artifact
        uses: actions/upload-artifact@v3
        with:
          name: cheqd-cosmovisor-to.tar
          path: cheqd-cosmovisor-to.tar