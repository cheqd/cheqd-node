name: "Build and Test"

on:
  push:
    paths-ignore:
    - '**.md'
    - 'docs/**'
    - 'architecture/**'
    - '.gitbook/**'

env:
  NODE_CONFIGS_BASE: "/home/runner/work/cheqd-node/cheqd-node/docker/localnet/network-config"

jobs:
#  wait-for-lint:
#    name: Wait for linter
#    runs-on: ubuntu-20.04
#    steps:
#      - name: Wait for jobs finished on lint workflow
#        uses: lewagon/wait-on-check-action@v1.0.0
#        with:
#          ref: ${{ github.ref }}
#          check-regexp: Lint:.?
#          repo-token: ${{ secrets.GITHUB_TOKEN }}
#          wait-interval: 10

#  run-unit-test:
#    name: Run unit tests
#    runs-on: ubuntu-20.04
#    needs: wait-for-lint
#    steps:
#      - name: Set up Go 1.17
#        uses: actions/setup-go@v2
#        with:
#          go-version: 1.17
#
#      - uses: actions/checkout@v2
#
#      - name: Run tests
#        run: go test -v ./...

  build-binary:
    name: "Build: binary"
    runs-on: ubuntu-20.04
#    needs: wait-for-lint
    outputs:
      VERSION: ${{ steps.set-version.outputs.VERSION }}
    steps:
      - name: Set up Go 1.17
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Get go protoc compiler plugins
        env:
          GOLANG_PROTOBUF_VERSION: 1.3.5
          GOGO_PROTOBUF_VERSION: 1.3.2
          GRPC_GATEWAY_VERSION: 1.14.7
        # Taken from: tendermintdev/sdk-proto-gen:v0.2
        run: |
          go get \
            github.com/golang/protobuf/protoc-gen-go@v"$GOLANG_PROTOBUF_VERSION" \
            github.com/gogo/protobuf/protoc-gen-gogo@v"$GOGO_PROTOBUF_VERSION" \
            github.com/gogo/protobuf/protoc-gen-gogofast@v"$GOGO_PROTOBUF_VERSION" \
            github.com/gogo/protobuf/protoc-gen-gogofaster@v"$GOGO_PROTOBUF_VERSION" \
            github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway@v"$GRPC_GATEWAY_VERSION" \
            github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger@v"$GRPC_GATEWAY_VERSION" \
            github.com/regen-network/cosmos-proto/protoc-gen-gocosmos@latest

      - name: Install buf
        env:
          PREFIX: "/usr/local"
          VERSION: "1.0.0-rc8"
        run: |
          curl -sSL "https://github.com/bufbuild/buf/releases/download/v${VERSION}/buf-$(uname -s)-$(uname -m).tar.gz" | \
          sudo tar -xvzf - -C "${PREFIX}" --strip-components 1

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Required to fetch version

      - name: Build
        run: |
          make proto-gen build

      - name: Store artifact
        uses: actions/upload-artifact@v2
        with:
          name: cheqd-noded
          path: build/cheqd-noded

      - name: Set version
        id: set-version
        run: |
          VERSION=$(build/cheqd-noded version 2>&1)
          echo "::set-output name=VERSION::$VERSION"

#  build-tar-package:
#    name: "Build: tar package"
#    runs-on: ubuntu-20.04
#    needs: build-binary
#    env:
#      VERSION: ${{ needs.build-binary.outputs.VERSION }}
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Load binary artifact
#        uses: actions/download-artifact@v2
#        with:
#          name: cheqd-noded
#
#      - name: Restore binary permissions
#        run: sudo chmod +x cheqd-noded
#
#      - name: Build tar
#        working-directory: ./build-tools
#        run: |
#          ./build-tar.sh "../cheqd-noded"
#
#      - name: Store tar package artifact
#        uses: actions/upload-artifact@v2
#        with:
#          name: cheqd-node_${{ env.VERSION }}.tar.gz
#          path: build-tools/output/cheqd-node_${{ env.VERSION }}.tar.gz

  build-deb-package:
    name: "Build: deb package"
    runs-on: ubuntu-20.04
    needs: build-binary
    env:
      VERSION: ${{ needs.build-binary.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v2

      - name: Load binary artifact
        uses: actions/download-artifact@v2
        with:
          name: cheqd-noded

      - name: Restore binary permissions
        run: sudo chmod +x cheqd-noded

      - name: Install fpm
        run: |
          sudo apt-get install ruby ruby-dev rubygems build-essential
          sudo gem install --no-document fpm

      - name: Build deb
        working-directory: ./build-tools
        run: |
          ./build-deb.sh "../cheqd-noded"

      - name: Store deb package artifact
        uses: actions/upload-artifact@v2
        with:
          name: cheqd-node_${{ env.VERSION }}_amd64.deb
          path: build-tools/output/cheqd-node_${{ env.VERSION }}_amd64.deb

  build-node-images:
    name: "Build: cheqd-node and cheqd-cli images"
    runs-on: ubuntu-20.04
    needs: wait-for-lint
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Required to fetch version

      - name: Build cheqd-cli with 'cheqd-noded' as entrypoint
        # TODO: Get rid of UID and GID
        run: docker build --target base -t cheqd-cli -f docker/Dockerfile --build-arg UID="$(id -u)" --build-arg GID="$(id -g)" .

      - name: Build cheqd-node with 'node-start' as entrypoint
        run: docker build --target node -t cheqd-node -f docker/Dockerfile --build-arg UID="$(id -u)" --build-arg GID="$(id -g)" .

      - name: Save cheqd-cli
        run: docker save -o cheqd-cli-image.tar cheqd-cli

      - name: Save cheqd-node
        run: docker save -o cheqd-node-image.tar cheqd-node

      - name: Store cheqd-cli artifact
        uses: actions/upload-artifact@v2
        with:
          name: cheqd-cli-image.tar
          path: cheqd-cli-image.tar

      - name: Store cheqd-node artifact
        uses: actions/upload-artifact@v2
        with:
          name: cheqd-node-image.tar
          path: cheqd-node-image.tar

#  test-new-node-setup-from-deb:
#    name: "Test: New node setup from deb"
#    runs-on: ubuntu-20.04
#    needs: [build-binary, build-deb-package, build-node-images]
#    env:
#      VERSION: ${{ needs.build-binary.outputs.VERSION }}
#    steps:
#      - name: Download deb
#        uses: actions/download-artifact@v2
#        with:
#          name: cheqd-node_${{ env.VERSION }}_amd64.deb
#
#      - name: Install deb
#        run: sudo CHEQD_HOME_DIR=/home/runner/cheqd dpkg -i cheqd-node_${{ env.VERSION }}_amd64.deb
#
#      - name: Download node image
#        uses: actions/download-artifact@v2
#        with:
#          name: cheqd-node-image.tar
#
#      - name: Load node image
#        run: docker load -i cheqd-node-image.tar
#
#      - name: Check out
#        uses: actions/checkout@v2
#
#      - name: Set up 4 validators + 2 observers node docker pool
#        working-directory: ./docker/localnet
#        run: |
#          bash gen-network-config.sh
#          CHEQD_NODE_IMAGE=cheqd-node CHEQD_NODE_VERSION=latest docker compose up -d
#
#      - name: Wait for chain
#        run: bash tests/tools/wait-for-chain.sh
#
#      - name: Add observer node
#        working-directory: ./tests/e2e-complex/deb-install
#        run: |
#          ./add-observer.sh
#          cheqd-noded status -n tcp://localhost:26677 2>&1
#          ./wait.sh "[[ $(cheqd-noded status -n 'tcp://localhost:26677' 2>&1 | wc -l) == 1 ]] && echo "New node returns status!""
#
#      - name: Promote observer to validator
#        working-directory: ./tests/e2e-complex/deb-install
#        run: |
#          ./promote-validator.sh
#          cheqd-noded query staking validators --node "http://localhost:26657" | sed -nr 's/.*status: (.*?).*/\1/p' "$1" | while read -r x; do [[ "BOND_STATUS_BONDED" == "$x" ]] && echo "Validator's status is bonded!" || exit 1 ; done
#          ./wait.sh '[[ $(curl -s localhost:26657/block | sed -nr '"'"'s/.*signature": (.*?).*/\1/p'"'"' | wc -l) == 5 ]] && echo "There are 5 validators signatures in block!"'
#          ./wait.sh '[[ $(curl -s localhost:26657/block | sed -nr '"'"'s/.*(signature": null).*/\1/p'"'"' | wc -l) == 0 ]] && echo "There are no null signatures in block!"'
#
#      - name: Gather logs on failure
#        if: ${{ failure() }}
#        run: |
#          journalctl -ex | grep cheqd
#
#  run-python-based-integration-tests:
#    name: "Test: Run python based cosmos and identity tests"
#    runs-on: ubuntu-20.04
#    needs: [build-node-images, build-binary]
#    steps:
#      - name: Load binary artifact
#        uses: actions/download-artifact@v2
#        with:
#          name: cheqd-noded
#          path: /home/runner/.local/bin
#
#      - name: Restore binary permissions
#        run: sudo chmod +x /home/runner/.local/bin/cheqd-noded
#
#      - name: Download node image
#        uses: actions/download-artifact@v2
#        with:
#          name: cheqd-node-image.tar
#
#      - name: Load node image
#        run: docker load -i cheqd-node-image.tar
#
#      - name: Check out
#        uses: actions/checkout@v2
#
#      - name: Set up 4 validators + 2 observers node docker pool
#        working-directory: ./docker/localnet
#        run: |
#          bash gen-network-config.sh
#          CHEQD_NODE_IMAGE=cheqd-node CHEQD_NODE_VERSION=latest docker compose up -d
#
#      - name: Wait for chain
#        run: bash tests/tools/wait-for-chain.sh
#
#      - name: Set up test environment
#        working-directory: ./tests/e2e-pytest
#        run: |
#          pip3 install -r requirements.txt >> /dev/null
#          cp -Rf "${NODE_CONFIGS_BASE}"/validator-0/. /home/runner/.cheqdnode
#          cp -Rf "${NODE_CONFIGS_BASE}"/validator-1/. /home/runner/.cheqdnode
#          sudo chmod -R 777 /home/runner
#
#      - name: Run cosmos-related tests
#        working-directory: ./tests/e2e-pytest
#        run: |
#          set -euxo pipefail
#          OP0_ADDRESS=$(cheqd-noded keys list --keyring-backend "test" --home "${NODE_CONFIGS_BASE}/validator-0" | sed -nr 's/.*address: (.*?).*/\1/p' | sed 's/\r//g')
#          export OP0_ADDRESS
#          OP1_ADDRESS=$(cheqd-noded keys list --keyring-backend "test" --home "${NODE_CONFIGS_BASE}/validator-1" | sed -nr 's/.*address: (.*?).*/\1/p' | sed 's/\r//g')
#          export OP1_ADDRESS
#          pytest -v -rP test_cosmos.py
#
#      - name: Run identity-related tests # TODO: Move into separate stage?
#        working-directory: ./tests/e2e-pytest
#        run: |
#          OP0_ADDRESS=$(cheqd-noded keys list --keyring-backend "test" | sed -nr 's/.*address: (.*?).*/\1/p' | sed -n 1p | sed 's/\r//g')
#          export OP0_ADDRESS
#          OP1_ADDRESS=$(cheqd-noded keys list --keyring-backend "test" | sed -nr 's/.*address: (.*?).*/\1/p' | sed -n 2p | sed 's/\r//g')
#          export OP1_ADDRESS
#          pytest -v -rP test_identity.py
#
#  run-bash-based-integration-tests:
#    name: "Test: Run bash based identity tests"
#    runs-on: ubuntu-20.04
#    needs: [build-binary, build-node-images]
#    steps:
#      - name: Load binary artifact
#        uses: actions/download-artifact@v2
#        with:
#          name: cheqd-noded
#          path: /home/runner/.local/bin
#
#      - name: Restore binary permissions
#        run: sudo chmod +x /home/runner/.local/bin/cheqd-noded
#
#      - name: Download node image
#        uses: actions/download-artifact@v2
#        with:
#          name: cheqd-node-image.tar
#
#      - name: Load node image
#        run: docker load -i cheqd-node-image.tar
#
#      - name: Check out
#        uses: actions/checkout@v2
#
#      - name: Set up 4 validators + 2 observers node docker pool
#        working-directory: ./docker/localnet
#        run: |
#          bash gen-network-config.sh
#          CHEQD_NODE_IMAGE=cheqd-node CHEQD_NODE_VERSION=latest docker compose up -d
#
#      - name: Wait for chain
#        run: bash tests/tools/wait-for-chain.sh
#
#      - name: Import keys
#        working-directory: docker/localnet
#        run: |
#          bash import_keys.sh
#
#      - name: Set up and run tests
#        working-directory: tests/e2e-bash
#        run: |
#          bash run_all.sh
#
#  run-upgrade-test-positive-case:
#    name: "Test: Run positive case for upgrade"
#    runs-on: ubuntu-20.04
#    needs: build-node-images
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          fetch-depth: 0 # It's needed for getting the full version of package by `git describe`
#
#      - name: Download cli image
#        uses: actions/download-artifact@v2
#        with:
#          name: cheqd-cli-image.tar
#
#      - name: Load cli image
#        run: docker load -i cheqd-cli-image.tar
#
#      - name: Chown for current user
#        run: sudo chown "$USER":"$USER" .
#
#      - name: Prepare nodes for checking upgrade
#        working-directory: ./tests/e2e-complex/upgrade
#        run: bash prepare.sh
#
#      - name: Initiate the upgrade process
#        working-directory: ./tests/e2e-complex/upgrade
#        run: bash initiate_upgrade.sh
#
#      - name: Make the upgrade and check results
#        working-directory: ./tests/e2e-complex/upgrade
#        run: bash upgrade_and_check.sh
