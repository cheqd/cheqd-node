name: "Test"
on:
  workflow_call:
    inputs:
      VERSION:
        description: "Build version number"
        type: string
defaults:
  run:
    shell: bash
env:
  NODE_CONFIGS_BASE: "/home/runner/work/cheqd-node/cheqd-node/docker/localnet/network-config"


jobs:

  test-new-node-setup:
    name: "New node setup"
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ inputs.VERSION }}
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Download Debian package
        uses: actions/download-artifact@v3
        with:
          name: cheqd-node_${{ env.VERSION }}_amd64.deb

      - name: Install Debian package
        run: sudo CHEQD_HOME_DIR=/home/runner/cheqd WITH_COSMOVISOR=true dpkg -i cheqd-node_${{ env.VERSION }}_amd64.deb

      - name: Download node Docker image
        uses: actions/download-artifact@v3
        with:
          name: cheqd-node-image.tar

      - name: Load node Docker image
        run: docker load -i cheqd-node-image.tar

      - name: Setup 4 Validators + 2 Observers Docker localnet
        working-directory: ./docker/localnet
        run: |
          set -euo pipefail
          bash gen-network-config.sh
          CHEQD_NODE_IMAGE=cheqd-node CHEQD_NODE_VERSION=latest docker compose up -d

      - name: Check all Docker localnet nodes are active
        run: |
          set -euo pipefail
          bash ./tests/tools/wait-for-chain.sh

      - name: Add an Observer node using Debian package
        working-directory: ./tests/e2e-complex/deb-install
        run: |
          set -euo pipefail
          bash add-observer.sh
          bash wait.sh "[[ $(cheqd-noded status -n 'tcp://localhost:26677' 2>&1 | wc -l) == 1 ]] && echo "Observer node is up""

      - name: Promote Observer to Validator
        working-directory: ./tests/e2e-complex/deb-install
        run: |
          bash promote-validator.sh
          bash check-promotion.sh
          # shellcheck disable=SC2016
          bash wait.sh '[[ $(curl -s localhost:26657/block | sed -nr '"'"'s/.*signature": (.*?).*/\1/p'"'"' | wc -l) == 5 ]] && echo "There are 5 validators signatures in block!"'
          # shellcheck disable=SC2016
          bash wait.sh '[[ $(curl -s localhost:26657/block | sed -nr '"'"'s/.*(signature": null).*/\1/p'"'"' | wc -l) == 0 ]] && echo "There are no null signatures in block!"'

      - name: Gather logs on failure
        if: ${{ failure() }}
        run: |
          journalctl -ex | grep cheqd

  # python-integration-tests:
  #   name: "Python based Cosmos and identity tests"
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Load node binary artifact
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: cheqd-noded
  #         path: /home/runner/.local/bin

  #     - name: Restore binary permissions
  #       run: sudo chmod +x /home/runner/.local/bin/cheqd-noded

  #     - name: Download node Docker image
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: cheqd-node-image.tar

  #     - name: Load node Docker image
  #       run: docker load -i cheqd-node-image.tar

  #     - name: Setup 4 Validators + 2 Observers Docker localnet 
  #       working-directory: ./docker/localnet
  #       run: |
  #         bash gen-network-config.sh
  #         CHEQD_NODE_IMAGE=cheqd-node CHEQD_NODE_VERSION=latest docker compose up -d

  #     - name: Check all Docker localnet nodes are active
  #       run: bash tests/tools/wait-for-chain.sh

  #     - name: Setup Python environment
  #       working-directory: ./tests/e2e-pytest
  #       run: |
  #         set -euo pipefail
  #         pip3 install -r requirements.txt >> /dev/null
  #         cp -Rf "${NODE_CONFIGS_BASE}"/validator-0/. /home/runner/.cheqdnode/
  #         cp -Rf "${NODE_CONFIGS_BASE}"/validator-1/. /home/runner/.cheqdnode/
  #         sudo chmod -R 775 /home/runner/

  #     - name: Run Cosmos-related tests
  #       working-directory: ./tests/e2e-pytest
  #       run: |
  #         set -euo pipefail
  #         OP0_ADDRESS=$(cheqd-noded keys list --keyring-backend "test" --home "${NODE_CONFIGS_BASE}/validator-0" | sed -nr 's/.*address: (.*?).*/\1/p' | sed 's/\r//g')
  #         export OP0_ADDRESS
  #         OP1_ADDRESS=$(cheqd-noded keys list --keyring-backend "test" --home "${NODE_CONFIGS_BASE}/validator-1" | sed -nr 's/.*address: (.*?).*/\1/p' | sed 's/\r//g')
  #         export OP1_ADDRESS
  #         pytest -v -rP test_cosmos.py

  #     - name: Run identity-related tests # TODO: Move into separate stage?
  #       working-directory: ./tests/e2e-pytest
  #       run: |
  #         set -euo pipefail
  #         OP0_ADDRESS=$(cheqd-noded keys list --keyring-backend "test" | sed -nr 's/.*address: (.*?).*/\1/p' | sed -n 1p | sed 's/\r//g')
  #         export OP0_ADDRESS
  #         OP1_ADDRESS=$(cheqd-noded keys list --keyring-backend "test" | sed -nr 's/.*address: (.*?).*/\1/p' | sed -n 2p | sed 's/\r//g')
  #         export OP1_ADDRESS
  #         pytest -v -rP test_identity.py

  # bash-integration-tests:
  #   name: "Bash-based identity tests"
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Load binary artifact
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: cheqd-noded
  #         path: /home/runner/.local/bin

  #     - name: Restore binary permissions
  #       run: sudo chmod +x /home/runner/.local/bin/cheqd-noded

  #     - name: Download node Docker image
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: cheqd-node-image.tar

  #     - name: Load node Docker image
  #       run: docker load -i cheqd-node-image.tar

  #     - name: Setup 4 Validators + 2 Observers Docker localnet
  #       working-directory: ./docker/localnet
  #       run: |
  #         bash gen-network-config.sh
  #         CHEQD_NODE_IMAGE=cheqd-node CHEQD_NODE_VERSION=latest docker compose up -d

  #     - name: Check all Docker localnet nodes are active
  #       run: bash ./tests/tools/wait-for-chain.sh

  #     - name: Import keys
  #       working-directory: ./docker/localnet
  #       run: |
  #         bash import_keys.sh

  #     - name: Run tests
  #       working-directory: ./tests/e2e-bash
  #       run: |
  #         bash run_all.sh

  node-upgrade-test:
    name: "Run positive case for upgrade"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download tar archive
        uses: actions/download-artifact@v3
        with:
          name: cheqd-node_${{ env.VERSION }}.tar.gz

      - name: Rename tar archive
        run: |
          mv cheqd-node_${{ env.VERSION }}.tar.gz cheqd-noded.tar.gz

      - name: Download cheqd-cosmovisor Docker image
        uses: actions/download-artifact@v3
        with:
          name: cheqd-cosmovisor-to.tar

      - name: Load cheqd-cli Docker image
        run: docker load -i cheqd-cosmovisor-to.tar

      - name: Give current user ownership
        run: sudo chown "$USER":"$USER" .

      - name: Prepare nodes for upgrade
        working-directory: ./tests/e2e-complex/upgrade
        run: bash prepare.sh

      - name: Initiate upgrade
        working-directory: ./tests/e2e-complex/upgrade
        run: bash initiate_upgrade.sh

      - name: Check for successful upgrade
        working-directory: ./tests/e2e-complex/upgrade
        run: bash upgrade_and_check.sh
