name: Test

on:
  push:
    paths-ignore:
    - '**.md'
    - 'docs/**'
    - 'architecture/**'
    - '.gitbook/**'

env:
  NODE_CONFIGS_BASE: "/home/runner/work/cheqd-node/cheqd-node/tests/networks/docker-compose-localnet/network-config"

jobs:

  run-unit-test:
    name: Run unit tests
    runs-on: ubuntu-20.04
    steps:
      - name: Set up Go 1.17
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - uses: actions/checkout@v2

      - name: Run tests
        run: go test -v ./...

  build-binary:
    name: Build binary
    runs-on: ubuntu-20.04
    outputs:
      VERSION: ${{ steps.set-version.outputs.VERSION }}
    steps:
      - name: Set up Go 1.17
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Get go protoc compiler plugins
        env:
          GOLANG_PROTOBUF_VERSION: 1.3.5
          GOGO_PROTOBUF_VERSION: 1.3.2
          GRPC_GATEWAY_VERSION: 1.14.7
        run: |
          # Taken from: tendermintdev/sdk-proto-gen:v0.2
          go get \
            github.com/golang/protobuf/protoc-gen-go@v${GOLANG_PROTOBUF_VERSION} \
            github.com/gogo/protobuf/protoc-gen-gogo@v${GOGO_PROTOBUF_VERSION} \
            github.com/gogo/protobuf/protoc-gen-gogofast@v${GOGO_PROTOBUF_VERSION} \
            github.com/gogo/protobuf/protoc-gen-gogofaster@v${GOGO_PROTOBUF_VERSION} \
            github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway@v${GRPC_GATEWAY_VERSION} \
            github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger@v${GRPC_GATEWAY_VERSION} \
            github.com/regen-network/cosmos-proto/protoc-gen-gocosmos@latest

      - name: Install buf
        env:
          PREFIX: "/usr/local"
          VERSION: "1.0.0-rc8"
        run: |
          curl -sSL "https://github.com/bufbuild/buf/releases/download/v${VERSION}/buf-$(uname -s)-$(uname -m).tar.gz" | \
          sudo tar -xvzf - -C "${PREFIX}" --strip-components 1

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Required to fetch version

      - name: Build
        run: |
          make proto-gen build

      - name: Store artifact
        uses: actions/upload-artifact@v2
        with:
          name: cheqd-noded
          path: build/cheqd-noded

      - name: Set version
        id: set-version
        run: |
          VERSION=$(build/cheqd-noded version 2>&1)
          echo "::set-output name=VERSION::$VERSION"

  build-tar-package:
    name: Build tar package
    runs-on: ubuntu-20.04
    needs: build-binary
    env:
      VERSION: ${{ needs.build-binary.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v2

      - name: Load binary artifact
        uses: actions/download-artifact@v2
        with:
          name: cheqd-noded

      - name: Restore binary permissions
        run: sudo chmod +x cheqd-noded

      - name: Build tar
        working-directory: ./build-tools
        run: |
          ./build-tar.sh "../cheqd-noded"

      - name: Store tar package artifact
        uses: actions/upload-artifact@v2
        with:
          name: cheqd-node_${{ env.VERSION }}.tar.gz
          path: build-tools/output/cheqd-node_${{ env.VERSION }}.tar.gz

  build-deb-package:
    name: Build deb package
    runs-on: ubuntu-20.04
    needs: build-binary
    env:
      VERSION: ${{ needs.build-binary.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v2

      - name: Load binary artifact
        uses: actions/download-artifact@v2
        with:
          name: cheqd-noded

      - name: Restore binary permissions
        run: sudo chmod +x cheqd-noded

      - name: Install fpm
        run: |
          sudo apt-get install ruby ruby-dev rubygems build-essential
          sudo gem install --no-document fpm

      - name: Build deb
        working-directory: ./build-tools
        run: |
          ./build-deb.sh "../cheqd-noded"

      - name: Store deb package artifact
        uses: actions/upload-artifact@v2
        with:
          name: cheqd-node_${{ env.VERSION }}_amd64.deb
          path: build-tools/output/cheqd-node_${{ env.VERSION }}_amd64.deb

  build-node-image:
    name: Build cheqd-node image
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Required to fetch version

      - name: Build
        run: docker build -f docker/Dockerfile --no-cache -t cheqd-node  --build-arg UID=$(id -u) --build-arg GID=$(id -g) . # TODO: Get rid of UID and GID

      - name: Save
        run: docker save -o cheqd-node-image.tar cheqd-node

      - name: Store artifact
        uses: actions/upload-artifact@v2
        with:
          name: cheqd-node-image.tar
          path: cheqd-node-image.tar

  build-testnet-image:
    name: Build cheqd-testnet image
    runs-on: ubuntu-20.04
    needs: build-node-image
    steps:
      - name: Check out
        uses: actions/checkout@v2

      - name: Download node image
        uses: actions/download-artifact@v2
        with:
          name: cheqd-node-image.tar

      - name: Load node image
        run: docker load -i cheqd-node-image.tar

      - name: Build
        run: docker build -f tests/networks/docker-localnet/Dockerfile --no-cache -t cheqd-testnet .

      - name: Save
        run: docker save -o cheqd-testnet-image.tar cheqd-testnet

      - name: Store artifact
        uses: actions/upload-artifact@v2
        with:
          name: cheqd-testnet-image.tar
          path: cheqd-testnet-image.tar

  test-new-node-setup-from-deb:
    name: Test new node setup from deb
    runs-on: ubuntu-20.04
    needs: [build-binary, build-deb-package, build-node-image]
    env:
      VERSION: ${{ needs.build-binary.outputs.VERSION }}
    steps:
      - name: Download deb
        uses: actions/download-artifact@v2
        with:
          name: cheqd-node_${{ env.VERSION }}_amd64.deb

      - name: Install deb
        run: sudo CHEQD_HOME_DIR=/home/runner/cheqd dpkg -i cheqd-node_${{ env.VERSION }}_amd64.deb

      - name: Download node image
        uses: actions/download-artifact@v2
        with:
          name: cheqd-node-image.tar

      - name: Load node image
        run: docker load -i cheqd-node-image.tar

      - name: Check out
        uses: actions/checkout@v2

      - name: Set up 4 validators + 2 observers node docker pool  # TODO: Replace with testnet image
        working-directory: ./tests/networks/docker-compose-localnet
        run: |
          bash gen-network-config.sh
          docker-compose up -d

      - name: Wait for chain
        run: bash tests/networks/tools/wait-for-chain.sh

      - name: Add observer node
        working-directory: ./tests/networks/docker-compose-localnet
        run: |
          ./add-observer.sh
          cheqd-noded status -n tcp://localhost:26677 2>&1
          ./wait.sh '[[ $(cheqd-noded status -n '"'"'tcp://localhost:26677'"'"' 2>&1 | wc -l) == 1 ]] && echo "New node returns status!"'

      - name: Promote observer to validator
        working-directory: ./tests/networks/docker-compose-localnet
        run: |
          bash -x promote-validator.sh
          cheqd-noded query staking validators --node "http://localhost:26657" | sed -nr 's/.*status: (.*?).*/\1/p' $1 | while read x; do [[ "BOND_STATUS_BONDED" == $x ]] && echo "Validator's status is bonded!" || exit 1 ; done
          ./wait.sh '[[ $(curl -s localhost:26657/block | sed -nr '"'"'s/.*signature": (.*?).*/\1/p'"'"' | wc -l) == 5 ]] && echo "There are 5 validators signatures in block!"'
          ./wait.sh '[[ $(curl -s localhost:26657/block | sed -nr '"'"'s/.*(signature": null).*/\1/p'"'"' | wc -l) == 0 ]] && echo "There are no null signatures in block!"'

      - name: Gather logs on failure
        if: ${{ failure() }}
        run: |
          journalctl -ex | grep cheqd

      - name: Gather logs on failure 2
        if: ${{ failure() }}
        run: |
          journalctl -u service-name.service --no-pager

  run-cosmos-tests-using-cli:
    name: Run cosmos tests using CLI
    runs-on: ubuntu-20.04
    needs: [build-node-image, build-binary]
    steps:
      - name: Load binary artifact
        uses: actions/download-artifact@v2
        with:
          name: cheqd-noded
          path: /home/runner/.local/bin

      - name: Restore binary permissions
        run: sudo chmod +x /home/runner/.local/bin/cheqd-noded

      - name: Download node image
        uses: actions/download-artifact@v2
        with:
          name: cheqd-node-image.tar

      - name: Load node image
        run: docker load -i cheqd-node-image.tar

      - uses: actions/checkout@v2

      - name: Set up 4 validators + 2 observers node docker pool for local test run # Replace with testnet image
        working-directory: ./tests/networks/docker-compose-localnet
        run: |
          bash gen-network-config.sh
          docker-compose up -d

      - name: Wait for chain
        run: bash tests/networks/tools/wait-for-chain.sh

      - name: Set up test environment
        working-directory: ./tests/e2e
        run: |
          pip3 install -r requirements.txt >> /dev/null
          pip3 install --force-reinstall 'git+https://gitlab.com/evernym/verity/vdr-tools.git@cheqd-node-0.3.1#egg=vdr-tools&subdirectory=wrappers/python' -U
          cp -Rf ${NODE_CONFIGS_BASE}/validator-0/. /home/runner/.cheqdnode
          cp -Rf ${NODE_CONFIGS_BASE}/validator-1/. /home/runner/.cheqdnode
          sudo chmod -R 777 /home/runner

      - name: Run tests
        run: |
          set -euxo pipefail
          export OP0_ADDRESS=$(cheqd-noded keys list --keyring-backend "test" --home "${NODE_CONFIGS_BASE}/validator-0" | sed -nr 's/.*address: (.*?).*/\1/p' | sed 's/\r//g')
          export OP1_ADDRESS=$(cheqd-noded keys list --keyring-backend "test" --home "${NODE_CONFIGS_BASE}/validator-1" | sed -nr 's/.*address: (.*?).*/\1/p' | sed 's/\r//g')
          pytest -v -rP tests/e2e/test_cosmos.py

  run-identity-tests-using-vdr:
    name: Run identity tests using VDR
    runs-on: ubuntu-20.04
    needs: build-testnet-image
    steps:
      - uses: actions/checkout@v2

      - name: Download testnet image
        uses: actions/download-artifact@v2
        with:
          name: cheqd-testnet-image.tar

      - name: Load testnet image
        run: docker load -i cheqd-testnet-image.tar

      - name: Run test net container
        run: |
          docker run -d --rm -p "26657:26657" cheqd-testnet
          bash tests/networks/tools/wait-for-chain.sh
      
      - name: Set up test environment
        working-directory: ./tests/e2e
        run: |
          sudo cp libindy.so /usr/lib/libindy.so
          pip3 install -r requirements.txt >> /dev/null
          pip3 install --force-reinstall 'git+https://gitlab.com/evernym/verity/vdr-tools.git@cheqd-node-0.3.1#egg=vdr-tools&subdirectory=wrappers/python' -U
      
      - name: Run tests
        run: |
          export OP0_ADDRESS=""
          export OP1_ADDRESS=""
          pytest -v -rP tests/e2e/test_identity.py

  run-identity-tests-using-cli:
    name: Run identity tests using CLI
    runs-on: ubuntu-20.04
    needs: [build-binary, build-testnet-image]
    steps:
      - uses: actions/checkout@v2

      - name: Load binary artifact
        uses: actions/download-artifact@v2
        with:
          name: cheqd-noded
          path: /home/runner/.local/bin

      - name: Restore binary permissions
        run: sudo chmod +x /home/runner/.local/bin/cheqd-noded

      - name: Download testnet image
        uses: actions/download-artifact@v2
        with:
          name: cheqd-testnet-image.tar

      - name: Load testnet image
        run: docker load -i cheqd-testnet-image.tar

      - name: Run test net container
        run: |
          docker run -d --rm -p "26657:26657" -p "1317:1317" cheqd-testnet
          bash tests/networks/tools/wait-for-chain.sh

      - name: Set up and run tests
        working-directory: tests/cli
        run: |
          bash import_keys.sh
          bash run_all.sh
