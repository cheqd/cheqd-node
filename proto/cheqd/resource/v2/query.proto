syntax = "proto3";

package cheqd.resource.v2;

import "cheqd/resource/v2/resource.proto";
import "google/api/annotations.proto";

option go_package = "github.com/cheqd/cheqd-node/x/resource/types";

service Query {
  // returns a Resource
  rpc Resource(QueryGetResourceRequest) returns (QueryGetResourceResponse) {
    option (google.api.http).get = "/cheqd/resource/v2/{collection_id}/resources/{id}";
  }
  // returns Resource Metadata 
  rpc ResourceMetadata(QueryGetResourceMetadataRequest) returns (QueryGetResourceMetadataResponse) {
    option (google.api.http).get = "/cheqd/resource/v2/{collection_id}/resources/{id}/metadata";
  }
  // returns a collection resource metadata for given collection id
  rpc CollectionResources(QueryGetCollectionResourcesRequest) returns (QueryGetCollectionResourcesResponse) {
    option (google.api.http).get = "/cheqd/resource/v2/{collection_id}/metadata";
  }
}

message QueryGetResourceRequest {
  // is unique identifier a for collection 
  string collection_id = 1;
  // is unique identifier for a resource
  string id = 2;
}

message QueryGetResourceResponse {
  ResourceWithMetadata resource = 1;
}

message QueryGetResourceMetadataRequest {
  // is unique identifier a for collection 
  string collection_id = 1;
  // is unique identifier for a resource
  string id = 2;
}

message QueryGetResourceMetadataResponse {
  Metadata resource = 1;
}

message QueryGetCollectionResourcesRequest {
  // is unique identifier a for collection 
  string collection_id = 1;
}

message QueryGetCollectionResourcesResponse {
  repeated Metadata resources = 1;
}
